$date
	Wed Dec  6 13:00:29 2023
$end
$version
	Questa Intel Starter FPGA Edition Version 2021.2
$end
$timescale
	1ps
$end

$scope module bus_top_tb $end
$var reg 1 ! clk $end
$var reg 1 " rstn $end
$var reg 1 # m1_mode_in $end
$var reg 1 $ m1_start $end
$var reg 1 % m2_mode_in $end
$var reg 1 & m2_start $end
$var reg 16 ' addr [15:0] $end
$var reg 1 ( rstn_led $end
$var reg 1 ) m1_ack_led $end
$var reg 1 * m1_master_ready_led $end
$var reg 1 + m1_slave_valid_led $end
$var reg 1 , m1_slave_ready_led $end
$var reg 1 - m1_master_valid_led $end
$var reg 1 . s1_master_ready_led $end
$var reg 1 / s1_slave_valid_led $end
$var reg 1 0 s1_slave_ready_led $end
$var reg 1 1 s1_master_valid_led $end
$var reg 1 2 m1_mode_led $end
$var reg 1 3 m2_mode_led $end

$scope module tp $end
$var wire 1 4 clk $end
$var wire 1 5 rstn $end
$var wire 1 6 m1_mode_in $end
$var wire 1 7 m1_start $end
$var wire 1 8 m2_mode_in $end
$var wire 1 9 m2_start $end
$var wire 1 : addr [15] $end
$var wire 1 ; addr [14] $end
$var wire 1 < addr [13] $end
$var wire 1 = addr [12] $end
$var wire 1 > addr [11] $end
$var wire 1 ? addr [10] $end
$var wire 1 @ addr [9] $end
$var wire 1 A addr [8] $end
$var wire 1 B addr [7] $end
$var wire 1 C addr [6] $end
$var wire 1 D addr [5] $end
$var wire 1 E addr [4] $end
$var wire 1 F addr [3] $end
$var wire 1 G addr [2] $end
$var wire 1 H addr [1] $end
$var wire 1 I addr [0] $end
$var reg 1 J rstn_led $end
$var reg 1 K m1_ack_led $end
$var reg 1 L m1_master_ready_led $end
$var reg 1 M m1_slave_valid_led $end
$var reg 1 N m1_slave_ready_led $end
$var reg 1 O m1_master_valid_led $end
$var reg 1 P s1_master_ready_led $end
$var reg 1 Q s1_slave_valid_led $end
$var reg 1 R s1_slave_ready_led $end
$var reg 1 S s1_master_valid_led $end
$var reg 1 T m1_mode_led $end
$var reg 1 U m2_mode_led $end
$var reg 1 V m1_mode $end
$var reg 1 W m1_rd_bus $end
$var reg 1 X m1_wr_bus $end
$var reg 1 Y m1_ack $end
$var reg 1 Z m1_master_valid $end
$var reg 1 [ m1_slave_ready $end
$var reg 1 \ m1_master_ready $end
$var reg 1 ] m1_slave_valid $end
$var reg 1 ^ m1_breq $end
$var reg 1 _ m1_bgrant $end
$var reg 1 ` m1_split $end
$var reg 8 a m1_wr_data [7:0] $end
$var reg 8 b m1_rd_data [7:0] $end
$var reg 1 c m1_wr_en $end
$var reg 1 d m2_mode $end
$var reg 1 e m2_rd_bus $end
$var reg 1 f m2_wr_bus $end
$var reg 1 g m2_ack $end
$var reg 1 h m2_master_valid $end
$var reg 1 i m2_slave_ready $end
$var reg 1 j m2_master_ready $end
$var reg 1 k m2_slave_valid $end
$var reg 1 l m2_breq $end
$var reg 1 m m2_bgrant $end
$var reg 1 n m2_split $end
$var reg 8 o m2_wr_data [7:0] $end
$var reg 8 p m2_rd_data [7:0] $end
$var reg 1 q m2_wr_en $end
$var reg 1 r s1_mode $end
$var reg 1 s s1_wr_bus $end
$var reg 1 t s1_master_valid $end
$var reg 1 u s1_master_ready $end
$var reg 1 v s1_rd_bus $end
$var reg 1 w s1_slave_ready $end
$var reg 1 x s1_slave_valid $end
$var reg 8 y s1_ram_in [7:0] $end
$var reg 8 z s1_ram_out [7:0] $end
$var reg 11 { s1_ram_addr_out [10:0] $end
$var reg 1 | s1_ram_wr_en $end
$var reg 1 } s2_mode $end
$var reg 1 ~ s2_wr_bus $end
$var reg 1 !! s2_master_valid $end
$var reg 1 "! s2_master_ready $end
$var reg 1 #! s2_rd_bus $end
$var reg 1 $! s2_slave_ready $end
$var reg 1 %! s2_slave_valid $end
$var reg 1 &! slave_split $end
$var reg 8 '! s2_ram_in [7:0] $end
$var reg 8 (! s2_ram_out [7:0] $end
$var reg 12 )! s2_ram_addr_out [11:0] $end
$var reg 1 *! s2_ram_wr_en $end
$var reg 1 +! s3_mode $end
$var reg 1 ,! s3_wr_bus $end
$var reg 1 -! s3_master_valid $end
$var reg 1 .! s3_master_ready $end
$var reg 1 /! s3_rd_bus $end
$var reg 1 0! s3_slave_ready $end
$var reg 1 1! s3_slave_valid $end
$var reg 8 2! s3_ram_in [7:0] $end
$var reg 8 3! s3_ram_out [7:0] $end
$var reg 12 4! s3_ram_addr_out [11:0] $end
$var reg 1 5! s3_ram_wr_en $end
$var reg 1 6! bb_mode $end
$var reg 1 7! bb_wr_bus $end
$var reg 1 8! bb_master_valid $end
$var reg 1 9! bb_master_ready $end
$var reg 1 :! bb_rd_bus $end
$var reg 1 ;! bb_slave_ready $end
$var reg 1 <! bb_slave_valid $end

$scope module mp_1 $end
$var parameter 32 =! TIMEOUT $end
$var wire 1 4 clk $end
$var wire 1 5 rstn $end
$var reg 1 >! mode $end
$var wire 1 ?! rd_bus $end
$var reg 1 @! wr_bus $end
$var wire 1 A! ack $end
$var reg 1 B! master_valid $end
$var wire 1 C! slave_ready $end
$var reg 1 D! master_ready $end
$var wire 1 E! slave_valid $end
$var reg 1 F! breq $end
$var wire 1 G! bgrant $end
$var wire 1 H! split $end
$var wire 1 I! m_wr_data [7] $end
$var wire 1 J! m_wr_data [6] $end
$var wire 1 K! m_wr_data [5] $end
$var wire 1 L! m_wr_data [4] $end
$var wire 1 M! m_wr_data [3] $end
$var wire 1 N! m_wr_data [2] $end
$var wire 1 O! m_wr_data [1] $end
$var wire 1 P! m_wr_data [0] $end
$var reg 8 Q! m_rd_data [7:0] $end
$var wire 1 : m_addr [15] $end
$var wire 1 ; m_addr [14] $end
$var wire 1 < m_addr [13] $end
$var wire 1 = m_addr [12] $end
$var wire 1 > m_addr [11] $end
$var wire 1 ? m_addr [10] $end
$var wire 1 @ m_addr [9] $end
$var wire 1 A m_addr [8] $end
$var wire 1 B m_addr [7] $end
$var wire 1 C m_addr [6] $end
$var wire 1 D m_addr [5] $end
$var wire 1 E m_addr [4] $end
$var wire 1 F m_addr [3] $end
$var wire 1 G m_addr [2] $end
$var wire 1 H m_addr [1] $end
$var wire 1 I m_addr [0] $end
$var wire 1 6 m_mode $end
$var reg 1 R! m_wr_en $end
$var wire 1 S! m_start $end
$var reg 4 T! state [3:0] $end
$var reg 4 U! next_state [3:0] $end
$var reg 4 V! t_count [3:0] $end
$var reg 6 W! timeout [5:0] $end
$var reg 8 X! t_wr_data [7:0] $end
$var reg 8 Y! t_rd_data [7:0] $end
$var reg 16 Z! t_addr [15:0] $end
$var reg 1 [! t_mode $end

$scope begin NEXT_STATE_LOGIC $end
$upscope $end

$scope begin STATE_SEQUENCER $end
$upscope $end

$scope begin OUTPUT_LOGIC $end
$upscope $end

$scope begin REG_LOGIC $end
$upscope $end
$upscope $end

$scope module mp_2 $end
$var parameter 32 \! TIMEOUT $end
$var wire 1 4 clk $end
$var wire 1 5 rstn $end
$var reg 1 ]! mode $end
$var wire 1 ^! rd_bus $end
$var reg 1 _! wr_bus $end
$var wire 1 `! ack $end
$var reg 1 a! master_valid $end
$var wire 1 b! slave_ready $end
$var reg 1 c! master_ready $end
$var wire 1 d! slave_valid $end
$var reg 1 e! breq $end
$var wire 1 f! bgrant $end
$var wire 1 g! split $end
$var wire 1 h! m_wr_data [7] $end
$var wire 1 i! m_wr_data [6] $end
$var wire 1 j! m_wr_data [5] $end
$var wire 1 k! m_wr_data [4] $end
$var wire 1 l! m_wr_data [3] $end
$var wire 1 m! m_wr_data [2] $end
$var wire 1 n! m_wr_data [1] $end
$var wire 1 o! m_wr_data [0] $end
$var reg 8 p! m_rd_data [7:0] $end
$var wire 1 : m_addr [15] $end
$var wire 1 ; m_addr [14] $end
$var wire 1 < m_addr [13] $end
$var wire 1 = m_addr [12] $end
$var wire 1 > m_addr [11] $end
$var wire 1 ? m_addr [10] $end
$var wire 1 @ m_addr [9] $end
$var wire 1 A m_addr [8] $end
$var wire 1 B m_addr [7] $end
$var wire 1 C m_addr [6] $end
$var wire 1 D m_addr [5] $end
$var wire 1 E m_addr [4] $end
$var wire 1 F m_addr [3] $end
$var wire 1 G m_addr [2] $end
$var wire 1 H m_addr [1] $end
$var wire 1 I m_addr [0] $end
$var wire 1 8 m_mode $end
$var reg 1 q! m_wr_en $end
$var wire 1 r! m_start $end
$var reg 4 s! state [3:0] $end
$var reg 4 t! next_state [3:0] $end
$var reg 4 u! t_count [3:0] $end
$var reg 6 v! timeout [5:0] $end
$var reg 8 w! t_wr_data [7:0] $end
$var reg 8 x! t_rd_data [7:0] $end
$var reg 16 y! t_addr [15:0] $end
$var reg 1 z! t_mode $end

$scope begin NEXT_STATE_LOGIC $end
$upscope $end

$scope begin STATE_SEQUENCER $end
$upscope $end

$scope begin OUTPUT_LOGIC $end
$upscope $end

$scope begin REG_LOGIC $end
$upscope $end
$upscope $end

$scope module sp_1 $end
$var parameter 32 {! ADDR_WIDTH $end
$var parameter 32 |! DATA_WIDTH $end
$var parameter 32 }! READ_LATENCY $end
$var parameter 32 ~! SPLIT_EN $end
$var parameter 32 !" COUNTER_LENGTH $end
$var parameter 32 "" NUM_STATES $end
$var parameter 32 #" STATE_N_BITS $end
$var parameter 32 $" READ_COUNTER_LENGTH $end
$var wire 1 %" mode $end
$var wire 1 &" wr_bus $end
$var wire 1 '" master_valid $end
$var wire 1 (" master_ready $end
$var wire 1 5 rstn $end
$var wire 1 4 clk $end
$var reg 1 )" rd_bus $end
$var reg 1 *" slave_ready $end
$var reg 1 +" slave_valid $end
$var reg 1 ," split $end
$var wire 1 -" ram_in [7] $end
$var wire 1 ." ram_in [6] $end
$var wire 1 /" ram_in [5] $end
$var wire 1 0" ram_in [4] $end
$var wire 1 1" ram_in [3] $end
$var wire 1 2" ram_in [2] $end
$var wire 1 3" ram_in [1] $end
$var wire 1 4" ram_in [0] $end
$var reg 8 5" ram_out [7:0] $end
$var reg 11 6" ram_addr_out [10:0] $end
$var reg 1 7" ram_wr_en $end
$var reg 5 8" counter [4:0] $end
$var reg 11 9" addr_in [10:0] $end
$var reg 8 :" data_in [7:0] $end
$var reg 1 ;" port_ready $end
$var reg 1 <" port_valid $end
$var reg 3 =" read_counter [2:0] $end
$var reg 3 >" state [2:0] $end
$var reg 3 ?" next_state [2:0] $end

$scope begin NEXT_STATE_DECODER $end
$upscope $end

$scope begin STATE_SEQUENCER $end
$upscope $end

$scope begin OUTPUT_DECODER $end
$upscope $end
$upscope $end

$scope module sp_2 $end
$var parameter 32 @" ADDR_WIDTH $end
$var parameter 32 A" DATA_WIDTH $end
$var parameter 32 B" READ_LATENCY $end
$var parameter 32 C" SPLIT_EN $end
$var parameter 32 D" COUNTER_LENGTH $end
$var parameter 32 E" NUM_STATES $end
$var parameter 32 F" STATE_N_BITS $end
$var parameter 32 G" READ_COUNTER_LENGTH $end
$var wire 1 H" mode $end
$var wire 1 I" wr_bus $end
$var wire 1 J" master_valid $end
$var wire 1 K" master_ready $end
$var wire 1 5 rstn $end
$var wire 1 4 clk $end
$var reg 1 L" rd_bus $end
$var reg 1 M" slave_ready $end
$var reg 1 N" slave_valid $end
$var reg 1 O" split $end
$var wire 1 P" ram_in [7] $end
$var wire 1 Q" ram_in [6] $end
$var wire 1 R" ram_in [5] $end
$var wire 1 S" ram_in [4] $end
$var wire 1 T" ram_in [3] $end
$var wire 1 U" ram_in [2] $end
$var wire 1 V" ram_in [1] $end
$var wire 1 W" ram_in [0] $end
$var reg 8 X" ram_out [7:0] $end
$var reg 12 Y" ram_addr_out [11:0] $end
$var reg 1 Z" ram_wr_en $end
$var reg 5 [" counter [4:0] $end
$var reg 12 \" addr_in [11:0] $end
$var reg 8 ]" data_in [7:0] $end
$var reg 1 ^" port_ready $end
$var reg 1 _" port_valid $end
$var reg 3 `" read_counter [2:0] $end
$var reg 3 a" state [2:0] $end
$var reg 3 b" next_state [2:0] $end

$scope begin NEXT_STATE_DECODER $end
$upscope $end

$scope begin STATE_SEQUENCER $end
$upscope $end

$scope begin OUTPUT_DECODER $end
$upscope $end
$upscope $end

$scope module sp_3 $end
$var parameter 32 c" ADDR_WIDTH $end
$var parameter 32 d" DATA_WIDTH $end
$var parameter 32 e" READ_LATENCY $end
$var parameter 32 f" SPLIT_EN $end
$var parameter 32 g" COUNTER_LENGTH $end
$var parameter 32 h" NUM_STATES $end
$var parameter 32 i" STATE_N_BITS $end
$var parameter 32 j" READ_COUNTER_LENGTH $end
$var wire 1 k" mode $end
$var wire 1 l" wr_bus $end
$var wire 1 m" master_valid $end
$var wire 1 n" master_ready $end
$var wire 1 5 rstn $end
$var wire 1 4 clk $end
$var reg 1 o" rd_bus $end
$var reg 1 p" slave_ready $end
$var reg 1 q" slave_valid $end
$var reg 1 r" split $end
$var wire 1 s" ram_in [7] $end
$var wire 1 t" ram_in [6] $end
$var wire 1 u" ram_in [5] $end
$var wire 1 v" ram_in [4] $end
$var wire 1 w" ram_in [3] $end
$var wire 1 x" ram_in [2] $end
$var wire 1 y" ram_in [1] $end
$var wire 1 z" ram_in [0] $end
$var reg 8 {" ram_out [7:0] $end
$var reg 12 |" ram_addr_out [11:0] $end
$var reg 1 }" ram_wr_en $end
$var reg 5 ~" counter [4:0] $end
$var reg 12 !# addr_in [11:0] $end
$var reg 8 "# data_in [7:0] $end
$var reg 1 ## port_ready $end
$var reg 1 $# port_valid $end
$var reg 3 %# read_counter [2:0] $end
$var reg 3 &# state [2:0] $end
$var reg 3 '# next_state [2:0] $end

$scope begin NEXT_STATE_DECODER $end
$upscope $end

$scope begin STATE_SEQUENCER $end
$upscope $end

$scope begin OUTPUT_DECODER $end
$upscope $end
$upscope $end

$scope module m1_ram $end
$var wire 1 E address [4] $end
$var wire 1 F address [3] $end
$var wire 1 G address [2] $end
$var wire 1 H address [1] $end
$var wire 1 I address [0] $end
$var tri1 1 4 clock $end
$var wire 1 (# data [7] $end
$var wire 1 )# data [6] $end
$var wire 1 *# data [5] $end
$var wire 1 +# data [4] $end
$var wire 1 ,# data [3] $end
$var wire 1 -# data [2] $end
$var wire 1 .# data [1] $end
$var wire 1 /# data [0] $end
$var wire 1 0# wren $end
$var wire 1 1# q [7] $end
$var wire 1 2# q [6] $end
$var wire 1 3# q [5] $end
$var wire 1 4# q [4] $end
$var wire 1 5# q [3] $end
$var wire 1 6# q [2] $end
$var wire 1 7# q [1] $end
$var wire 1 8# q [0] $end
$var wire 1 9# sub_wire0 [7] $end
$var wire 1 :# sub_wire0 [6] $end
$var wire 1 ;# sub_wire0 [5] $end
$var wire 1 <# sub_wire0 [4] $end
$var wire 1 =# sub_wire0 [3] $end
$var wire 1 ># sub_wire0 [2] $end
$var wire 1 ?# sub_wire0 [1] $end
$var wire 1 @# sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 A# width_a $end
$var parameter 32 B# widthad_a $end
$var parameter 32 C# numwords_a $end
$var parameter 96 D# outdata_reg_a $end
$var parameter 32 E# address_aclr_a $end
$var parameter 32 F# outdata_aclr_a $end
$var parameter 32 G# indata_aclr_a $end
$var parameter 32 H# wrcontrol_aclr_a $end
$var parameter 32 I# byteena_aclr_a $end
$var parameter 32 J# width_byteena_a $end
$var parameter 32 K# width_b $end
$var parameter 32 L# widthad_b $end
$var parameter 32 M# numwords_b $end
$var parameter 48 N# rdcontrol_reg_b $end
$var parameter 48 O# address_reg_b $end
$var parameter 96 P# outdata_reg_b $end
$var parameter 32 Q# outdata_aclr_b $end
$var parameter 32 R# rdcontrol_aclr_b $end
$var parameter 48 S# indata_reg_b $end
$var parameter 48 T# wrcontrol_wraddress_reg_b $end
$var parameter 48 U# byteena_reg_b $end
$var parameter 32 V# indata_aclr_b $end
$var parameter 32 W# wrcontrol_aclr_b $end
$var parameter 32 X# address_aclr_b $end
$var parameter 32 Y# byteena_aclr_b $end
$var parameter 32 Z# width_byteena_b $end
$var parameter 48 [# clock_enable_input_a $end
$var parameter 48 \# clock_enable_output_a $end
$var parameter 48 ]# clock_enable_input_b $end
$var parameter 48 ^# clock_enable_output_b $end
$var parameter 120 _# clock_enable_core_a $end
$var parameter 120 `# clock_enable_core_b $end
$var parameter 160 a# read_during_write_mode_port_a $end
$var parameter 160 b# read_during_write_mode_port_b $end
$var parameter 40 c# enable_ecc $end
$var parameter 32 d# width_eccstatus $end
$var parameter 40 e# ecc_pipeline_stage_enabled $end
$var parameter 88 f# operation_mode $end
$var parameter 32 g# byte_size $end
$var parameter 72 h# read_during_write_mode_mixed_ports $end
$var parameter 32 i# ram_block_type $end
$var parameter 368 j# init_file $end
$var parameter 48 k# init_file_layout $end
$var parameter 32 l# maximum_depth $end
$var parameter 96 m# intended_device_family $end
$var parameter 312 n# lpm_hint $end
$var parameter 80 o# lpm_type $end
$var parameter 24 p# implement_in_les $end
$var parameter 40 q# power_up_uninitialized $end
$var parameter 32 r# family_arria10 $end
$var tri0 1 0# wren_a $end
$var tri0 1 s# wren_b $end
$var tri1 1 t# rden_a $end
$var tri1 1 u# rden_b $end
$var wire 1 (# data_a [7] $end
$var wire 1 )# data_a [6] $end
$var wire 1 *# data_a [5] $end
$var wire 1 +# data_a [4] $end
$var wire 1 ,# data_a [3] $end
$var wire 1 -# data_a [2] $end
$var wire 1 .# data_a [1] $end
$var wire 1 /# data_a [0] $end
$var wire 1 v# data_b [0] $end
$var wire 1 E address_a [4] $end
$var wire 1 F address_a [3] $end
$var wire 1 G address_a [2] $end
$var wire 1 H address_a [1] $end
$var wire 1 I address_a [0] $end
$var wire 1 w# address_b [0] $end
$var tri1 1 4 clock0 $end
$var wire 1 x# clock1 $end
$var tri1 1 y# clocken0 $end
$var tri1 1 z# clocken1 $end
$var tri1 1 {# clocken2 $end
$var tri1 1 |# clocken3 $end
$var tri0 1 }# aclr0 $end
$var tri0 1 ~# aclr1 $end
$var tri1 1 !$ byteena_a [0] $end
$var tri1 1 "$ byteena_b [0] $end
$var tri0 1 #$ addressstall_a $end
$var tri0 1 $$ addressstall_b $end
$var wire 1 9# q_a [7] $end
$var wire 1 :# q_a [6] $end
$var wire 1 ;# q_a [5] $end
$var wire 1 <# q_a [4] $end
$var wire 1 =# q_a [3] $end
$var wire 1 ># q_a [2] $end
$var wire 1 ?# q_a [1] $end
$var wire 1 @# q_a [0] $end
$var wire 1 %$ q_b [0] $end
$var wire 1 &$ eccstatus [2] $end
$var wire 1 '$ eccstatus [1] $end
$var wire 1 ($ eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 )$ width_a $end
$var parameter 32 *$ widthad_a $end
$var parameter 32 +$ numwords_a $end
$var parameter 96 ,$ outdata_reg_a $end
$var parameter 32 -$ address_aclr_a $end
$var parameter 32 .$ outdata_aclr_a $end
$var parameter 32 /$ indata_aclr_a $end
$var parameter 32 0$ wrcontrol_aclr_a $end
$var parameter 32 1$ byteena_aclr_a $end
$var parameter 32 2$ width_byteena_a $end
$var parameter 32 3$ width_b $end
$var parameter 32 4$ widthad_b $end
$var parameter 32 5$ numwords_b $end
$var parameter 48 6$ rdcontrol_reg_b $end
$var parameter 48 7$ address_reg_b $end
$var parameter 96 8$ outdata_reg_b $end
$var parameter 32 9$ outdata_aclr_b $end
$var parameter 32 :$ rdcontrol_aclr_b $end
$var parameter 48 ;$ indata_reg_b $end
$var parameter 48 <$ wrcontrol_wraddress_reg_b $end
$var parameter 48 =$ byteena_reg_b $end
$var parameter 32 >$ indata_aclr_b $end
$var parameter 32 ?$ wrcontrol_aclr_b $end
$var parameter 32 @$ address_aclr_b $end
$var parameter 32 A$ byteena_aclr_b $end
$var parameter 32 B$ width_byteena_b $end
$var parameter 48 C$ clock_enable_input_a $end
$var parameter 48 D$ clock_enable_output_a $end
$var parameter 48 E$ clock_enable_input_b $end
$var parameter 48 F$ clock_enable_output_b $end
$var parameter 120 G$ clock_enable_core_a $end
$var parameter 120 H$ clock_enable_core_b $end
$var parameter 160 I$ read_during_write_mode_port_a $end
$var parameter 160 J$ read_during_write_mode_port_b $end
$var parameter 40 K$ enable_ecc $end
$var parameter 32 L$ width_eccstatus $end
$var parameter 40 M$ ecc_pipeline_stage_enabled $end
$var parameter 88 N$ operation_mode $end
$var parameter 32 O$ byte_size $end
$var parameter 72 P$ read_during_write_mode_mixed_ports $end
$var parameter 32 Q$ ram_block_type $end
$var parameter 368 R$ init_file $end
$var parameter 48 S$ init_file_layout $end
$var parameter 32 T$ maximum_depth $end
$var parameter 96 U$ intended_device_family $end
$var parameter 312 V$ lpm_hint $end
$var parameter 80 W$ lpm_type $end
$var parameter 24 X$ implement_in_les $end
$var parameter 40 Y$ power_up_uninitialized $end
$var parameter 24 Z$ sim_show_memory_data_in_port_b_layout $end
$var parameter 32 [$ is_lutram $end
$var parameter 32 \$ is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 ]$ is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 ^$ check_simultaneous_read_write $end
$var parameter 32 _$ dual_port_addreg_b_clk0 $end
$var parameter 32 `$ dual_port_addreg_b_clk1 $end
$var parameter 32 a$ i_byte_size_tmp $end
$var parameter 32 b$ i_lutram_read $end
$var parameter 32 c$ enable_mem_data_b_reading $end
$var parameter 32 d$ family_arriav $end
$var parameter 32 e$ family_cyclonev $end
$var parameter 32 f$ family_base_arriav $end
$var parameter 32 g$ family_arria10 $end
$var parameter 32 h$ family_stratix10 $end
$var parameter 32 i$ family_arriavi $end
$var parameter 32 j$ family_nightfury $end
$var parameter 32 k$ family_arriavgz $end
$var parameter 32 l$ family_stratixv $end
$var parameter 32 m$ family_hardcopyiv $end
$var parameter 32 n$ family_hardcopyiii $end
$var parameter 32 o$ family_hardcopyii $end
$var parameter 32 p$ family_arriaiigz $end
$var parameter 32 q$ family_arriaiigx $end
$var parameter 32 r$ family_stratixiii $end
$var parameter 32 s$ family_zippleback $end
$var parameter 32 t$ family_cycloneiii $end
$var parameter 32 u$ family_cyclone $end
$var parameter 32 v$ family_base_cycloneii $end
$var parameter 32 w$ family_cycloneii $end
$var parameter 32 x$ family_base_stratix $end
$var parameter 32 y$ family_base_stratixii $end
$var parameter 32 z$ family_has_lutram $end
$var parameter 32 {$ family_has_stratixv_style_ram $end
$var parameter 32 |$ family_has_stratixiii_style_ram $end
$var parameter 32 }$ family_has_m512 $end
$var parameter 32 ~$ family_has_megaram $end
$var parameter 32 !% family_has_stratixi_style_ram $end
$var parameter 32 "% is_write_on_positive_edge $end
$var parameter 32 #% lutram_single_port_fast_read $end
$var parameter 32 $% lutram_dual_port_fast_read $end
$var parameter 32 %% s3_address_aclr_a $end
$var parameter 32 &% s3_address_aclr_b $end
$var parameter 32 '% i_address_aclr_family_a $end
$var parameter 32 (% i_address_aclr_family_b $end
$var tri0 1 0# wren_a $end
$var tri0 1 s# wren_b $end
$var tri1 1 t# rden_a $end
$var tri1 1 u# rden_b $end
$var wire 1 (# data_a [7] $end
$var wire 1 )# data_a [6] $end
$var wire 1 *# data_a [5] $end
$var wire 1 +# data_a [4] $end
$var wire 1 ,# data_a [3] $end
$var wire 1 -# data_a [2] $end
$var wire 1 .# data_a [1] $end
$var wire 1 /# data_a [0] $end
$var wire 1 v# data_b [0] $end
$var wire 1 E address_a [4] $end
$var wire 1 F address_a [3] $end
$var wire 1 G address_a [2] $end
$var wire 1 H address_a [1] $end
$var wire 1 I address_a [0] $end
$var wire 1 w# address_b [0] $end
$var tri1 1 4 clock0 $end
$var wire 1 x# clock1 $end
$var tri1 1 y# clocken0 $end
$var tri1 1 z# clocken1 $end
$var tri1 1 {# clocken2 $end
$var tri1 1 |# clocken3 $end
$var tri0 1 }# aclr0 $end
$var tri0 1 ~# aclr1 $end
$var wire 1 !$ byteena_a [0] $end
$var wire 1 "$ byteena_b [0] $end
$var tri0 1 #$ addressstall_a $end
$var tri0 1 $$ addressstall_b $end
$var wire 1 9# q_a [7] $end
$var wire 1 :# q_a [6] $end
$var wire 1 ;# q_a [5] $end
$var wire 1 <# q_a [4] $end
$var wire 1 =# q_a [3] $end
$var wire 1 ># q_a [2] $end
$var wire 1 ?# q_a [1] $end
$var wire 1 @# q_a [0] $end
$var wire 1 %$ q_b [0] $end
$var wire 1 &$ eccstatus [2] $end
$var wire 1 '$ eccstatus [1] $end
$var wire 1 ($ eccstatus [0] $end
$var reg 8 )% i_data_reg_a [7:0] $end
$var reg 8 *% temp_wa [7:0] $end
$var reg 8 +% temp_wa2 [7:0] $end
$var reg 8 ,% temp_wa2b [7:0] $end
$var reg 8 -% init_temp [7:0] $end
$var reg 1 .% i_data_reg_b [0:0] $end
$var reg 1 /% temp_wb [0:0] $end
$var reg 1 0% temp_wb2 [0:0] $end
$var reg 1 1% temp $end
$var reg 8 2% i_q_reg_a [7:0] $end
$var reg 8 3% i_q_tmp_a [7:0] $end
$var reg 8 4% i_q_tmp2_a [7:0] $end
$var reg 1 5% i_q_reg_b [0:0] $end
$var reg 1 6% i_q_tmp_b [0:0] $end
$var reg 1 7% i_q_tmp2_b [0:0] $end
$var reg 1 8% i_q_output_latch [0:0] $end
$var reg 8 9% i_byteena_mask_reg_a [7:0] $end
$var reg 1 :% i_byteena_mask_reg_b [0:0] $end
$var reg 5 ;% i_address_reg_a [4:0] $end
$var reg 1 <% i_address_reg_b [0:0] $end
$var reg 1 =% i_q_ecc_reg_b [0:0] $end
$var reg 1 >% i_q_ecc_tmp_b [0:0] $end
$var reg 5 ?% i_original_address_a [4:0] $end
$var reg 8 @% i_byteena_mask_reg_a_tmp [7:0] $end
$var reg 1 A% i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 8 B% i_byteena_mask_reg_a_out [7:0] $end
$var reg 1 C% i_byteena_mask_reg_b_out [0:0] $end
$var reg 8 D% i_byteena_mask_reg_a_x [7:0] $end
$var reg 1 E% i_byteena_mask_reg_b_x [0:0] $end
$var reg 8 F% i_byteena_mask_reg_a_out_b [7:0] $end
$var reg 1 G% i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 H% ram_initf [2048:1] $end
$var reg 1 I% i_wren_reg_a $end
$var reg 1 J% i_wren_reg_b $end
$var reg 1 K% i_rden_reg_a $end
$var reg 1 L% i_rden_reg_b $end
$var reg 1 M% i_read_flag_a $end
$var reg 1 N% i_read_flag_b $end
$var reg 1 O% i_write_flag_a $end
$var reg 1 P% i_write_flag_b $end
$var reg 1 Q% good_to_go_a $end
$var reg 1 R% good_to_go_b $end
$var reg 32 S% file_desc [31:0] $end
$var reg 1 T% init_file_b_port $end
$var reg 1 U% i_nmram_write_a $end
$var reg 1 V% i_nmram_write_b $end
$var reg 8 W% wa_mult_x [7:0] $end
$var reg 8 X% wa_mult_x_ii [7:0] $end
$var reg 8 Y% wa_mult_x_iii [7:0] $end
$var reg 13 Z% add_reg_a_mult_wa [12:0] $end
$var reg 2 [% add_reg_b_mult_wb [1:0] $end
$var reg 13 \% add_reg_a_mult_wa_pl_wa [12:0] $end
$var reg 2 ]% add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 ^% same_clock_pulse0 $end
$var reg 1 _% same_clock_pulse1 $end
$var reg 1 `% i_original_data_b [0:0] $end
$var reg 8 a% i_original_data_a [7:0] $end
$var reg 1 b% i_address_aclr_a_flag $end
$var reg 1 c% i_address_aclr_a_prev $end
$var reg 1 d% i_address_aclr_b_flag $end
$var reg 1 e% i_address_aclr_b_prev $end
$var reg 1 f% i_outdata_aclr_a_prev $end
$var reg 1 g% i_outdata_aclr_b_prev $end
$var reg 1 h% i_force_reread_a $end
$var reg 1 i% i_force_reread_a1 $end
$var reg 1 j% i_force_reread_b $end
$var reg 1 k% i_force_reread_b1 $end
$var reg 1 l% i_force_reread_a_signal $end
$var reg 1 m% i_force_reread_b_signal $end
$var reg 169 n% cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 o% i_ram_block_type [56:0] $end
$var integer 32 p% i_byte_size $end
$var wire 1 q% i_good_to_write_a $end
$var wire 1 r% i_good_to_write_b $end
$var reg 1 s% i_good_to_write_a2 $end
$var reg 1 t% i_good_to_write_b2 $end
$var reg 1 u% i_core_clocken_a_reg $end
$var reg 1 v% i_core_clocken0_b_reg $end
$var reg 1 w% i_core_clocken1_b_reg $end
$var wire 1 x% i_indata_aclr_a $end
$var wire 1 y% i_address_aclr_a $end
$var wire 1 z% i_wrcontrol_aclr_a $end
$var wire 1 {% i_indata_aclr_b $end
$var wire 1 |% i_address_aclr_b $end
$var wire 1 }% i_wrcontrol_aclr_b $end
$var wire 1 ~% i_outdata_aclr_a $end
$var wire 1 !& i_outdata_aclr_b $end
$var wire 1 "& i_rdcontrol_aclr_b $end
$var wire 1 #& i_byteena_aclr_a $end
$var wire 1 $& i_byteena_aclr_b $end
$var wire 1 %& i_outdata_clken_a $end
$var wire 1 && i_outdata_clken_b $end
$var wire 1 '& i_outlatch_clken_a $end
$var wire 1 (& i_outlatch_clken_b $end
$var wire 1 )& i_clocken0 $end
$var wire 1 *& i_clocken1_b $end
$var wire 1 +& i_clocken0_b $end
$var wire 1 ,& i_core_clocken_a $end
$var wire 1 -& i_core_clocken_b $end
$var wire 1 .& i_core_clocken0_b $end
$var wire 1 /& i_core_clocken1_b $end
$var tri1 1 0& i_byteena_a [0] $end
$var tri1 1 1& i_byteena_b [0] $end
$var integer 32 2& i_numwords_a $end
$var integer 32 3& i_numwords_b $end
$var integer 32 4& i_aclr_flag_a $end
$var integer 32 5& i_aclr_flag_b $end
$var integer 32 6& i_q_tmp2_a_idx $end
$var integer 32 7& init_i $end
$var integer 32 8& i $end
$var integer 32 9& i2 $end
$var integer 32 :& i3 $end
$var integer 32 ;& i4 $end
$var integer 32 <& i5 $end
$var integer 32 =& j $end
$var integer 32 >& j2 $end
$var integer 32 ?& j3 $end
$var integer 32 @& k $end
$var integer 32 A& k2 $end
$var integer 32 B& k3 $end
$var integer 32 C& k4 $end
$var integer 32 D& i_div_wa $end
$var integer 32 E& i_div_wb $end
$var integer 32 F& j_plus_i2 $end
$var integer 32 G& j2_plus_i5 $end
$var integer 32 H& j3_plus_i5 $end
$var integer 32 I& j_plus_i2_div_a $end
$var integer 32 J& j2_plus_i5_div_a $end
$var integer 32 K& j3_plus_i5_div_a $end
$var integer 32 L& j3_plus_i5_div_b $end
$var integer 32 M& i_byteena_count $end
$var integer 32 N& port_a_bit_count_low $end
$var integer 32 O& port_a_bit_count_high $end
$var integer 32 P& port_b_bit_count_low $end
$var integer 32 Q& port_b_bit_count_high $end
$var time 64 R& i_data_write_time_a $end
$var time 64 S& i_data_write_time_b $end

$scope begin genblk4 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk1 $end
$upscope $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 T& IS_FAMILY_ARRIA10 $end
$var reg 160 U& device [160:1] $end
$var reg 1 V& is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 W& IS_FAMILY_ARRIAGX $end
$var reg 160 X& device [160:1] $end
$var reg 1 Y& is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 Z& IS_FAMILY_ARRIAIIGX $end
$var reg 160 [& device [160:1] $end
$var reg 1 \& is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 ]& IS_FAMILY_ARRIAIIGZ $end
$var reg 160 ^& device [160:1] $end
$var reg 1 _& is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 `& IS_FAMILY_ARRIAVGZ $end
$var reg 160 a& device [160:1] $end
$var reg 1 b& is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 c& IS_FAMILY_ARRIAV $end
$var reg 160 d& device [160:1] $end
$var reg 1 e& is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 f& IS_FAMILY_CYCLONE10LP $end
$var reg 160 g& device [160:1] $end
$var reg 1 h& is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 i& IS_FAMILY_CYCLONEII $end
$var reg 160 j& device [160:1] $end
$var reg 1 k& is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 l& IS_FAMILY_CYCLONEIIILS $end
$var reg 160 m& device [160:1] $end
$var reg 1 n& is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 o& IS_FAMILY_CYCLONEIII $end
$var reg 160 p& device [160:1] $end
$var reg 1 q& is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 r& IS_FAMILY_CYCLONEIVE $end
$var reg 160 s& device [160:1] $end
$var reg 1 t& is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 u& IS_FAMILY_CYCLONEIVGX $end
$var reg 160 v& device [160:1] $end
$var reg 1 w& is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 x& IS_FAMILY_CYCLONEV $end
$var reg 160 y& device [160:1] $end
$var reg 1 z& is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 {& IS_FAMILY_CYCLONE $end
$var reg 160 |& device [160:1] $end
$var reg 1 }& is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 ~& IS_FAMILY_HARDCOPYII $end
$var reg 160 !' device [160:1] $end
$var reg 1 "' is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 #' IS_FAMILY_HARDCOPYIII $end
$var reg 160 $' device [160:1] $end
$var reg 1 %' is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 &' IS_FAMILY_HARDCOPYIV $end
$var reg 160 '' device [160:1] $end
$var reg 1 (' is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 )' IS_FAMILY_MAX10 $end
$var reg 160 *' device [160:1] $end
$var reg 1 +' is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 ,' IS_FAMILY_MAXII $end
$var reg 160 -' device [160:1] $end
$var reg 1 .' is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 /' IS_FAMILY_MAXV $end
$var reg 160 0' device [160:1] $end
$var reg 1 1' is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 2' IS_FAMILY_STRATIX10 $end
$var reg 160 3' device [160:1] $end
$var reg 1 4' is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 5' IS_FAMILY_STRATIXGX $end
$var reg 160 6' device [160:1] $end
$var reg 1 7' is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 8' IS_FAMILY_STRATIXIIGX $end
$var reg 160 9' device [160:1] $end
$var reg 1 :' is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 ;' IS_FAMILY_STRATIXII $end
$var reg 160 <' device [160:1] $end
$var reg 1 =' is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 >' IS_FAMILY_STRATIXIII $end
$var reg 160 ?' device [160:1] $end
$var reg 1 @' is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 A' IS_FAMILY_STRATIXIV $end
$var reg 160 B' device [160:1] $end
$var reg 1 C' is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 D' IS_FAMILY_STRATIXV $end
$var reg 160 E' device [160:1] $end
$var reg 1 F' is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 G' IS_FAMILY_STRATIX $end
$var reg 160 H' device [160:1] $end
$var reg 1 I' is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 J' FEATURE_FAMILY_STRATIXGX $end
$var reg 160 K' device [160:1] $end
$var reg 1 L' var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 M' FEATURE_FAMILY_CYCLONE $end
$var reg 160 N' device [160:1] $end
$var reg 1 O' var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 P' FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 Q' device [160:1] $end
$var reg 1 R' var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 S' FEATURE_FAMILY_STRATIXIII $end
$var reg 160 T' device [160:1] $end
$var reg 1 U' var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 V' FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 W' device [160:1] $end
$var reg 1 X' var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 Y' FEATURE_FAMILY_STRATIXV $end
$var reg 160 Z' device [160:1] $end
$var reg 1 [' var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 \' FEATURE_FAMILY_ARRIA10 $end
$var reg 160 ]' device [160:1] $end
$var reg 1 ^' var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 _' FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 `' device [160:1] $end
$var reg 1 a' var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 b' FEATURE_FAMILY_STRATIXII $end
$var reg 160 c' device [160:1] $end
$var reg 1 d' var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 e' FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 f' device [160:1] $end
$var reg 1 g' var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 h' FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 i' device [160:1] $end
$var reg 1 j' var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 k' FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 l' device [160:1] $end
$var reg 1 m' var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 n' FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 o' device [160:1] $end
$var reg 1 p' var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 q' FEATURE_FAMILY_STRATIX $end
$var reg 160 r' device [160:1] $end
$var reg 1 s' var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 t' FEATURE_FAMILY_MAXII $end
$var reg 160 u' device [160:1] $end
$var reg 1 v' var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 w' FEATURE_FAMILY_MAXV $end
$var reg 160 x' device [160:1] $end
$var reg 1 y' var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 z' FEATURE_FAMILY_CYCLONEII $end
$var reg 160 {' device [160:1] $end
$var reg 1 |' var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 }' FEATURE_FAMILY_STRATIXIV $end
$var reg 160 ~' device [160:1] $end
$var reg 1 !( var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 "( FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 #( device [160:1] $end
$var reg 1 $( var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 %( FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 &( device [160:1] $end
$var reg 1 '( var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 (( FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 )( device [160:1] $end
$var reg 1 *( var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 +( FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 ,( device [160:1] $end
$var reg 1 -( var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 .( FEATURE_FAMILY_CYCLONEV $end
$var reg 160 /( device [160:1] $end
$var reg 1 0( var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 1( FEATURE_FAMILY_ARRIAV $end
$var reg 160 2( device [160:1] $end
$var reg 1 3( var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 4( FEATURE_FAMILY_MAX10 $end
$var reg 160 5( device [160:1] $end
$var reg 1 6( var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 7( FEATURE_FAMILY_STRATIX10 $end
$var reg 160 8( device [160:1] $end
$var reg 1 9( var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 :( FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 ;( device [160:1] $end
$var reg 1 <( var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 =( FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 >( device [160:1] $end
$var reg 1 ?( var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 @( FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 A( device [160:1] $end
$var reg 1 B( var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 C( FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 D( device [160:1] $end
$var reg 1 E( var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 F( FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 G( device [160:1] $end
$var reg 1 H( var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 I( FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 J( device [160:1] $end
$var reg 1 K( var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 L( FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 M( device [160:1] $end
$var reg 1 N( var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 O( FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 P( device [160:1] $end
$var reg 1 Q( var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 R( FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 S( device [160:1] $end
$var reg 1 T( var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 U( FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 V( device [160:1] $end
$var reg 1 W( var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 X( FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 Y( device [160:1] $end
$var reg 1 Z( var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 [( IS_VALID_FAMILY $end
$var reg 160 \( device [160:1] $end
$var reg 1 ]( is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 ^( tolower [8:1] $end
$var reg 8 _( given_character [8:1] $end
$var reg 8 `( conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 a( ecc_parity [7:0] $end
$var reg 8 b( i_eccencparity [7:0] $end
$var integer 32 c( pointer $end
$var integer 32 d( pointer_max $end
$var integer 32 e( pointer_min $end
$var integer 32 f( flag_err $end
$var integer 32 g( flag $end
$var integer 32 h( flag_double $end
$var integer 32 i( flag_triple $end
$var integer 32 j( flag_single $end
$var integer 32 k( flag_no_err $end
$var integer 32 l( flag_uncorr $end
$var integer 32 m( n $end
$var integer 32 n( err $end
$var integer 32 o( found $end
$var integer 32 p( found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 q( in_file [2048:1] $end
$var integer 32 r( width $end
$var reg 2048 s( out_file [2048:1] $end
$var reg 2048 t( buffer [2048:1] $end
$var reg 1025 u( memory_data1 [1024:0] $end
$var reg 1025 v( memory_data2 [1024:0] $end
$var reg 8 w( c [8:1] $end
$var reg 4 x( hex [3:0] $end
$var reg 4 y( tmp_char [3:0] $end
$var reg 24 z( address_radix [24:1] $end
$var reg 24 {( data_radix [24:1] $end
$var reg 1 |( get_width $end
$var reg 1 }( get_depth $end
$var reg 1 ~( get_data_radix $end
$var reg 1 !) get_address_radix $end
$var reg 1 ") width_found $end
$var reg 1 #) depth_found $end
$var reg 1 $) data_radix_found $end
$var reg 1 %) address_radix_found $end
$var reg 1 &) get_address_data_pairs $end
$var reg 1 ') get_address $end
$var reg 1 () get_data $end
$var reg 1 )) display_address $end
$var reg 1 *) invalid_address $end
$var reg 1 +) get_start_address $end
$var reg 1 ,) get_end_address $end
$var reg 1 -) done $end
$var reg 1 .) error_status $end
$var reg 1 /) first_rec $end
$var reg 1 0) last_rec $end
$var integer 32 1) memory_width $end
$var integer 32 2) memory_depth $end
$var integer 32 3) value $end
$var integer 32 4) ifp $end
$var integer 32 5) ofp $end
$var integer 32 6) r $end
$var integer 32 7) r2 $end
$var integer 32 8) i $end
$var integer 32 9) j $end
$var integer 32 :) k $end
$var integer 32 ;) m $end
$var integer 32 <) n $end
$var integer 32 =) negative $end
$var integer 32 >) off_addr $end
$var integer 32 ?) nn $end
$var integer 32 @) address $end
$var integer 32 A) tt $end
$var integer 32 B) cc $end
$var integer 32 C) aah $end
$var integer 32 D) aal $end
$var integer 32 E) dd $end
$var integer 32 F) sum $end
$var integer 32 G) start_address $end
$var integer 32 H) end_address $end
$var integer 32 I) line_no $end
$var integer 32 J) character_count $end
$var integer 32 K) comment_with_percent_found $end
$var integer 32 L) comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 M) in_file [2048:1] $end
$var integer 32 N) width $end
$var reg 2048 O) out_file [2048:1] $end
$var reg 8 P) c [8:1] $end
$var reg 4 Q) hex [3:0] $end
$var reg 4 R) tmp_char [3:0] $end
$var reg 1 S) done $end
$var reg 1 T) error_status $end
$var reg 1 U) first_rec $end
$var reg 1 V) last_rec $end
$var reg 1 W) first_normal_record $end
$var reg 1 X) is_word_address_format $end
$var integer 32 Y) ifp $end
$var integer 32 Z) ofp $end
$var integer 32 [) r $end
$var integer 32 \) r2 $end
$var integer 32 ]) i $end
$var integer 32 ^) j $end
$var integer 32 _) k $end
$var integer 32 `) m $end
$var integer 32 a) n $end
$var integer 32 b) off_addr $end
$var integer 32 c) nn $end
$var integer 32 d) aaaa $end
$var integer 32 e) aaaa_pre $end
$var integer 32 f) tt $end
$var integer 32 g) cc $end
$var integer 32 h) aah $end
$var integer 32 i) aal $end
$var integer 32 j) dd $end
$var integer 32 k) sum $end
$var integer 32 l) line_no $end
$var integer 32 m) divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 n) in_file [2048:1] $end
$var integer 32 o) width $end
$var reg 2048 p) out_file [2048:1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module m2_ram $end
$var wire 1 E address [4] $end
$var wire 1 F address [3] $end
$var wire 1 G address [2] $end
$var wire 1 H address [1] $end
$var wire 1 I address [0] $end
$var tri1 1 4 clock $end
$var wire 1 q) data [7] $end
$var wire 1 r) data [6] $end
$var wire 1 s) data [5] $end
$var wire 1 t) data [4] $end
$var wire 1 u) data [3] $end
$var wire 1 v) data [2] $end
$var wire 1 w) data [1] $end
$var wire 1 x) data [0] $end
$var wire 1 y) wren $end
$var wire 1 z) q [7] $end
$var wire 1 {) q [6] $end
$var wire 1 |) q [5] $end
$var wire 1 }) q [4] $end
$var wire 1 ~) q [3] $end
$var wire 1 !* q [2] $end
$var wire 1 "* q [1] $end
$var wire 1 #* q [0] $end
$var wire 1 $* sub_wire0 [7] $end
$var wire 1 %* sub_wire0 [6] $end
$var wire 1 &* sub_wire0 [5] $end
$var wire 1 '* sub_wire0 [4] $end
$var wire 1 (* sub_wire0 [3] $end
$var wire 1 )* sub_wire0 [2] $end
$var wire 1 ** sub_wire0 [1] $end
$var wire 1 +* sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 ,* width_a $end
$var parameter 32 -* widthad_a $end
$var parameter 32 .* numwords_a $end
$var parameter 96 /* outdata_reg_a $end
$var parameter 32 0* address_aclr_a $end
$var parameter 32 1* outdata_aclr_a $end
$var parameter 32 2* indata_aclr_a $end
$var parameter 32 3* wrcontrol_aclr_a $end
$var parameter 32 4* byteena_aclr_a $end
$var parameter 32 5* width_byteena_a $end
$var parameter 32 6* width_b $end
$var parameter 32 7* widthad_b $end
$var parameter 32 8* numwords_b $end
$var parameter 48 9* rdcontrol_reg_b $end
$var parameter 48 :* address_reg_b $end
$var parameter 96 ;* outdata_reg_b $end
$var parameter 32 <* outdata_aclr_b $end
$var parameter 32 =* rdcontrol_aclr_b $end
$var parameter 48 >* indata_reg_b $end
$var parameter 48 ?* wrcontrol_wraddress_reg_b $end
$var parameter 48 @* byteena_reg_b $end
$var parameter 32 A* indata_aclr_b $end
$var parameter 32 B* wrcontrol_aclr_b $end
$var parameter 32 C* address_aclr_b $end
$var parameter 32 D* byteena_aclr_b $end
$var parameter 32 E* width_byteena_b $end
$var parameter 48 F* clock_enable_input_a $end
$var parameter 48 G* clock_enable_output_a $end
$var parameter 48 H* clock_enable_input_b $end
$var parameter 48 I* clock_enable_output_b $end
$var parameter 120 J* clock_enable_core_a $end
$var parameter 120 K* clock_enable_core_b $end
$var parameter 160 L* read_during_write_mode_port_a $end
$var parameter 160 M* read_during_write_mode_port_b $end
$var parameter 40 N* enable_ecc $end
$var parameter 32 O* width_eccstatus $end
$var parameter 40 P* ecc_pipeline_stage_enabled $end
$var parameter 88 Q* operation_mode $end
$var parameter 32 R* byte_size $end
$var parameter 72 S* read_during_write_mode_mixed_ports $end
$var parameter 32 T* ram_block_type $end
$var parameter 368 U* init_file $end
$var parameter 48 V* init_file_layout $end
$var parameter 32 W* maximum_depth $end
$var parameter 96 X* intended_device_family $end
$var parameter 312 Y* lpm_hint $end
$var parameter 80 Z* lpm_type $end
$var parameter 24 [* implement_in_les $end
$var parameter 40 \* power_up_uninitialized $end
$var parameter 32 ]* family_arria10 $end
$var tri0 1 y) wren_a $end
$var tri0 1 ^* wren_b $end
$var tri1 1 _* rden_a $end
$var tri1 1 `* rden_b $end
$var wire 1 q) data_a [7] $end
$var wire 1 r) data_a [6] $end
$var wire 1 s) data_a [5] $end
$var wire 1 t) data_a [4] $end
$var wire 1 u) data_a [3] $end
$var wire 1 v) data_a [2] $end
$var wire 1 w) data_a [1] $end
$var wire 1 x) data_a [0] $end
$var wire 1 a* data_b [0] $end
$var wire 1 E address_a [4] $end
$var wire 1 F address_a [3] $end
$var wire 1 G address_a [2] $end
$var wire 1 H address_a [1] $end
$var wire 1 I address_a [0] $end
$var wire 1 b* address_b [0] $end
$var tri1 1 4 clock0 $end
$var wire 1 c* clock1 $end
$var tri1 1 d* clocken0 $end
$var tri1 1 e* clocken1 $end
$var tri1 1 f* clocken2 $end
$var tri1 1 g* clocken3 $end
$var tri0 1 h* aclr0 $end
$var tri0 1 i* aclr1 $end
$var tri1 1 j* byteena_a [0] $end
$var tri1 1 k* byteena_b [0] $end
$var tri0 1 l* addressstall_a $end
$var tri0 1 m* addressstall_b $end
$var wire 1 $* q_a [7] $end
$var wire 1 %* q_a [6] $end
$var wire 1 &* q_a [5] $end
$var wire 1 '* q_a [4] $end
$var wire 1 (* q_a [3] $end
$var wire 1 )* q_a [2] $end
$var wire 1 ** q_a [1] $end
$var wire 1 +* q_a [0] $end
$var wire 1 n* q_b [0] $end
$var wire 1 o* eccstatus [2] $end
$var wire 1 p* eccstatus [1] $end
$var wire 1 q* eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 r* width_a $end
$var parameter 32 s* widthad_a $end
$var parameter 32 t* numwords_a $end
$var parameter 96 u* outdata_reg_a $end
$var parameter 32 v* address_aclr_a $end
$var parameter 32 w* outdata_aclr_a $end
$var parameter 32 x* indata_aclr_a $end
$var parameter 32 y* wrcontrol_aclr_a $end
$var parameter 32 z* byteena_aclr_a $end
$var parameter 32 {* width_byteena_a $end
$var parameter 32 |* width_b $end
$var parameter 32 }* widthad_b $end
$var parameter 32 ~* numwords_b $end
$var parameter 48 !+ rdcontrol_reg_b $end
$var parameter 48 "+ address_reg_b $end
$var parameter 96 #+ outdata_reg_b $end
$var parameter 32 $+ outdata_aclr_b $end
$var parameter 32 %+ rdcontrol_aclr_b $end
$var parameter 48 &+ indata_reg_b $end
$var parameter 48 '+ wrcontrol_wraddress_reg_b $end
$var parameter 48 (+ byteena_reg_b $end
$var parameter 32 )+ indata_aclr_b $end
$var parameter 32 *+ wrcontrol_aclr_b $end
$var parameter 32 ++ address_aclr_b $end
$var parameter 32 ,+ byteena_aclr_b $end
$var parameter 32 -+ width_byteena_b $end
$var parameter 48 .+ clock_enable_input_a $end
$var parameter 48 /+ clock_enable_output_a $end
$var parameter 48 0+ clock_enable_input_b $end
$var parameter 48 1+ clock_enable_output_b $end
$var parameter 120 2+ clock_enable_core_a $end
$var parameter 120 3+ clock_enable_core_b $end
$var parameter 160 4+ read_during_write_mode_port_a $end
$var parameter 160 5+ read_during_write_mode_port_b $end
$var parameter 40 6+ enable_ecc $end
$var parameter 32 7+ width_eccstatus $end
$var parameter 40 8+ ecc_pipeline_stage_enabled $end
$var parameter 88 9+ operation_mode $end
$var parameter 32 :+ byte_size $end
$var parameter 72 ;+ read_during_write_mode_mixed_ports $end
$var parameter 32 <+ ram_block_type $end
$var parameter 368 =+ init_file $end
$var parameter 48 >+ init_file_layout $end
$var parameter 32 ?+ maximum_depth $end
$var parameter 96 @+ intended_device_family $end
$var parameter 312 A+ lpm_hint $end
$var parameter 80 B+ lpm_type $end
$var parameter 24 C+ implement_in_les $end
$var parameter 40 D+ power_up_uninitialized $end
$var parameter 24 E+ sim_show_memory_data_in_port_b_layout $end
$var parameter 32 F+ is_lutram $end
$var parameter 32 G+ is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 H+ is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 I+ check_simultaneous_read_write $end
$var parameter 32 J+ dual_port_addreg_b_clk0 $end
$var parameter 32 K+ dual_port_addreg_b_clk1 $end
$var parameter 32 L+ i_byte_size_tmp $end
$var parameter 32 M+ i_lutram_read $end
$var parameter 32 N+ enable_mem_data_b_reading $end
$var parameter 32 O+ family_arriav $end
$var parameter 32 P+ family_cyclonev $end
$var parameter 32 Q+ family_base_arriav $end
$var parameter 32 R+ family_arria10 $end
$var parameter 32 S+ family_stratix10 $end
$var parameter 32 T+ family_arriavi $end
$var parameter 32 U+ family_nightfury $end
$var parameter 32 V+ family_arriavgz $end
$var parameter 32 W+ family_stratixv $end
$var parameter 32 X+ family_hardcopyiv $end
$var parameter 32 Y+ family_hardcopyiii $end
$var parameter 32 Z+ family_hardcopyii $end
$var parameter 32 [+ family_arriaiigz $end
$var parameter 32 \+ family_arriaiigx $end
$var parameter 32 ]+ family_stratixiii $end
$var parameter 32 ^+ family_zippleback $end
$var parameter 32 _+ family_cycloneiii $end
$var parameter 32 `+ family_cyclone $end
$var parameter 32 a+ family_base_cycloneii $end
$var parameter 32 b+ family_cycloneii $end
$var parameter 32 c+ family_base_stratix $end
$var parameter 32 d+ family_base_stratixii $end
$var parameter 32 e+ family_has_lutram $end
$var parameter 32 f+ family_has_stratixv_style_ram $end
$var parameter 32 g+ family_has_stratixiii_style_ram $end
$var parameter 32 h+ family_has_m512 $end
$var parameter 32 i+ family_has_megaram $end
$var parameter 32 j+ family_has_stratixi_style_ram $end
$var parameter 32 k+ is_write_on_positive_edge $end
$var parameter 32 l+ lutram_single_port_fast_read $end
$var parameter 32 m+ lutram_dual_port_fast_read $end
$var parameter 32 n+ s3_address_aclr_a $end
$var parameter 32 o+ s3_address_aclr_b $end
$var parameter 32 p+ i_address_aclr_family_a $end
$var parameter 32 q+ i_address_aclr_family_b $end
$var tri0 1 y) wren_a $end
$var tri0 1 ^* wren_b $end
$var tri1 1 _* rden_a $end
$var tri1 1 `* rden_b $end
$var wire 1 q) data_a [7] $end
$var wire 1 r) data_a [6] $end
$var wire 1 s) data_a [5] $end
$var wire 1 t) data_a [4] $end
$var wire 1 u) data_a [3] $end
$var wire 1 v) data_a [2] $end
$var wire 1 w) data_a [1] $end
$var wire 1 x) data_a [0] $end
$var wire 1 a* data_b [0] $end
$var wire 1 E address_a [4] $end
$var wire 1 F address_a [3] $end
$var wire 1 G address_a [2] $end
$var wire 1 H address_a [1] $end
$var wire 1 I address_a [0] $end
$var wire 1 b* address_b [0] $end
$var tri1 1 4 clock0 $end
$var wire 1 c* clock1 $end
$var tri1 1 d* clocken0 $end
$var tri1 1 e* clocken1 $end
$var tri1 1 f* clocken2 $end
$var tri1 1 g* clocken3 $end
$var tri0 1 h* aclr0 $end
$var tri0 1 i* aclr1 $end
$var wire 1 j* byteena_a [0] $end
$var wire 1 k* byteena_b [0] $end
$var tri0 1 l* addressstall_a $end
$var tri0 1 m* addressstall_b $end
$var wire 1 $* q_a [7] $end
$var wire 1 %* q_a [6] $end
$var wire 1 &* q_a [5] $end
$var wire 1 '* q_a [4] $end
$var wire 1 (* q_a [3] $end
$var wire 1 )* q_a [2] $end
$var wire 1 ** q_a [1] $end
$var wire 1 +* q_a [0] $end
$var wire 1 n* q_b [0] $end
$var wire 1 o* eccstatus [2] $end
$var wire 1 p* eccstatus [1] $end
$var wire 1 q* eccstatus [0] $end
$var reg 8 r+ i_data_reg_a [7:0] $end
$var reg 8 s+ temp_wa [7:0] $end
$var reg 8 t+ temp_wa2 [7:0] $end
$var reg 8 u+ temp_wa2b [7:0] $end
$var reg 8 v+ init_temp [7:0] $end
$var reg 1 w+ i_data_reg_b [0:0] $end
$var reg 1 x+ temp_wb [0:0] $end
$var reg 1 y+ temp_wb2 [0:0] $end
$var reg 1 z+ temp $end
$var reg 8 {+ i_q_reg_a [7:0] $end
$var reg 8 |+ i_q_tmp_a [7:0] $end
$var reg 8 }+ i_q_tmp2_a [7:0] $end
$var reg 1 ~+ i_q_reg_b [0:0] $end
$var reg 1 !, i_q_tmp_b [0:0] $end
$var reg 1 ", i_q_tmp2_b [0:0] $end
$var reg 1 #, i_q_output_latch [0:0] $end
$var reg 8 $, i_byteena_mask_reg_a [7:0] $end
$var reg 1 %, i_byteena_mask_reg_b [0:0] $end
$var reg 5 &, i_address_reg_a [4:0] $end
$var reg 1 ', i_address_reg_b [0:0] $end
$var reg 1 (, i_q_ecc_reg_b [0:0] $end
$var reg 1 ), i_q_ecc_tmp_b [0:0] $end
$var reg 5 *, i_original_address_a [4:0] $end
$var reg 8 +, i_byteena_mask_reg_a_tmp [7:0] $end
$var reg 1 ,, i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 8 -, i_byteena_mask_reg_a_out [7:0] $end
$var reg 1 ., i_byteena_mask_reg_b_out [0:0] $end
$var reg 8 /, i_byteena_mask_reg_a_x [7:0] $end
$var reg 1 0, i_byteena_mask_reg_b_x [0:0] $end
$var reg 8 1, i_byteena_mask_reg_a_out_b [7:0] $end
$var reg 1 2, i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 3, ram_initf [2048:1] $end
$var reg 1 4, i_wren_reg_a $end
$var reg 1 5, i_wren_reg_b $end
$var reg 1 6, i_rden_reg_a $end
$var reg 1 7, i_rden_reg_b $end
$var reg 1 8, i_read_flag_a $end
$var reg 1 9, i_read_flag_b $end
$var reg 1 :, i_write_flag_a $end
$var reg 1 ;, i_write_flag_b $end
$var reg 1 <, good_to_go_a $end
$var reg 1 =, good_to_go_b $end
$var reg 32 >, file_desc [31:0] $end
$var reg 1 ?, init_file_b_port $end
$var reg 1 @, i_nmram_write_a $end
$var reg 1 A, i_nmram_write_b $end
$var reg 8 B, wa_mult_x [7:0] $end
$var reg 8 C, wa_mult_x_ii [7:0] $end
$var reg 8 D, wa_mult_x_iii [7:0] $end
$var reg 13 E, add_reg_a_mult_wa [12:0] $end
$var reg 2 F, add_reg_b_mult_wb [1:0] $end
$var reg 13 G, add_reg_a_mult_wa_pl_wa [12:0] $end
$var reg 2 H, add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 I, same_clock_pulse0 $end
$var reg 1 J, same_clock_pulse1 $end
$var reg 1 K, i_original_data_b [0:0] $end
$var reg 8 L, i_original_data_a [7:0] $end
$var reg 1 M, i_address_aclr_a_flag $end
$var reg 1 N, i_address_aclr_a_prev $end
$var reg 1 O, i_address_aclr_b_flag $end
$var reg 1 P, i_address_aclr_b_prev $end
$var reg 1 Q, i_outdata_aclr_a_prev $end
$var reg 1 R, i_outdata_aclr_b_prev $end
$var reg 1 S, i_force_reread_a $end
$var reg 1 T, i_force_reread_a1 $end
$var reg 1 U, i_force_reread_b $end
$var reg 1 V, i_force_reread_b1 $end
$var reg 1 W, i_force_reread_a_signal $end
$var reg 1 X, i_force_reread_b_signal $end
$var reg 169 Y, cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 Z, i_ram_block_type [56:0] $end
$var integer 32 [, i_byte_size $end
$var wire 1 \, i_good_to_write_a $end
$var wire 1 ], i_good_to_write_b $end
$var reg 1 ^, i_good_to_write_a2 $end
$var reg 1 _, i_good_to_write_b2 $end
$var reg 1 `, i_core_clocken_a_reg $end
$var reg 1 a, i_core_clocken0_b_reg $end
$var reg 1 b, i_core_clocken1_b_reg $end
$var wire 1 c, i_indata_aclr_a $end
$var wire 1 d, i_address_aclr_a $end
$var wire 1 e, i_wrcontrol_aclr_a $end
$var wire 1 f, i_indata_aclr_b $end
$var wire 1 g, i_address_aclr_b $end
$var wire 1 h, i_wrcontrol_aclr_b $end
$var wire 1 i, i_outdata_aclr_a $end
$var wire 1 j, i_outdata_aclr_b $end
$var wire 1 k, i_rdcontrol_aclr_b $end
$var wire 1 l, i_byteena_aclr_a $end
$var wire 1 m, i_byteena_aclr_b $end
$var wire 1 n, i_outdata_clken_a $end
$var wire 1 o, i_outdata_clken_b $end
$var wire 1 p, i_outlatch_clken_a $end
$var wire 1 q, i_outlatch_clken_b $end
$var wire 1 r, i_clocken0 $end
$var wire 1 s, i_clocken1_b $end
$var wire 1 t, i_clocken0_b $end
$var wire 1 u, i_core_clocken_a $end
$var wire 1 v, i_core_clocken_b $end
$var wire 1 w, i_core_clocken0_b $end
$var wire 1 x, i_core_clocken1_b $end
$var tri1 1 y, i_byteena_a [0] $end
$var tri1 1 z, i_byteena_b [0] $end
$var integer 32 {, i_numwords_a $end
$var integer 32 |, i_numwords_b $end
$var integer 32 }, i_aclr_flag_a $end
$var integer 32 ~, i_aclr_flag_b $end
$var integer 32 !- i_q_tmp2_a_idx $end
$var integer 32 "- init_i $end
$var integer 32 #- i $end
$var integer 32 $- i2 $end
$var integer 32 %- i3 $end
$var integer 32 &- i4 $end
$var integer 32 '- i5 $end
$var integer 32 (- j $end
$var integer 32 )- j2 $end
$var integer 32 *- j3 $end
$var integer 32 +- k $end
$var integer 32 ,- k2 $end
$var integer 32 -- k3 $end
$var integer 32 .- k4 $end
$var integer 32 /- i_div_wa $end
$var integer 32 0- i_div_wb $end
$var integer 32 1- j_plus_i2 $end
$var integer 32 2- j2_plus_i5 $end
$var integer 32 3- j3_plus_i5 $end
$var integer 32 4- j_plus_i2_div_a $end
$var integer 32 5- j2_plus_i5_div_a $end
$var integer 32 6- j3_plus_i5_div_a $end
$var integer 32 7- j3_plus_i5_div_b $end
$var integer 32 8- i_byteena_count $end
$var integer 32 9- port_a_bit_count_low $end
$var integer 32 :- port_a_bit_count_high $end
$var integer 32 ;- port_b_bit_count_low $end
$var integer 32 <- port_b_bit_count_high $end
$var time 64 =- i_data_write_time_a $end
$var time 64 >- i_data_write_time_b $end

$scope begin genblk4 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk1 $end
$upscope $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 ?- IS_FAMILY_ARRIA10 $end
$var reg 160 @- device [160:1] $end
$var reg 1 A- is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 B- IS_FAMILY_ARRIAGX $end
$var reg 160 C- device [160:1] $end
$var reg 1 D- is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 E- IS_FAMILY_ARRIAIIGX $end
$var reg 160 F- device [160:1] $end
$var reg 1 G- is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 H- IS_FAMILY_ARRIAIIGZ $end
$var reg 160 I- device [160:1] $end
$var reg 1 J- is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 K- IS_FAMILY_ARRIAVGZ $end
$var reg 160 L- device [160:1] $end
$var reg 1 M- is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 N- IS_FAMILY_ARRIAV $end
$var reg 160 O- device [160:1] $end
$var reg 1 P- is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 Q- IS_FAMILY_CYCLONE10LP $end
$var reg 160 R- device [160:1] $end
$var reg 1 S- is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 T- IS_FAMILY_CYCLONEII $end
$var reg 160 U- device [160:1] $end
$var reg 1 V- is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 W- IS_FAMILY_CYCLONEIIILS $end
$var reg 160 X- device [160:1] $end
$var reg 1 Y- is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 Z- IS_FAMILY_CYCLONEIII $end
$var reg 160 [- device [160:1] $end
$var reg 1 \- is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 ]- IS_FAMILY_CYCLONEIVE $end
$var reg 160 ^- device [160:1] $end
$var reg 1 _- is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 `- IS_FAMILY_CYCLONEIVGX $end
$var reg 160 a- device [160:1] $end
$var reg 1 b- is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 c- IS_FAMILY_CYCLONEV $end
$var reg 160 d- device [160:1] $end
$var reg 1 e- is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 f- IS_FAMILY_CYCLONE $end
$var reg 160 g- device [160:1] $end
$var reg 1 h- is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 i- IS_FAMILY_HARDCOPYII $end
$var reg 160 j- device [160:1] $end
$var reg 1 k- is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 l- IS_FAMILY_HARDCOPYIII $end
$var reg 160 m- device [160:1] $end
$var reg 1 n- is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 o- IS_FAMILY_HARDCOPYIV $end
$var reg 160 p- device [160:1] $end
$var reg 1 q- is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 r- IS_FAMILY_MAX10 $end
$var reg 160 s- device [160:1] $end
$var reg 1 t- is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 u- IS_FAMILY_MAXII $end
$var reg 160 v- device [160:1] $end
$var reg 1 w- is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 x- IS_FAMILY_MAXV $end
$var reg 160 y- device [160:1] $end
$var reg 1 z- is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 {- IS_FAMILY_STRATIX10 $end
$var reg 160 |- device [160:1] $end
$var reg 1 }- is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 ~- IS_FAMILY_STRATIXGX $end
$var reg 160 !. device [160:1] $end
$var reg 1 ". is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 #. IS_FAMILY_STRATIXIIGX $end
$var reg 160 $. device [160:1] $end
$var reg 1 %. is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 &. IS_FAMILY_STRATIXII $end
$var reg 160 '. device [160:1] $end
$var reg 1 (. is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 ). IS_FAMILY_STRATIXIII $end
$var reg 160 *. device [160:1] $end
$var reg 1 +. is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 ,. IS_FAMILY_STRATIXIV $end
$var reg 160 -. device [160:1] $end
$var reg 1 .. is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 /. IS_FAMILY_STRATIXV $end
$var reg 160 0. device [160:1] $end
$var reg 1 1. is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 2. IS_FAMILY_STRATIX $end
$var reg 160 3. device [160:1] $end
$var reg 1 4. is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 5. FEATURE_FAMILY_STRATIXGX $end
$var reg 160 6. device [160:1] $end
$var reg 1 7. var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 8. FEATURE_FAMILY_CYCLONE $end
$var reg 160 9. device [160:1] $end
$var reg 1 :. var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 ;. FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 <. device [160:1] $end
$var reg 1 =. var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 >. FEATURE_FAMILY_STRATIXIII $end
$var reg 160 ?. device [160:1] $end
$var reg 1 @. var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 A. FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 B. device [160:1] $end
$var reg 1 C. var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 D. FEATURE_FAMILY_STRATIXV $end
$var reg 160 E. device [160:1] $end
$var reg 1 F. var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 G. FEATURE_FAMILY_ARRIA10 $end
$var reg 160 H. device [160:1] $end
$var reg 1 I. var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 J. FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 K. device [160:1] $end
$var reg 1 L. var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 M. FEATURE_FAMILY_STRATIXII $end
$var reg 160 N. device [160:1] $end
$var reg 1 O. var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 P. FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 Q. device [160:1] $end
$var reg 1 R. var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 S. FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 T. device [160:1] $end
$var reg 1 U. var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 V. FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 W. device [160:1] $end
$var reg 1 X. var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 Y. FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 Z. device [160:1] $end
$var reg 1 [. var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 \. FEATURE_FAMILY_STRATIX $end
$var reg 160 ]. device [160:1] $end
$var reg 1 ^. var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 _. FEATURE_FAMILY_MAXII $end
$var reg 160 `. device [160:1] $end
$var reg 1 a. var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 b. FEATURE_FAMILY_MAXV $end
$var reg 160 c. device [160:1] $end
$var reg 1 d. var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 e. FEATURE_FAMILY_CYCLONEII $end
$var reg 160 f. device [160:1] $end
$var reg 1 g. var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 h. FEATURE_FAMILY_STRATIXIV $end
$var reg 160 i. device [160:1] $end
$var reg 1 j. var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 k. FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 l. device [160:1] $end
$var reg 1 m. var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 n. FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 o. device [160:1] $end
$var reg 1 p. var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 q. FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 r. device [160:1] $end
$var reg 1 s. var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 t. FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 u. device [160:1] $end
$var reg 1 v. var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 w. FEATURE_FAMILY_CYCLONEV $end
$var reg 160 x. device [160:1] $end
$var reg 1 y. var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 z. FEATURE_FAMILY_ARRIAV $end
$var reg 160 {. device [160:1] $end
$var reg 1 |. var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 }. FEATURE_FAMILY_MAX10 $end
$var reg 160 ~. device [160:1] $end
$var reg 1 !/ var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 "/ FEATURE_FAMILY_STRATIX10 $end
$var reg 160 #/ device [160:1] $end
$var reg 1 $/ var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 %/ FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 &/ device [160:1] $end
$var reg 1 '/ var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 (/ FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 )/ device [160:1] $end
$var reg 1 */ var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 +/ FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 ,/ device [160:1] $end
$var reg 1 -/ var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 ./ FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 // device [160:1] $end
$var reg 1 0/ var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 1/ FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 2/ device [160:1] $end
$var reg 1 3/ var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 4/ FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 5/ device [160:1] $end
$var reg 1 6/ var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 7/ FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 8/ device [160:1] $end
$var reg 1 9/ var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 :/ FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 ;/ device [160:1] $end
$var reg 1 </ var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 =/ FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 >/ device [160:1] $end
$var reg 1 ?/ var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 @/ FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 A/ device [160:1] $end
$var reg 1 B/ var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 C/ FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 D/ device [160:1] $end
$var reg 1 E/ var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 F/ IS_VALID_FAMILY $end
$var reg 160 G/ device [160:1] $end
$var reg 1 H/ is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 I/ tolower [8:1] $end
$var reg 8 J/ given_character [8:1] $end
$var reg 8 K/ conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 L/ ecc_parity [7:0] $end
$var reg 8 M/ i_eccencparity [7:0] $end
$var integer 32 N/ pointer $end
$var integer 32 O/ pointer_max $end
$var integer 32 P/ pointer_min $end
$var integer 32 Q/ flag_err $end
$var integer 32 R/ flag $end
$var integer 32 S/ flag_double $end
$var integer 32 T/ flag_triple $end
$var integer 32 U/ flag_single $end
$var integer 32 V/ flag_no_err $end
$var integer 32 W/ flag_uncorr $end
$var integer 32 X/ n $end
$var integer 32 Y/ err $end
$var integer 32 Z/ found $end
$var integer 32 [/ found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 \/ in_file [2048:1] $end
$var integer 32 ]/ width $end
$var reg 2048 ^/ out_file [2048:1] $end
$var reg 2048 _/ buffer [2048:1] $end
$var reg 1025 `/ memory_data1 [1024:0] $end
$var reg 1025 a/ memory_data2 [1024:0] $end
$var reg 8 b/ c [8:1] $end
$var reg 4 c/ hex [3:0] $end
$var reg 4 d/ tmp_char [3:0] $end
$var reg 24 e/ address_radix [24:1] $end
$var reg 24 f/ data_radix [24:1] $end
$var reg 1 g/ get_width $end
$var reg 1 h/ get_depth $end
$var reg 1 i/ get_data_radix $end
$var reg 1 j/ get_address_radix $end
$var reg 1 k/ width_found $end
$var reg 1 l/ depth_found $end
$var reg 1 m/ data_radix_found $end
$var reg 1 n/ address_radix_found $end
$var reg 1 o/ get_address_data_pairs $end
$var reg 1 p/ get_address $end
$var reg 1 q/ get_data $end
$var reg 1 r/ display_address $end
$var reg 1 s/ invalid_address $end
$var reg 1 t/ get_start_address $end
$var reg 1 u/ get_end_address $end
$var reg 1 v/ done $end
$var reg 1 w/ error_status $end
$var reg 1 x/ first_rec $end
$var reg 1 y/ last_rec $end
$var integer 32 z/ memory_width $end
$var integer 32 {/ memory_depth $end
$var integer 32 |/ value $end
$var integer 32 }/ ifp $end
$var integer 32 ~/ ofp $end
$var integer 32 !0 r $end
$var integer 32 "0 r2 $end
$var integer 32 #0 i $end
$var integer 32 $0 j $end
$var integer 32 %0 k $end
$var integer 32 &0 m $end
$var integer 32 '0 n $end
$var integer 32 (0 negative $end
$var integer 32 )0 off_addr $end
$var integer 32 *0 nn $end
$var integer 32 +0 address $end
$var integer 32 ,0 tt $end
$var integer 32 -0 cc $end
$var integer 32 .0 aah $end
$var integer 32 /0 aal $end
$var integer 32 00 dd $end
$var integer 32 10 sum $end
$var integer 32 20 start_address $end
$var integer 32 30 end_address $end
$var integer 32 40 line_no $end
$var integer 32 50 character_count $end
$var integer 32 60 comment_with_percent_found $end
$var integer 32 70 comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 80 in_file [2048:1] $end
$var integer 32 90 width $end
$var reg 2048 :0 out_file [2048:1] $end
$var reg 8 ;0 c [8:1] $end
$var reg 4 <0 hex [3:0] $end
$var reg 4 =0 tmp_char [3:0] $end
$var reg 1 >0 done $end
$var reg 1 ?0 error_status $end
$var reg 1 @0 first_rec $end
$var reg 1 A0 last_rec $end
$var reg 1 B0 first_normal_record $end
$var reg 1 C0 is_word_address_format $end
$var integer 32 D0 ifp $end
$var integer 32 E0 ofp $end
$var integer 32 F0 r $end
$var integer 32 G0 r2 $end
$var integer 32 H0 i $end
$var integer 32 I0 j $end
$var integer 32 J0 k $end
$var integer 32 K0 m $end
$var integer 32 L0 n $end
$var integer 32 M0 off_addr $end
$var integer 32 N0 nn $end
$var integer 32 O0 aaaa $end
$var integer 32 P0 aaaa_pre $end
$var integer 32 Q0 tt $end
$var integer 32 R0 cc $end
$var integer 32 S0 aah $end
$var integer 32 T0 aal $end
$var integer 32 U0 dd $end
$var integer 32 V0 sum $end
$var integer 32 W0 line_no $end
$var integer 32 X0 divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 Y0 in_file [2048:1] $end
$var integer 32 Z0 width $end
$var reg 2048 [0 out_file [2048:1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module s1_ram $end
$var wire 1 \0 address [10] $end
$var wire 1 ]0 address [9] $end
$var wire 1 ^0 address [8] $end
$var wire 1 _0 address [7] $end
$var wire 1 `0 address [6] $end
$var wire 1 a0 address [5] $end
$var wire 1 b0 address [4] $end
$var wire 1 c0 address [3] $end
$var wire 1 d0 address [2] $end
$var wire 1 e0 address [1] $end
$var wire 1 f0 address [0] $end
$var tri1 1 4 clock $end
$var wire 1 g0 data [7] $end
$var wire 1 h0 data [6] $end
$var wire 1 i0 data [5] $end
$var wire 1 j0 data [4] $end
$var wire 1 k0 data [3] $end
$var wire 1 l0 data [2] $end
$var wire 1 m0 data [1] $end
$var wire 1 n0 data [0] $end
$var wire 1 o0 wren $end
$var wire 1 p0 q [7] $end
$var wire 1 q0 q [6] $end
$var wire 1 r0 q [5] $end
$var wire 1 s0 q [4] $end
$var wire 1 t0 q [3] $end
$var wire 1 u0 q [2] $end
$var wire 1 v0 q [1] $end
$var wire 1 w0 q [0] $end
$var wire 1 x0 sub_wire0 [7] $end
$var wire 1 y0 sub_wire0 [6] $end
$var wire 1 z0 sub_wire0 [5] $end
$var wire 1 {0 sub_wire0 [4] $end
$var wire 1 |0 sub_wire0 [3] $end
$var wire 1 }0 sub_wire0 [2] $end
$var wire 1 ~0 sub_wire0 [1] $end
$var wire 1 !1 sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 "1 width_a $end
$var parameter 32 #1 widthad_a $end
$var parameter 32 $1 numwords_a $end
$var parameter 96 %1 outdata_reg_a $end
$var parameter 32 &1 address_aclr_a $end
$var parameter 32 '1 outdata_aclr_a $end
$var parameter 32 (1 indata_aclr_a $end
$var parameter 32 )1 wrcontrol_aclr_a $end
$var parameter 32 *1 byteena_aclr_a $end
$var parameter 32 +1 width_byteena_a $end
$var parameter 32 ,1 width_b $end
$var parameter 32 -1 widthad_b $end
$var parameter 32 .1 numwords_b $end
$var parameter 48 /1 rdcontrol_reg_b $end
$var parameter 48 01 address_reg_b $end
$var parameter 96 11 outdata_reg_b $end
$var parameter 32 21 outdata_aclr_b $end
$var parameter 32 31 rdcontrol_aclr_b $end
$var parameter 48 41 indata_reg_b $end
$var parameter 48 51 wrcontrol_wraddress_reg_b $end
$var parameter 48 61 byteena_reg_b $end
$var parameter 32 71 indata_aclr_b $end
$var parameter 32 81 wrcontrol_aclr_b $end
$var parameter 32 91 address_aclr_b $end
$var parameter 32 :1 byteena_aclr_b $end
$var parameter 32 ;1 width_byteena_b $end
$var parameter 48 <1 clock_enable_input_a $end
$var parameter 48 =1 clock_enable_output_a $end
$var parameter 48 >1 clock_enable_input_b $end
$var parameter 48 ?1 clock_enable_output_b $end
$var parameter 120 @1 clock_enable_core_a $end
$var parameter 120 A1 clock_enable_core_b $end
$var parameter 160 B1 read_during_write_mode_port_a $end
$var parameter 160 C1 read_during_write_mode_port_b $end
$var parameter 40 D1 enable_ecc $end
$var parameter 32 E1 width_eccstatus $end
$var parameter 40 F1 ecc_pipeline_stage_enabled $end
$var parameter 88 G1 operation_mode $end
$var parameter 32 H1 byte_size $end
$var parameter 72 I1 read_during_write_mode_mixed_ports $end
$var parameter 32 J1 ram_block_type $end
$var parameter 232 K1 init_file $end
$var parameter 48 L1 init_file_layout $end
$var parameter 32 M1 maximum_depth $end
$var parameter 96 N1 intended_device_family $end
$var parameter 312 O1 lpm_hint $end
$var parameter 80 P1 lpm_type $end
$var parameter 24 Q1 implement_in_les $end
$var parameter 40 R1 power_up_uninitialized $end
$var parameter 32 S1 family_arria10 $end
$var tri0 1 o0 wren_a $end
$var tri0 1 T1 wren_b $end
$var tri1 1 U1 rden_a $end
$var tri1 1 V1 rden_b $end
$var wire 1 g0 data_a [7] $end
$var wire 1 h0 data_a [6] $end
$var wire 1 i0 data_a [5] $end
$var wire 1 j0 data_a [4] $end
$var wire 1 k0 data_a [3] $end
$var wire 1 l0 data_a [2] $end
$var wire 1 m0 data_a [1] $end
$var wire 1 n0 data_a [0] $end
$var wire 1 W1 data_b [0] $end
$var wire 1 \0 address_a [10] $end
$var wire 1 ]0 address_a [9] $end
$var wire 1 ^0 address_a [8] $end
$var wire 1 _0 address_a [7] $end
$var wire 1 `0 address_a [6] $end
$var wire 1 a0 address_a [5] $end
$var wire 1 b0 address_a [4] $end
$var wire 1 c0 address_a [3] $end
$var wire 1 d0 address_a [2] $end
$var wire 1 e0 address_a [1] $end
$var wire 1 f0 address_a [0] $end
$var wire 1 X1 address_b [0] $end
$var tri1 1 4 clock0 $end
$var wire 1 Y1 clock1 $end
$var tri1 1 Z1 clocken0 $end
$var tri1 1 [1 clocken1 $end
$var tri1 1 \1 clocken2 $end
$var tri1 1 ]1 clocken3 $end
$var tri0 1 ^1 aclr0 $end
$var tri0 1 _1 aclr1 $end
$var tri1 1 `1 byteena_a [0] $end
$var tri1 1 a1 byteena_b [0] $end
$var tri0 1 b1 addressstall_a $end
$var tri0 1 c1 addressstall_b $end
$var wire 1 x0 q_a [7] $end
$var wire 1 y0 q_a [6] $end
$var wire 1 z0 q_a [5] $end
$var wire 1 {0 q_a [4] $end
$var wire 1 |0 q_a [3] $end
$var wire 1 }0 q_a [2] $end
$var wire 1 ~0 q_a [1] $end
$var wire 1 !1 q_a [0] $end
$var wire 1 d1 q_b [0] $end
$var wire 1 e1 eccstatus [2] $end
$var wire 1 f1 eccstatus [1] $end
$var wire 1 g1 eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 h1 width_a $end
$var parameter 32 i1 widthad_a $end
$var parameter 32 j1 numwords_a $end
$var parameter 96 k1 outdata_reg_a $end
$var parameter 32 l1 address_aclr_a $end
$var parameter 32 m1 outdata_aclr_a $end
$var parameter 32 n1 indata_aclr_a $end
$var parameter 32 o1 wrcontrol_aclr_a $end
$var parameter 32 p1 byteena_aclr_a $end
$var parameter 32 q1 width_byteena_a $end
$var parameter 32 r1 width_b $end
$var parameter 32 s1 widthad_b $end
$var parameter 32 t1 numwords_b $end
$var parameter 48 u1 rdcontrol_reg_b $end
$var parameter 48 v1 address_reg_b $end
$var parameter 96 w1 outdata_reg_b $end
$var parameter 32 x1 outdata_aclr_b $end
$var parameter 32 y1 rdcontrol_aclr_b $end
$var parameter 48 z1 indata_reg_b $end
$var parameter 48 {1 wrcontrol_wraddress_reg_b $end
$var parameter 48 |1 byteena_reg_b $end
$var parameter 32 }1 indata_aclr_b $end
$var parameter 32 ~1 wrcontrol_aclr_b $end
$var parameter 32 !2 address_aclr_b $end
$var parameter 32 "2 byteena_aclr_b $end
$var parameter 32 #2 width_byteena_b $end
$var parameter 48 $2 clock_enable_input_a $end
$var parameter 48 %2 clock_enable_output_a $end
$var parameter 48 &2 clock_enable_input_b $end
$var parameter 48 '2 clock_enable_output_b $end
$var parameter 120 (2 clock_enable_core_a $end
$var parameter 120 )2 clock_enable_core_b $end
$var parameter 160 *2 read_during_write_mode_port_a $end
$var parameter 160 +2 read_during_write_mode_port_b $end
$var parameter 40 ,2 enable_ecc $end
$var parameter 32 -2 width_eccstatus $end
$var parameter 40 .2 ecc_pipeline_stage_enabled $end
$var parameter 88 /2 operation_mode $end
$var parameter 32 02 byte_size $end
$var parameter 72 12 read_during_write_mode_mixed_ports $end
$var parameter 32 22 ram_block_type $end
$var parameter 232 32 init_file $end
$var parameter 48 42 init_file_layout $end
$var parameter 32 52 maximum_depth $end
$var parameter 96 62 intended_device_family $end
$var parameter 312 72 lpm_hint $end
$var parameter 80 82 lpm_type $end
$var parameter 24 92 implement_in_les $end
$var parameter 40 :2 power_up_uninitialized $end
$var parameter 24 ;2 sim_show_memory_data_in_port_b_layout $end
$var parameter 32 <2 is_lutram $end
$var parameter 32 =2 is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 >2 is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 ?2 check_simultaneous_read_write $end
$var parameter 32 @2 dual_port_addreg_b_clk0 $end
$var parameter 32 A2 dual_port_addreg_b_clk1 $end
$var parameter 32 B2 i_byte_size_tmp $end
$var parameter 32 C2 i_lutram_read $end
$var parameter 32 D2 enable_mem_data_b_reading $end
$var parameter 32 E2 family_arriav $end
$var parameter 32 F2 family_cyclonev $end
$var parameter 32 G2 family_base_arriav $end
$var parameter 32 H2 family_arria10 $end
$var parameter 32 I2 family_stratix10 $end
$var parameter 32 J2 family_arriavi $end
$var parameter 32 K2 family_nightfury $end
$var parameter 32 L2 family_arriavgz $end
$var parameter 32 M2 family_stratixv $end
$var parameter 32 N2 family_hardcopyiv $end
$var parameter 32 O2 family_hardcopyiii $end
$var parameter 32 P2 family_hardcopyii $end
$var parameter 32 Q2 family_arriaiigz $end
$var parameter 32 R2 family_arriaiigx $end
$var parameter 32 S2 family_stratixiii $end
$var parameter 32 T2 family_zippleback $end
$var parameter 32 U2 family_cycloneiii $end
$var parameter 32 V2 family_cyclone $end
$var parameter 32 W2 family_base_cycloneii $end
$var parameter 32 X2 family_cycloneii $end
$var parameter 32 Y2 family_base_stratix $end
$var parameter 32 Z2 family_base_stratixii $end
$var parameter 32 [2 family_has_lutram $end
$var parameter 32 \2 family_has_stratixv_style_ram $end
$var parameter 32 ]2 family_has_stratixiii_style_ram $end
$var parameter 32 ^2 family_has_m512 $end
$var parameter 32 _2 family_has_megaram $end
$var parameter 32 `2 family_has_stratixi_style_ram $end
$var parameter 32 a2 is_write_on_positive_edge $end
$var parameter 32 b2 lutram_single_port_fast_read $end
$var parameter 32 c2 lutram_dual_port_fast_read $end
$var parameter 32 d2 s3_address_aclr_a $end
$var parameter 32 e2 s3_address_aclr_b $end
$var parameter 32 f2 i_address_aclr_family_a $end
$var parameter 32 g2 i_address_aclr_family_b $end
$var tri0 1 o0 wren_a $end
$var tri0 1 T1 wren_b $end
$var tri1 1 U1 rden_a $end
$var tri1 1 V1 rden_b $end
$var wire 1 g0 data_a [7] $end
$var wire 1 h0 data_a [6] $end
$var wire 1 i0 data_a [5] $end
$var wire 1 j0 data_a [4] $end
$var wire 1 k0 data_a [3] $end
$var wire 1 l0 data_a [2] $end
$var wire 1 m0 data_a [1] $end
$var wire 1 n0 data_a [0] $end
$var wire 1 W1 data_b [0] $end
$var wire 1 \0 address_a [10] $end
$var wire 1 ]0 address_a [9] $end
$var wire 1 ^0 address_a [8] $end
$var wire 1 _0 address_a [7] $end
$var wire 1 `0 address_a [6] $end
$var wire 1 a0 address_a [5] $end
$var wire 1 b0 address_a [4] $end
$var wire 1 c0 address_a [3] $end
$var wire 1 d0 address_a [2] $end
$var wire 1 e0 address_a [1] $end
$var wire 1 f0 address_a [0] $end
$var wire 1 X1 address_b [0] $end
$var tri1 1 4 clock0 $end
$var wire 1 Y1 clock1 $end
$var tri1 1 Z1 clocken0 $end
$var tri1 1 [1 clocken1 $end
$var tri1 1 \1 clocken2 $end
$var tri1 1 ]1 clocken3 $end
$var tri0 1 ^1 aclr0 $end
$var tri0 1 _1 aclr1 $end
$var wire 1 `1 byteena_a [0] $end
$var wire 1 a1 byteena_b [0] $end
$var tri0 1 b1 addressstall_a $end
$var tri0 1 c1 addressstall_b $end
$var wire 1 x0 q_a [7] $end
$var wire 1 y0 q_a [6] $end
$var wire 1 z0 q_a [5] $end
$var wire 1 {0 q_a [4] $end
$var wire 1 |0 q_a [3] $end
$var wire 1 }0 q_a [2] $end
$var wire 1 ~0 q_a [1] $end
$var wire 1 !1 q_a [0] $end
$var wire 1 d1 q_b [0] $end
$var wire 1 e1 eccstatus [2] $end
$var wire 1 f1 eccstatus [1] $end
$var wire 1 g1 eccstatus [0] $end
$var reg 8 h2 i_data_reg_a [7:0] $end
$var reg 8 i2 temp_wa [7:0] $end
$var reg 8 j2 temp_wa2 [7:0] $end
$var reg 8 k2 temp_wa2b [7:0] $end
$var reg 8 l2 init_temp [7:0] $end
$var reg 1 m2 i_data_reg_b [0:0] $end
$var reg 1 n2 temp_wb [0:0] $end
$var reg 1 o2 temp_wb2 [0:0] $end
$var reg 1 p2 temp $end
$var reg 8 q2 i_q_reg_a [7:0] $end
$var reg 8 r2 i_q_tmp_a [7:0] $end
$var reg 8 s2 i_q_tmp2_a [7:0] $end
$var reg 1 t2 i_q_reg_b [0:0] $end
$var reg 1 u2 i_q_tmp_b [0:0] $end
$var reg 1 v2 i_q_tmp2_b [0:0] $end
$var reg 1 w2 i_q_output_latch [0:0] $end
$var reg 8 x2 i_byteena_mask_reg_a [7:0] $end
$var reg 1 y2 i_byteena_mask_reg_b [0:0] $end
$var reg 11 z2 i_address_reg_a [10:0] $end
$var reg 1 {2 i_address_reg_b [0:0] $end
$var reg 1 |2 i_q_ecc_reg_b [0:0] $end
$var reg 1 }2 i_q_ecc_tmp_b [0:0] $end
$var reg 11 ~2 i_original_address_a [10:0] $end
$var reg 8 !3 i_byteena_mask_reg_a_tmp [7:0] $end
$var reg 1 "3 i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 8 #3 i_byteena_mask_reg_a_out [7:0] $end
$var reg 1 $3 i_byteena_mask_reg_b_out [0:0] $end
$var reg 8 %3 i_byteena_mask_reg_a_x [7:0] $end
$var reg 1 &3 i_byteena_mask_reg_b_x [0:0] $end
$var reg 8 '3 i_byteena_mask_reg_a_out_b [7:0] $end
$var reg 1 (3 i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 )3 ram_initf [2048:1] $end
$var reg 1 *3 i_wren_reg_a $end
$var reg 1 +3 i_wren_reg_b $end
$var reg 1 ,3 i_rden_reg_a $end
$var reg 1 -3 i_rden_reg_b $end
$var reg 1 .3 i_read_flag_a $end
$var reg 1 /3 i_read_flag_b $end
$var reg 1 03 i_write_flag_a $end
$var reg 1 13 i_write_flag_b $end
$var reg 1 23 good_to_go_a $end
$var reg 1 33 good_to_go_b $end
$var reg 32 43 file_desc [31:0] $end
$var reg 1 53 init_file_b_port $end
$var reg 1 63 i_nmram_write_a $end
$var reg 1 73 i_nmram_write_b $end
$var reg 8 83 wa_mult_x [7:0] $end
$var reg 8 93 wa_mult_x_ii [7:0] $end
$var reg 8 :3 wa_mult_x_iii [7:0] $end
$var reg 19 ;3 add_reg_a_mult_wa [18:0] $end
$var reg 2 <3 add_reg_b_mult_wb [1:0] $end
$var reg 19 =3 add_reg_a_mult_wa_pl_wa [18:0] $end
$var reg 2 >3 add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 ?3 same_clock_pulse0 $end
$var reg 1 @3 same_clock_pulse1 $end
$var reg 1 A3 i_original_data_b [0:0] $end
$var reg 8 B3 i_original_data_a [7:0] $end
$var reg 1 C3 i_address_aclr_a_flag $end
$var reg 1 D3 i_address_aclr_a_prev $end
$var reg 1 E3 i_address_aclr_b_flag $end
$var reg 1 F3 i_address_aclr_b_prev $end
$var reg 1 G3 i_outdata_aclr_a_prev $end
$var reg 1 H3 i_outdata_aclr_b_prev $end
$var reg 1 I3 i_force_reread_a $end
$var reg 1 J3 i_force_reread_a1 $end
$var reg 1 K3 i_force_reread_b $end
$var reg 1 L3 i_force_reread_b1 $end
$var reg 1 M3 i_force_reread_a_signal $end
$var reg 1 N3 i_force_reread_b_signal $end
$var reg 169 O3 cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 P3 i_ram_block_type [56:0] $end
$var integer 32 Q3 i_byte_size $end
$var wire 1 R3 i_good_to_write_a $end
$var wire 1 S3 i_good_to_write_b $end
$var reg 1 T3 i_good_to_write_a2 $end
$var reg 1 U3 i_good_to_write_b2 $end
$var reg 1 V3 i_core_clocken_a_reg $end
$var reg 1 W3 i_core_clocken0_b_reg $end
$var reg 1 X3 i_core_clocken1_b_reg $end
$var wire 1 Y3 i_indata_aclr_a $end
$var wire 1 Z3 i_address_aclr_a $end
$var wire 1 [3 i_wrcontrol_aclr_a $end
$var wire 1 \3 i_indata_aclr_b $end
$var wire 1 ]3 i_address_aclr_b $end
$var wire 1 ^3 i_wrcontrol_aclr_b $end
$var wire 1 _3 i_outdata_aclr_a $end
$var wire 1 `3 i_outdata_aclr_b $end
$var wire 1 a3 i_rdcontrol_aclr_b $end
$var wire 1 b3 i_byteena_aclr_a $end
$var wire 1 c3 i_byteena_aclr_b $end
$var wire 1 d3 i_outdata_clken_a $end
$var wire 1 e3 i_outdata_clken_b $end
$var wire 1 f3 i_outlatch_clken_a $end
$var wire 1 g3 i_outlatch_clken_b $end
$var wire 1 h3 i_clocken0 $end
$var wire 1 i3 i_clocken1_b $end
$var wire 1 j3 i_clocken0_b $end
$var wire 1 k3 i_core_clocken_a $end
$var wire 1 l3 i_core_clocken_b $end
$var wire 1 m3 i_core_clocken0_b $end
$var wire 1 n3 i_core_clocken1_b $end
$var tri1 1 o3 i_byteena_a [0] $end
$var tri1 1 p3 i_byteena_b [0] $end
$var integer 32 q3 i_numwords_a $end
$var integer 32 r3 i_numwords_b $end
$var integer 32 s3 i_aclr_flag_a $end
$var integer 32 t3 i_aclr_flag_b $end
$var integer 32 u3 i_q_tmp2_a_idx $end
$var integer 32 v3 init_i $end
$var integer 32 w3 i $end
$var integer 32 x3 i2 $end
$var integer 32 y3 i3 $end
$var integer 32 z3 i4 $end
$var integer 32 {3 i5 $end
$var integer 32 |3 j $end
$var integer 32 }3 j2 $end
$var integer 32 ~3 j3 $end
$var integer 32 !4 k $end
$var integer 32 "4 k2 $end
$var integer 32 #4 k3 $end
$var integer 32 $4 k4 $end
$var integer 32 %4 i_div_wa $end
$var integer 32 &4 i_div_wb $end
$var integer 32 '4 j_plus_i2 $end
$var integer 32 (4 j2_plus_i5 $end
$var integer 32 )4 j3_plus_i5 $end
$var integer 32 *4 j_plus_i2_div_a $end
$var integer 32 +4 j2_plus_i5_div_a $end
$var integer 32 ,4 j3_plus_i5_div_a $end
$var integer 32 -4 j3_plus_i5_div_b $end
$var integer 32 .4 i_byteena_count $end
$var integer 32 /4 port_a_bit_count_low $end
$var integer 32 04 port_a_bit_count_high $end
$var integer 32 14 port_b_bit_count_low $end
$var integer 32 24 port_b_bit_count_high $end
$var time 64 34 i_data_write_time_a $end
$var time 64 44 i_data_write_time_b $end

$scope begin genblk4 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk1 $end
$upscope $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 54 IS_FAMILY_ARRIA10 $end
$var reg 160 64 device [160:1] $end
$var reg 1 74 is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 84 IS_FAMILY_ARRIAGX $end
$var reg 160 94 device [160:1] $end
$var reg 1 :4 is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 ;4 IS_FAMILY_ARRIAIIGX $end
$var reg 160 <4 device [160:1] $end
$var reg 1 =4 is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 >4 IS_FAMILY_ARRIAIIGZ $end
$var reg 160 ?4 device [160:1] $end
$var reg 1 @4 is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 A4 IS_FAMILY_ARRIAVGZ $end
$var reg 160 B4 device [160:1] $end
$var reg 1 C4 is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 D4 IS_FAMILY_ARRIAV $end
$var reg 160 E4 device [160:1] $end
$var reg 1 F4 is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 G4 IS_FAMILY_CYCLONE10LP $end
$var reg 160 H4 device [160:1] $end
$var reg 1 I4 is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 J4 IS_FAMILY_CYCLONEII $end
$var reg 160 K4 device [160:1] $end
$var reg 1 L4 is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 M4 IS_FAMILY_CYCLONEIIILS $end
$var reg 160 N4 device [160:1] $end
$var reg 1 O4 is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 P4 IS_FAMILY_CYCLONEIII $end
$var reg 160 Q4 device [160:1] $end
$var reg 1 R4 is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 S4 IS_FAMILY_CYCLONEIVE $end
$var reg 160 T4 device [160:1] $end
$var reg 1 U4 is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 V4 IS_FAMILY_CYCLONEIVGX $end
$var reg 160 W4 device [160:1] $end
$var reg 1 X4 is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 Y4 IS_FAMILY_CYCLONEV $end
$var reg 160 Z4 device [160:1] $end
$var reg 1 [4 is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 \4 IS_FAMILY_CYCLONE $end
$var reg 160 ]4 device [160:1] $end
$var reg 1 ^4 is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 _4 IS_FAMILY_HARDCOPYII $end
$var reg 160 `4 device [160:1] $end
$var reg 1 a4 is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 b4 IS_FAMILY_HARDCOPYIII $end
$var reg 160 c4 device [160:1] $end
$var reg 1 d4 is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 e4 IS_FAMILY_HARDCOPYIV $end
$var reg 160 f4 device [160:1] $end
$var reg 1 g4 is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 h4 IS_FAMILY_MAX10 $end
$var reg 160 i4 device [160:1] $end
$var reg 1 j4 is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 k4 IS_FAMILY_MAXII $end
$var reg 160 l4 device [160:1] $end
$var reg 1 m4 is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 n4 IS_FAMILY_MAXV $end
$var reg 160 o4 device [160:1] $end
$var reg 1 p4 is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 q4 IS_FAMILY_STRATIX10 $end
$var reg 160 r4 device [160:1] $end
$var reg 1 s4 is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 t4 IS_FAMILY_STRATIXGX $end
$var reg 160 u4 device [160:1] $end
$var reg 1 v4 is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 w4 IS_FAMILY_STRATIXIIGX $end
$var reg 160 x4 device [160:1] $end
$var reg 1 y4 is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 z4 IS_FAMILY_STRATIXII $end
$var reg 160 {4 device [160:1] $end
$var reg 1 |4 is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 }4 IS_FAMILY_STRATIXIII $end
$var reg 160 ~4 device [160:1] $end
$var reg 1 !5 is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 "5 IS_FAMILY_STRATIXIV $end
$var reg 160 #5 device [160:1] $end
$var reg 1 $5 is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 %5 IS_FAMILY_STRATIXV $end
$var reg 160 &5 device [160:1] $end
$var reg 1 '5 is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 (5 IS_FAMILY_STRATIX $end
$var reg 160 )5 device [160:1] $end
$var reg 1 *5 is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 +5 FEATURE_FAMILY_STRATIXGX $end
$var reg 160 ,5 device [160:1] $end
$var reg 1 -5 var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 .5 FEATURE_FAMILY_CYCLONE $end
$var reg 160 /5 device [160:1] $end
$var reg 1 05 var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 15 FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 25 device [160:1] $end
$var reg 1 35 var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 45 FEATURE_FAMILY_STRATIXIII $end
$var reg 160 55 device [160:1] $end
$var reg 1 65 var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 75 FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 85 device [160:1] $end
$var reg 1 95 var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 :5 FEATURE_FAMILY_STRATIXV $end
$var reg 160 ;5 device [160:1] $end
$var reg 1 <5 var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 =5 FEATURE_FAMILY_ARRIA10 $end
$var reg 160 >5 device [160:1] $end
$var reg 1 ?5 var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 @5 FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 A5 device [160:1] $end
$var reg 1 B5 var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 C5 FEATURE_FAMILY_STRATIXII $end
$var reg 160 D5 device [160:1] $end
$var reg 1 E5 var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 F5 FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 G5 device [160:1] $end
$var reg 1 H5 var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 I5 FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 J5 device [160:1] $end
$var reg 1 K5 var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 L5 FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 M5 device [160:1] $end
$var reg 1 N5 var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 O5 FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 P5 device [160:1] $end
$var reg 1 Q5 var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 R5 FEATURE_FAMILY_STRATIX $end
$var reg 160 S5 device [160:1] $end
$var reg 1 T5 var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 U5 FEATURE_FAMILY_MAXII $end
$var reg 160 V5 device [160:1] $end
$var reg 1 W5 var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 X5 FEATURE_FAMILY_MAXV $end
$var reg 160 Y5 device [160:1] $end
$var reg 1 Z5 var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 [5 FEATURE_FAMILY_CYCLONEII $end
$var reg 160 \5 device [160:1] $end
$var reg 1 ]5 var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 ^5 FEATURE_FAMILY_STRATIXIV $end
$var reg 160 _5 device [160:1] $end
$var reg 1 `5 var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 a5 FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 b5 device [160:1] $end
$var reg 1 c5 var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 d5 FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 e5 device [160:1] $end
$var reg 1 f5 var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 g5 FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 h5 device [160:1] $end
$var reg 1 i5 var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 j5 FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 k5 device [160:1] $end
$var reg 1 l5 var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 m5 FEATURE_FAMILY_CYCLONEV $end
$var reg 160 n5 device [160:1] $end
$var reg 1 o5 var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 p5 FEATURE_FAMILY_ARRIAV $end
$var reg 160 q5 device [160:1] $end
$var reg 1 r5 var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 s5 FEATURE_FAMILY_MAX10 $end
$var reg 160 t5 device [160:1] $end
$var reg 1 u5 var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 v5 FEATURE_FAMILY_STRATIX10 $end
$var reg 160 w5 device [160:1] $end
$var reg 1 x5 var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 y5 FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 z5 device [160:1] $end
$var reg 1 {5 var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 |5 FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 }5 device [160:1] $end
$var reg 1 ~5 var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 !6 FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 "6 device [160:1] $end
$var reg 1 #6 var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 $6 FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 %6 device [160:1] $end
$var reg 1 &6 var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 '6 FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 (6 device [160:1] $end
$var reg 1 )6 var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 *6 FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 +6 device [160:1] $end
$var reg 1 ,6 var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 -6 FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 .6 device [160:1] $end
$var reg 1 /6 var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 06 FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 16 device [160:1] $end
$var reg 1 26 var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 36 FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 46 device [160:1] $end
$var reg 1 56 var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 66 FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 76 device [160:1] $end
$var reg 1 86 var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 96 FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 :6 device [160:1] $end
$var reg 1 ;6 var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 <6 IS_VALID_FAMILY $end
$var reg 160 =6 device [160:1] $end
$var reg 1 >6 is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 ?6 tolower [8:1] $end
$var reg 8 @6 given_character [8:1] $end
$var reg 8 A6 conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 B6 ecc_parity [7:0] $end
$var reg 8 C6 i_eccencparity [7:0] $end
$var integer 32 D6 pointer $end
$var integer 32 E6 pointer_max $end
$var integer 32 F6 pointer_min $end
$var integer 32 G6 flag_err $end
$var integer 32 H6 flag $end
$var integer 32 I6 flag_double $end
$var integer 32 J6 flag_triple $end
$var integer 32 K6 flag_single $end
$var integer 32 L6 flag_no_err $end
$var integer 32 M6 flag_uncorr $end
$var integer 32 N6 n $end
$var integer 32 O6 err $end
$var integer 32 P6 found $end
$var integer 32 Q6 found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 R6 in_file [2048:1] $end
$var integer 32 S6 width $end
$var reg 2048 T6 out_file [2048:1] $end
$var reg 2048 U6 buffer [2048:1] $end
$var reg 1025 V6 memory_data1 [1024:0] $end
$var reg 1025 W6 memory_data2 [1024:0] $end
$var reg 8 X6 c [8:1] $end
$var reg 4 Y6 hex [3:0] $end
$var reg 4 Z6 tmp_char [3:0] $end
$var reg 24 [6 address_radix [24:1] $end
$var reg 24 \6 data_radix [24:1] $end
$var reg 1 ]6 get_width $end
$var reg 1 ^6 get_depth $end
$var reg 1 _6 get_data_radix $end
$var reg 1 `6 get_address_radix $end
$var reg 1 a6 width_found $end
$var reg 1 b6 depth_found $end
$var reg 1 c6 data_radix_found $end
$var reg 1 d6 address_radix_found $end
$var reg 1 e6 get_address_data_pairs $end
$var reg 1 f6 get_address $end
$var reg 1 g6 get_data $end
$var reg 1 h6 display_address $end
$var reg 1 i6 invalid_address $end
$var reg 1 j6 get_start_address $end
$var reg 1 k6 get_end_address $end
$var reg 1 l6 done $end
$var reg 1 m6 error_status $end
$var reg 1 n6 first_rec $end
$var reg 1 o6 last_rec $end
$var integer 32 p6 memory_width $end
$var integer 32 q6 memory_depth $end
$var integer 32 r6 value $end
$var integer 32 s6 ifp $end
$var integer 32 t6 ofp $end
$var integer 32 u6 r $end
$var integer 32 v6 r2 $end
$var integer 32 w6 i $end
$var integer 32 x6 j $end
$var integer 32 y6 k $end
$var integer 32 z6 m $end
$var integer 32 {6 n $end
$var integer 32 |6 negative $end
$var integer 32 }6 off_addr $end
$var integer 32 ~6 nn $end
$var integer 32 !7 address $end
$var integer 32 "7 tt $end
$var integer 32 #7 cc $end
$var integer 32 $7 aah $end
$var integer 32 %7 aal $end
$var integer 32 &7 dd $end
$var integer 32 '7 sum $end
$var integer 32 (7 start_address $end
$var integer 32 )7 end_address $end
$var integer 32 *7 line_no $end
$var integer 32 +7 character_count $end
$var integer 32 ,7 comment_with_percent_found $end
$var integer 32 -7 comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 .7 in_file [2048:1] $end
$var integer 32 /7 width $end
$var reg 2048 07 out_file [2048:1] $end
$var reg 8 17 c [8:1] $end
$var reg 4 27 hex [3:0] $end
$var reg 4 37 tmp_char [3:0] $end
$var reg 1 47 done $end
$var reg 1 57 error_status $end
$var reg 1 67 first_rec $end
$var reg 1 77 last_rec $end
$var reg 1 87 first_normal_record $end
$var reg 1 97 is_word_address_format $end
$var integer 32 :7 ifp $end
$var integer 32 ;7 ofp $end
$var integer 32 <7 r $end
$var integer 32 =7 r2 $end
$var integer 32 >7 i $end
$var integer 32 ?7 j $end
$var integer 32 @7 k $end
$var integer 32 A7 m $end
$var integer 32 B7 n $end
$var integer 32 C7 off_addr $end
$var integer 32 D7 nn $end
$var integer 32 E7 aaaa $end
$var integer 32 F7 aaaa_pre $end
$var integer 32 G7 tt $end
$var integer 32 H7 cc $end
$var integer 32 I7 aah $end
$var integer 32 J7 aal $end
$var integer 32 K7 dd $end
$var integer 32 L7 sum $end
$var integer 32 M7 line_no $end
$var integer 32 N7 divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 O7 in_file [2048:1] $end
$var integer 32 P7 width $end
$var reg 2048 Q7 out_file [2048:1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module s2_ram $end
$var wire 1 R7 address [11] $end
$var wire 1 S7 address [10] $end
$var wire 1 T7 address [9] $end
$var wire 1 U7 address [8] $end
$var wire 1 V7 address [7] $end
$var wire 1 W7 address [6] $end
$var wire 1 X7 address [5] $end
$var wire 1 Y7 address [4] $end
$var wire 1 Z7 address [3] $end
$var wire 1 [7 address [2] $end
$var wire 1 \7 address [1] $end
$var wire 1 ]7 address [0] $end
$var tri1 1 4 clock $end
$var wire 1 ^7 data [7] $end
$var wire 1 _7 data [6] $end
$var wire 1 `7 data [5] $end
$var wire 1 a7 data [4] $end
$var wire 1 b7 data [3] $end
$var wire 1 c7 data [2] $end
$var wire 1 d7 data [1] $end
$var wire 1 e7 data [0] $end
$var wire 1 f7 wren $end
$var wire 1 g7 q [7] $end
$var wire 1 h7 q [6] $end
$var wire 1 i7 q [5] $end
$var wire 1 j7 q [4] $end
$var wire 1 k7 q [3] $end
$var wire 1 l7 q [2] $end
$var wire 1 m7 q [1] $end
$var wire 1 n7 q [0] $end
$var wire 1 o7 sub_wire0 [7] $end
$var wire 1 p7 sub_wire0 [6] $end
$var wire 1 q7 sub_wire0 [5] $end
$var wire 1 r7 sub_wire0 [4] $end
$var wire 1 s7 sub_wire0 [3] $end
$var wire 1 t7 sub_wire0 [2] $end
$var wire 1 u7 sub_wire0 [1] $end
$var wire 1 v7 sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 w7 width_a $end
$var parameter 32 x7 widthad_a $end
$var parameter 32 y7 numwords_a $end
$var parameter 96 z7 outdata_reg_a $end
$var parameter 32 {7 address_aclr_a $end
$var parameter 32 |7 outdata_aclr_a $end
$var parameter 32 }7 indata_aclr_a $end
$var parameter 32 ~7 wrcontrol_aclr_a $end
$var parameter 32 !8 byteena_aclr_a $end
$var parameter 32 "8 width_byteena_a $end
$var parameter 32 #8 width_b $end
$var parameter 32 $8 widthad_b $end
$var parameter 32 %8 numwords_b $end
$var parameter 48 &8 rdcontrol_reg_b $end
$var parameter 48 '8 address_reg_b $end
$var parameter 96 (8 outdata_reg_b $end
$var parameter 32 )8 outdata_aclr_b $end
$var parameter 32 *8 rdcontrol_aclr_b $end
$var parameter 48 +8 indata_reg_b $end
$var parameter 48 ,8 wrcontrol_wraddress_reg_b $end
$var parameter 48 -8 byteena_reg_b $end
$var parameter 32 .8 indata_aclr_b $end
$var parameter 32 /8 wrcontrol_aclr_b $end
$var parameter 32 08 address_aclr_b $end
$var parameter 32 18 byteena_aclr_b $end
$var parameter 32 28 width_byteena_b $end
$var parameter 48 38 clock_enable_input_a $end
$var parameter 48 48 clock_enable_output_a $end
$var parameter 48 58 clock_enable_input_b $end
$var parameter 48 68 clock_enable_output_b $end
$var parameter 120 78 clock_enable_core_a $end
$var parameter 120 88 clock_enable_core_b $end
$var parameter 160 98 read_during_write_mode_port_a $end
$var parameter 160 :8 read_during_write_mode_port_b $end
$var parameter 40 ;8 enable_ecc $end
$var parameter 32 <8 width_eccstatus $end
$var parameter 40 =8 ecc_pipeline_stage_enabled $end
$var parameter 88 >8 operation_mode $end
$var parameter 32 ?8 byte_size $end
$var parameter 72 @8 read_during_write_mode_mixed_ports $end
$var parameter 32 A8 ram_block_type $end
$var parameter 232 B8 init_file $end
$var parameter 48 C8 init_file_layout $end
$var parameter 32 D8 maximum_depth $end
$var parameter 96 E8 intended_device_family $end
$var parameter 312 F8 lpm_hint $end
$var parameter 80 G8 lpm_type $end
$var parameter 24 H8 implement_in_les $end
$var parameter 40 I8 power_up_uninitialized $end
$var parameter 32 J8 family_arria10 $end
$var tri0 1 f7 wren_a $end
$var tri0 1 K8 wren_b $end
$var tri1 1 L8 rden_a $end
$var tri1 1 M8 rden_b $end
$var wire 1 ^7 data_a [7] $end
$var wire 1 _7 data_a [6] $end
$var wire 1 `7 data_a [5] $end
$var wire 1 a7 data_a [4] $end
$var wire 1 b7 data_a [3] $end
$var wire 1 c7 data_a [2] $end
$var wire 1 d7 data_a [1] $end
$var wire 1 e7 data_a [0] $end
$var wire 1 N8 data_b [0] $end
$var wire 1 R7 address_a [11] $end
$var wire 1 S7 address_a [10] $end
$var wire 1 T7 address_a [9] $end
$var wire 1 U7 address_a [8] $end
$var wire 1 V7 address_a [7] $end
$var wire 1 W7 address_a [6] $end
$var wire 1 X7 address_a [5] $end
$var wire 1 Y7 address_a [4] $end
$var wire 1 Z7 address_a [3] $end
$var wire 1 [7 address_a [2] $end
$var wire 1 \7 address_a [1] $end
$var wire 1 ]7 address_a [0] $end
$var wire 1 O8 address_b [0] $end
$var tri1 1 4 clock0 $end
$var wire 1 P8 clock1 $end
$var tri1 1 Q8 clocken0 $end
$var tri1 1 R8 clocken1 $end
$var tri1 1 S8 clocken2 $end
$var tri1 1 T8 clocken3 $end
$var tri0 1 U8 aclr0 $end
$var tri0 1 V8 aclr1 $end
$var tri1 1 W8 byteena_a [0] $end
$var tri1 1 X8 byteena_b [0] $end
$var tri0 1 Y8 addressstall_a $end
$var tri0 1 Z8 addressstall_b $end
$var wire 1 o7 q_a [7] $end
$var wire 1 p7 q_a [6] $end
$var wire 1 q7 q_a [5] $end
$var wire 1 r7 q_a [4] $end
$var wire 1 s7 q_a [3] $end
$var wire 1 t7 q_a [2] $end
$var wire 1 u7 q_a [1] $end
$var wire 1 v7 q_a [0] $end
$var wire 1 [8 q_b [0] $end
$var wire 1 \8 eccstatus [2] $end
$var wire 1 ]8 eccstatus [1] $end
$var wire 1 ^8 eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 _8 width_a $end
$var parameter 32 `8 widthad_a $end
$var parameter 32 a8 numwords_a $end
$var parameter 96 b8 outdata_reg_a $end
$var parameter 32 c8 address_aclr_a $end
$var parameter 32 d8 outdata_aclr_a $end
$var parameter 32 e8 indata_aclr_a $end
$var parameter 32 f8 wrcontrol_aclr_a $end
$var parameter 32 g8 byteena_aclr_a $end
$var parameter 32 h8 width_byteena_a $end
$var parameter 32 i8 width_b $end
$var parameter 32 j8 widthad_b $end
$var parameter 32 k8 numwords_b $end
$var parameter 48 l8 rdcontrol_reg_b $end
$var parameter 48 m8 address_reg_b $end
$var parameter 96 n8 outdata_reg_b $end
$var parameter 32 o8 outdata_aclr_b $end
$var parameter 32 p8 rdcontrol_aclr_b $end
$var parameter 48 q8 indata_reg_b $end
$var parameter 48 r8 wrcontrol_wraddress_reg_b $end
$var parameter 48 s8 byteena_reg_b $end
$var parameter 32 t8 indata_aclr_b $end
$var parameter 32 u8 wrcontrol_aclr_b $end
$var parameter 32 v8 address_aclr_b $end
$var parameter 32 w8 byteena_aclr_b $end
$var parameter 32 x8 width_byteena_b $end
$var parameter 48 y8 clock_enable_input_a $end
$var parameter 48 z8 clock_enable_output_a $end
$var parameter 48 {8 clock_enable_input_b $end
$var parameter 48 |8 clock_enable_output_b $end
$var parameter 120 }8 clock_enable_core_a $end
$var parameter 120 ~8 clock_enable_core_b $end
$var parameter 160 !9 read_during_write_mode_port_a $end
$var parameter 160 "9 read_during_write_mode_port_b $end
$var parameter 40 #9 enable_ecc $end
$var parameter 32 $9 width_eccstatus $end
$var parameter 40 %9 ecc_pipeline_stage_enabled $end
$var parameter 88 &9 operation_mode $end
$var parameter 32 '9 byte_size $end
$var parameter 72 (9 read_during_write_mode_mixed_ports $end
$var parameter 32 )9 ram_block_type $end
$var parameter 232 *9 init_file $end
$var parameter 48 +9 init_file_layout $end
$var parameter 32 ,9 maximum_depth $end
$var parameter 96 -9 intended_device_family $end
$var parameter 312 .9 lpm_hint $end
$var parameter 80 /9 lpm_type $end
$var parameter 24 09 implement_in_les $end
$var parameter 40 19 power_up_uninitialized $end
$var parameter 24 29 sim_show_memory_data_in_port_b_layout $end
$var parameter 32 39 is_lutram $end
$var parameter 32 49 is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 59 is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 69 check_simultaneous_read_write $end
$var parameter 32 79 dual_port_addreg_b_clk0 $end
$var parameter 32 89 dual_port_addreg_b_clk1 $end
$var parameter 32 99 i_byte_size_tmp $end
$var parameter 32 :9 i_lutram_read $end
$var parameter 32 ;9 enable_mem_data_b_reading $end
$var parameter 32 <9 family_arriav $end
$var parameter 32 =9 family_cyclonev $end
$var parameter 32 >9 family_base_arriav $end
$var parameter 32 ?9 family_arria10 $end
$var parameter 32 @9 family_stratix10 $end
$var parameter 32 A9 family_arriavi $end
$var parameter 32 B9 family_nightfury $end
$var parameter 32 C9 family_arriavgz $end
$var parameter 32 D9 family_stratixv $end
$var parameter 32 E9 family_hardcopyiv $end
$var parameter 32 F9 family_hardcopyiii $end
$var parameter 32 G9 family_hardcopyii $end
$var parameter 32 H9 family_arriaiigz $end
$var parameter 32 I9 family_arriaiigx $end
$var parameter 32 J9 family_stratixiii $end
$var parameter 32 K9 family_zippleback $end
$var parameter 32 L9 family_cycloneiii $end
$var parameter 32 M9 family_cyclone $end
$var parameter 32 N9 family_base_cycloneii $end
$var parameter 32 O9 family_cycloneii $end
$var parameter 32 P9 family_base_stratix $end
$var parameter 32 Q9 family_base_stratixii $end
$var parameter 32 R9 family_has_lutram $end
$var parameter 32 S9 family_has_stratixv_style_ram $end
$var parameter 32 T9 family_has_stratixiii_style_ram $end
$var parameter 32 U9 family_has_m512 $end
$var parameter 32 V9 family_has_megaram $end
$var parameter 32 W9 family_has_stratixi_style_ram $end
$var parameter 32 X9 is_write_on_positive_edge $end
$var parameter 32 Y9 lutram_single_port_fast_read $end
$var parameter 32 Z9 lutram_dual_port_fast_read $end
$var parameter 32 [9 s3_address_aclr_a $end
$var parameter 32 \9 s3_address_aclr_b $end
$var parameter 32 ]9 i_address_aclr_family_a $end
$var parameter 32 ^9 i_address_aclr_family_b $end
$var tri0 1 f7 wren_a $end
$var tri0 1 K8 wren_b $end
$var tri1 1 L8 rden_a $end
$var tri1 1 M8 rden_b $end
$var wire 1 ^7 data_a [7] $end
$var wire 1 _7 data_a [6] $end
$var wire 1 `7 data_a [5] $end
$var wire 1 a7 data_a [4] $end
$var wire 1 b7 data_a [3] $end
$var wire 1 c7 data_a [2] $end
$var wire 1 d7 data_a [1] $end
$var wire 1 e7 data_a [0] $end
$var wire 1 N8 data_b [0] $end
$var wire 1 R7 address_a [11] $end
$var wire 1 S7 address_a [10] $end
$var wire 1 T7 address_a [9] $end
$var wire 1 U7 address_a [8] $end
$var wire 1 V7 address_a [7] $end
$var wire 1 W7 address_a [6] $end
$var wire 1 X7 address_a [5] $end
$var wire 1 Y7 address_a [4] $end
$var wire 1 Z7 address_a [3] $end
$var wire 1 [7 address_a [2] $end
$var wire 1 \7 address_a [1] $end
$var wire 1 ]7 address_a [0] $end
$var wire 1 O8 address_b [0] $end
$var tri1 1 4 clock0 $end
$var wire 1 P8 clock1 $end
$var tri1 1 Q8 clocken0 $end
$var tri1 1 R8 clocken1 $end
$var tri1 1 S8 clocken2 $end
$var tri1 1 T8 clocken3 $end
$var tri0 1 U8 aclr0 $end
$var tri0 1 V8 aclr1 $end
$var wire 1 W8 byteena_a [0] $end
$var wire 1 X8 byteena_b [0] $end
$var tri0 1 Y8 addressstall_a $end
$var tri0 1 Z8 addressstall_b $end
$var wire 1 o7 q_a [7] $end
$var wire 1 p7 q_a [6] $end
$var wire 1 q7 q_a [5] $end
$var wire 1 r7 q_a [4] $end
$var wire 1 s7 q_a [3] $end
$var wire 1 t7 q_a [2] $end
$var wire 1 u7 q_a [1] $end
$var wire 1 v7 q_a [0] $end
$var wire 1 [8 q_b [0] $end
$var wire 1 \8 eccstatus [2] $end
$var wire 1 ]8 eccstatus [1] $end
$var wire 1 ^8 eccstatus [0] $end
$var reg 8 _9 i_data_reg_a [7:0] $end
$var reg 8 `9 temp_wa [7:0] $end
$var reg 8 a9 temp_wa2 [7:0] $end
$var reg 8 b9 temp_wa2b [7:0] $end
$var reg 8 c9 init_temp [7:0] $end
$var reg 1 d9 i_data_reg_b [0:0] $end
$var reg 1 e9 temp_wb [0:0] $end
$var reg 1 f9 temp_wb2 [0:0] $end
$var reg 1 g9 temp $end
$var reg 8 h9 i_q_reg_a [7:0] $end
$var reg 8 i9 i_q_tmp_a [7:0] $end
$var reg 8 j9 i_q_tmp2_a [7:0] $end
$var reg 1 k9 i_q_reg_b [0:0] $end
$var reg 1 l9 i_q_tmp_b [0:0] $end
$var reg 1 m9 i_q_tmp2_b [0:0] $end
$var reg 1 n9 i_q_output_latch [0:0] $end
$var reg 8 o9 i_byteena_mask_reg_a [7:0] $end
$var reg 1 p9 i_byteena_mask_reg_b [0:0] $end
$var reg 12 q9 i_address_reg_a [11:0] $end
$var reg 1 r9 i_address_reg_b [0:0] $end
$var reg 1 s9 i_q_ecc_reg_b [0:0] $end
$var reg 1 t9 i_q_ecc_tmp_b [0:0] $end
$var reg 12 u9 i_original_address_a [11:0] $end
$var reg 8 v9 i_byteena_mask_reg_a_tmp [7:0] $end
$var reg 1 w9 i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 8 x9 i_byteena_mask_reg_a_out [7:0] $end
$var reg 1 y9 i_byteena_mask_reg_b_out [0:0] $end
$var reg 8 z9 i_byteena_mask_reg_a_x [7:0] $end
$var reg 1 {9 i_byteena_mask_reg_b_x [0:0] $end
$var reg 8 |9 i_byteena_mask_reg_a_out_b [7:0] $end
$var reg 1 }9 i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 ~9 ram_initf [2048:1] $end
$var reg 1 !: i_wren_reg_a $end
$var reg 1 ": i_wren_reg_b $end
$var reg 1 #: i_rden_reg_a $end
$var reg 1 $: i_rden_reg_b $end
$var reg 1 %: i_read_flag_a $end
$var reg 1 &: i_read_flag_b $end
$var reg 1 ': i_write_flag_a $end
$var reg 1 (: i_write_flag_b $end
$var reg 1 ): good_to_go_a $end
$var reg 1 *: good_to_go_b $end
$var reg 32 +: file_desc [31:0] $end
$var reg 1 ,: init_file_b_port $end
$var reg 1 -: i_nmram_write_a $end
$var reg 1 .: i_nmram_write_b $end
$var reg 8 /: wa_mult_x [7:0] $end
$var reg 8 0: wa_mult_x_ii [7:0] $end
$var reg 8 1: wa_mult_x_iii [7:0] $end
$var reg 20 2: add_reg_a_mult_wa [19:0] $end
$var reg 2 3: add_reg_b_mult_wb [1:0] $end
$var reg 20 4: add_reg_a_mult_wa_pl_wa [19:0] $end
$var reg 2 5: add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 6: same_clock_pulse0 $end
$var reg 1 7: same_clock_pulse1 $end
$var reg 1 8: i_original_data_b [0:0] $end
$var reg 8 9: i_original_data_a [7:0] $end
$var reg 1 :: i_address_aclr_a_flag $end
$var reg 1 ;: i_address_aclr_a_prev $end
$var reg 1 <: i_address_aclr_b_flag $end
$var reg 1 =: i_address_aclr_b_prev $end
$var reg 1 >: i_outdata_aclr_a_prev $end
$var reg 1 ?: i_outdata_aclr_b_prev $end
$var reg 1 @: i_force_reread_a $end
$var reg 1 A: i_force_reread_a1 $end
$var reg 1 B: i_force_reread_b $end
$var reg 1 C: i_force_reread_b1 $end
$var reg 1 D: i_force_reread_a_signal $end
$var reg 1 E: i_force_reread_b_signal $end
$var reg 169 F: cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 G: i_ram_block_type [56:0] $end
$var integer 32 H: i_byte_size $end
$var wire 1 I: i_good_to_write_a $end
$var wire 1 J: i_good_to_write_b $end
$var reg 1 K: i_good_to_write_a2 $end
$var reg 1 L: i_good_to_write_b2 $end
$var reg 1 M: i_core_clocken_a_reg $end
$var reg 1 N: i_core_clocken0_b_reg $end
$var reg 1 O: i_core_clocken1_b_reg $end
$var wire 1 P: i_indata_aclr_a $end
$var wire 1 Q: i_address_aclr_a $end
$var wire 1 R: i_wrcontrol_aclr_a $end
$var wire 1 S: i_indata_aclr_b $end
$var wire 1 T: i_address_aclr_b $end
$var wire 1 U: i_wrcontrol_aclr_b $end
$var wire 1 V: i_outdata_aclr_a $end
$var wire 1 W: i_outdata_aclr_b $end
$var wire 1 X: i_rdcontrol_aclr_b $end
$var wire 1 Y: i_byteena_aclr_a $end
$var wire 1 Z: i_byteena_aclr_b $end
$var wire 1 [: i_outdata_clken_a $end
$var wire 1 \: i_outdata_clken_b $end
$var wire 1 ]: i_outlatch_clken_a $end
$var wire 1 ^: i_outlatch_clken_b $end
$var wire 1 _: i_clocken0 $end
$var wire 1 `: i_clocken1_b $end
$var wire 1 a: i_clocken0_b $end
$var wire 1 b: i_core_clocken_a $end
$var wire 1 c: i_core_clocken_b $end
$var wire 1 d: i_core_clocken0_b $end
$var wire 1 e: i_core_clocken1_b $end
$var tri1 1 f: i_byteena_a [0] $end
$var tri1 1 g: i_byteena_b [0] $end
$var integer 32 h: i_numwords_a $end
$var integer 32 i: i_numwords_b $end
$var integer 32 j: i_aclr_flag_a $end
$var integer 32 k: i_aclr_flag_b $end
$var integer 32 l: i_q_tmp2_a_idx $end
$var integer 32 m: init_i $end
$var integer 32 n: i $end
$var integer 32 o: i2 $end
$var integer 32 p: i3 $end
$var integer 32 q: i4 $end
$var integer 32 r: i5 $end
$var integer 32 s: j $end
$var integer 32 t: j2 $end
$var integer 32 u: j3 $end
$var integer 32 v: k $end
$var integer 32 w: k2 $end
$var integer 32 x: k3 $end
$var integer 32 y: k4 $end
$var integer 32 z: i_div_wa $end
$var integer 32 {: i_div_wb $end
$var integer 32 |: j_plus_i2 $end
$var integer 32 }: j2_plus_i5 $end
$var integer 32 ~: j3_plus_i5 $end
$var integer 32 !; j_plus_i2_div_a $end
$var integer 32 "; j2_plus_i5_div_a $end
$var integer 32 #; j3_plus_i5_div_a $end
$var integer 32 $; j3_plus_i5_div_b $end
$var integer 32 %; i_byteena_count $end
$var integer 32 &; port_a_bit_count_low $end
$var integer 32 '; port_a_bit_count_high $end
$var integer 32 (; port_b_bit_count_low $end
$var integer 32 ); port_b_bit_count_high $end
$var time 64 *; i_data_write_time_a $end
$var time 64 +; i_data_write_time_b $end

$scope begin genblk4 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk1 $end
$upscope $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 ,; IS_FAMILY_ARRIA10 $end
$var reg 160 -; device [160:1] $end
$var reg 1 .; is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 /; IS_FAMILY_ARRIAGX $end
$var reg 160 0; device [160:1] $end
$var reg 1 1; is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 2; IS_FAMILY_ARRIAIIGX $end
$var reg 160 3; device [160:1] $end
$var reg 1 4; is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 5; IS_FAMILY_ARRIAIIGZ $end
$var reg 160 6; device [160:1] $end
$var reg 1 7; is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 8; IS_FAMILY_ARRIAVGZ $end
$var reg 160 9; device [160:1] $end
$var reg 1 :; is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 ;; IS_FAMILY_ARRIAV $end
$var reg 160 <; device [160:1] $end
$var reg 1 =; is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 >; IS_FAMILY_CYCLONE10LP $end
$var reg 160 ?; device [160:1] $end
$var reg 1 @; is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 A; IS_FAMILY_CYCLONEII $end
$var reg 160 B; device [160:1] $end
$var reg 1 C; is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 D; IS_FAMILY_CYCLONEIIILS $end
$var reg 160 E; device [160:1] $end
$var reg 1 F; is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 G; IS_FAMILY_CYCLONEIII $end
$var reg 160 H; device [160:1] $end
$var reg 1 I; is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 J; IS_FAMILY_CYCLONEIVE $end
$var reg 160 K; device [160:1] $end
$var reg 1 L; is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 M; IS_FAMILY_CYCLONEIVGX $end
$var reg 160 N; device [160:1] $end
$var reg 1 O; is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 P; IS_FAMILY_CYCLONEV $end
$var reg 160 Q; device [160:1] $end
$var reg 1 R; is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 S; IS_FAMILY_CYCLONE $end
$var reg 160 T; device [160:1] $end
$var reg 1 U; is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 V; IS_FAMILY_HARDCOPYII $end
$var reg 160 W; device [160:1] $end
$var reg 1 X; is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 Y; IS_FAMILY_HARDCOPYIII $end
$var reg 160 Z; device [160:1] $end
$var reg 1 [; is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 \; IS_FAMILY_HARDCOPYIV $end
$var reg 160 ]; device [160:1] $end
$var reg 1 ^; is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 _; IS_FAMILY_MAX10 $end
$var reg 160 `; device [160:1] $end
$var reg 1 a; is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 b; IS_FAMILY_MAXII $end
$var reg 160 c; device [160:1] $end
$var reg 1 d; is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 e; IS_FAMILY_MAXV $end
$var reg 160 f; device [160:1] $end
$var reg 1 g; is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 h; IS_FAMILY_STRATIX10 $end
$var reg 160 i; device [160:1] $end
$var reg 1 j; is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 k; IS_FAMILY_STRATIXGX $end
$var reg 160 l; device [160:1] $end
$var reg 1 m; is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 n; IS_FAMILY_STRATIXIIGX $end
$var reg 160 o; device [160:1] $end
$var reg 1 p; is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 q; IS_FAMILY_STRATIXII $end
$var reg 160 r; device [160:1] $end
$var reg 1 s; is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 t; IS_FAMILY_STRATIXIII $end
$var reg 160 u; device [160:1] $end
$var reg 1 v; is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 w; IS_FAMILY_STRATIXIV $end
$var reg 160 x; device [160:1] $end
$var reg 1 y; is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 z; IS_FAMILY_STRATIXV $end
$var reg 160 {; device [160:1] $end
$var reg 1 |; is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 }; IS_FAMILY_STRATIX $end
$var reg 160 ~; device [160:1] $end
$var reg 1 !< is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 "< FEATURE_FAMILY_STRATIXGX $end
$var reg 160 #< device [160:1] $end
$var reg 1 $< var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 %< FEATURE_FAMILY_CYCLONE $end
$var reg 160 &< device [160:1] $end
$var reg 1 '< var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 (< FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 )< device [160:1] $end
$var reg 1 *< var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 +< FEATURE_FAMILY_STRATIXIII $end
$var reg 160 ,< device [160:1] $end
$var reg 1 -< var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 .< FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 /< device [160:1] $end
$var reg 1 0< var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 1< FEATURE_FAMILY_STRATIXV $end
$var reg 160 2< device [160:1] $end
$var reg 1 3< var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 4< FEATURE_FAMILY_ARRIA10 $end
$var reg 160 5< device [160:1] $end
$var reg 1 6< var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 7< FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 8< device [160:1] $end
$var reg 1 9< var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 :< FEATURE_FAMILY_STRATIXII $end
$var reg 160 ;< device [160:1] $end
$var reg 1 << var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 =< FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 >< device [160:1] $end
$var reg 1 ?< var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 @< FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 A< device [160:1] $end
$var reg 1 B< var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 C< FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 D< device [160:1] $end
$var reg 1 E< var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 F< FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 G< device [160:1] $end
$var reg 1 H< var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 I< FEATURE_FAMILY_STRATIX $end
$var reg 160 J< device [160:1] $end
$var reg 1 K< var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 L< FEATURE_FAMILY_MAXII $end
$var reg 160 M< device [160:1] $end
$var reg 1 N< var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 O< FEATURE_FAMILY_MAXV $end
$var reg 160 P< device [160:1] $end
$var reg 1 Q< var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 R< FEATURE_FAMILY_CYCLONEII $end
$var reg 160 S< device [160:1] $end
$var reg 1 T< var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 U< FEATURE_FAMILY_STRATIXIV $end
$var reg 160 V< device [160:1] $end
$var reg 1 W< var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 X< FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 Y< device [160:1] $end
$var reg 1 Z< var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 [< FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 \< device [160:1] $end
$var reg 1 ]< var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 ^< FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 _< device [160:1] $end
$var reg 1 `< var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 a< FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 b< device [160:1] $end
$var reg 1 c< var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 d< FEATURE_FAMILY_CYCLONEV $end
$var reg 160 e< device [160:1] $end
$var reg 1 f< var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 g< FEATURE_FAMILY_ARRIAV $end
$var reg 160 h< device [160:1] $end
$var reg 1 i< var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 j< FEATURE_FAMILY_MAX10 $end
$var reg 160 k< device [160:1] $end
$var reg 1 l< var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 m< FEATURE_FAMILY_STRATIX10 $end
$var reg 160 n< device [160:1] $end
$var reg 1 o< var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 p< FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 q< device [160:1] $end
$var reg 1 r< var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 s< FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 t< device [160:1] $end
$var reg 1 u< var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 v< FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 w< device [160:1] $end
$var reg 1 x< var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 y< FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 z< device [160:1] $end
$var reg 1 {< var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 |< FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 }< device [160:1] $end
$var reg 1 ~< var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 != FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 "= device [160:1] $end
$var reg 1 #= var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 $= FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 %= device [160:1] $end
$var reg 1 &= var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 '= FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 (= device [160:1] $end
$var reg 1 )= var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 *= FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 += device [160:1] $end
$var reg 1 ,= var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 -= FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 .= device [160:1] $end
$var reg 1 /= var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 0= FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 1= device [160:1] $end
$var reg 1 2= var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 3= IS_VALID_FAMILY $end
$var reg 160 4= device [160:1] $end
$var reg 1 5= is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 6= tolower [8:1] $end
$var reg 8 7= given_character [8:1] $end
$var reg 8 8= conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 9= ecc_parity [7:0] $end
$var reg 8 := i_eccencparity [7:0] $end
$var integer 32 ;= pointer $end
$var integer 32 <= pointer_max $end
$var integer 32 == pointer_min $end
$var integer 32 >= flag_err $end
$var integer 32 ?= flag $end
$var integer 32 @= flag_double $end
$var integer 32 A= flag_triple $end
$var integer 32 B= flag_single $end
$var integer 32 C= flag_no_err $end
$var integer 32 D= flag_uncorr $end
$var integer 32 E= n $end
$var integer 32 F= err $end
$var integer 32 G= found $end
$var integer 32 H= found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 I= in_file [2048:1] $end
$var integer 32 J= width $end
$var reg 2048 K= out_file [2048:1] $end
$var reg 2048 L= buffer [2048:1] $end
$var reg 1025 M= memory_data1 [1024:0] $end
$var reg 1025 N= memory_data2 [1024:0] $end
$var reg 8 O= c [8:1] $end
$var reg 4 P= hex [3:0] $end
$var reg 4 Q= tmp_char [3:0] $end
$var reg 24 R= address_radix [24:1] $end
$var reg 24 S= data_radix [24:1] $end
$var reg 1 T= get_width $end
$var reg 1 U= get_depth $end
$var reg 1 V= get_data_radix $end
$var reg 1 W= get_address_radix $end
$var reg 1 X= width_found $end
$var reg 1 Y= depth_found $end
$var reg 1 Z= data_radix_found $end
$var reg 1 [= address_radix_found $end
$var reg 1 \= get_address_data_pairs $end
$var reg 1 ]= get_address $end
$var reg 1 ^= get_data $end
$var reg 1 _= display_address $end
$var reg 1 `= invalid_address $end
$var reg 1 a= get_start_address $end
$var reg 1 b= get_end_address $end
$var reg 1 c= done $end
$var reg 1 d= error_status $end
$var reg 1 e= first_rec $end
$var reg 1 f= last_rec $end
$var integer 32 g= memory_width $end
$var integer 32 h= memory_depth $end
$var integer 32 i= value $end
$var integer 32 j= ifp $end
$var integer 32 k= ofp $end
$var integer 32 l= r $end
$var integer 32 m= r2 $end
$var integer 32 n= i $end
$var integer 32 o= j $end
$var integer 32 p= k $end
$var integer 32 q= m $end
$var integer 32 r= n $end
$var integer 32 s= negative $end
$var integer 32 t= off_addr $end
$var integer 32 u= nn $end
$var integer 32 v= address $end
$var integer 32 w= tt $end
$var integer 32 x= cc $end
$var integer 32 y= aah $end
$var integer 32 z= aal $end
$var integer 32 {= dd $end
$var integer 32 |= sum $end
$var integer 32 }= start_address $end
$var integer 32 ~= end_address $end
$var integer 32 !> line_no $end
$var integer 32 "> character_count $end
$var integer 32 #> comment_with_percent_found $end
$var integer 32 $> comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 %> in_file [2048:1] $end
$var integer 32 &> width $end
$var reg 2048 '> out_file [2048:1] $end
$var reg 8 (> c [8:1] $end
$var reg 4 )> hex [3:0] $end
$var reg 4 *> tmp_char [3:0] $end
$var reg 1 +> done $end
$var reg 1 ,> error_status $end
$var reg 1 -> first_rec $end
$var reg 1 .> last_rec $end
$var reg 1 /> first_normal_record $end
$var reg 1 0> is_word_address_format $end
$var integer 32 1> ifp $end
$var integer 32 2> ofp $end
$var integer 32 3> r $end
$var integer 32 4> r2 $end
$var integer 32 5> i $end
$var integer 32 6> j $end
$var integer 32 7> k $end
$var integer 32 8> m $end
$var integer 32 9> n $end
$var integer 32 :> off_addr $end
$var integer 32 ;> nn $end
$var integer 32 <> aaaa $end
$var integer 32 => aaaa_pre $end
$var integer 32 >> tt $end
$var integer 32 ?> cc $end
$var integer 32 @> aah $end
$var integer 32 A> aal $end
$var integer 32 B> dd $end
$var integer 32 C> sum $end
$var integer 32 D> line_no $end
$var integer 32 E> divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 F> in_file [2048:1] $end
$var integer 32 G> width $end
$var reg 2048 H> out_file [2048:1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module s3_ram $end
$var wire 1 I> address [11] $end
$var wire 1 J> address [10] $end
$var wire 1 K> address [9] $end
$var wire 1 L> address [8] $end
$var wire 1 M> address [7] $end
$var wire 1 N> address [6] $end
$var wire 1 O> address [5] $end
$var wire 1 P> address [4] $end
$var wire 1 Q> address [3] $end
$var wire 1 R> address [2] $end
$var wire 1 S> address [1] $end
$var wire 1 T> address [0] $end
$var tri1 1 4 clock $end
$var wire 1 U> data [7] $end
$var wire 1 V> data [6] $end
$var wire 1 W> data [5] $end
$var wire 1 X> data [4] $end
$var wire 1 Y> data [3] $end
$var wire 1 Z> data [2] $end
$var wire 1 [> data [1] $end
$var wire 1 \> data [0] $end
$var wire 1 ]> wren $end
$var wire 1 ^> q [7] $end
$var wire 1 _> q [6] $end
$var wire 1 `> q [5] $end
$var wire 1 a> q [4] $end
$var wire 1 b> q [3] $end
$var wire 1 c> q [2] $end
$var wire 1 d> q [1] $end
$var wire 1 e> q [0] $end
$var wire 1 f> sub_wire0 [7] $end
$var wire 1 g> sub_wire0 [6] $end
$var wire 1 h> sub_wire0 [5] $end
$var wire 1 i> sub_wire0 [4] $end
$var wire 1 j> sub_wire0 [3] $end
$var wire 1 k> sub_wire0 [2] $end
$var wire 1 l> sub_wire0 [1] $end
$var wire 1 m> sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 n> width_a $end
$var parameter 32 o> widthad_a $end
$var parameter 32 p> numwords_a $end
$var parameter 96 q> outdata_reg_a $end
$var parameter 32 r> address_aclr_a $end
$var parameter 32 s> outdata_aclr_a $end
$var parameter 32 t> indata_aclr_a $end
$var parameter 32 u> wrcontrol_aclr_a $end
$var parameter 32 v> byteena_aclr_a $end
$var parameter 32 w> width_byteena_a $end
$var parameter 32 x> width_b $end
$var parameter 32 y> widthad_b $end
$var parameter 32 z> numwords_b $end
$var parameter 48 {> rdcontrol_reg_b $end
$var parameter 48 |> address_reg_b $end
$var parameter 96 }> outdata_reg_b $end
$var parameter 32 ~> outdata_aclr_b $end
$var parameter 32 !? rdcontrol_aclr_b $end
$var parameter 48 "? indata_reg_b $end
$var parameter 48 #? wrcontrol_wraddress_reg_b $end
$var parameter 48 $? byteena_reg_b $end
$var parameter 32 %? indata_aclr_b $end
$var parameter 32 &? wrcontrol_aclr_b $end
$var parameter 32 '? address_aclr_b $end
$var parameter 32 (? byteena_aclr_b $end
$var parameter 32 )? width_byteena_b $end
$var parameter 48 *? clock_enable_input_a $end
$var parameter 48 +? clock_enable_output_a $end
$var parameter 48 ,? clock_enable_input_b $end
$var parameter 48 -? clock_enable_output_b $end
$var parameter 120 .? clock_enable_core_a $end
$var parameter 120 /? clock_enable_core_b $end
$var parameter 160 0? read_during_write_mode_port_a $end
$var parameter 160 1? read_during_write_mode_port_b $end
$var parameter 40 2? enable_ecc $end
$var parameter 32 3? width_eccstatus $end
$var parameter 40 4? ecc_pipeline_stage_enabled $end
$var parameter 88 5? operation_mode $end
$var parameter 32 6? byte_size $end
$var parameter 72 7? read_during_write_mode_mixed_ports $end
$var parameter 32 8? ram_block_type $end
$var parameter 232 9? init_file $end
$var parameter 48 :? init_file_layout $end
$var parameter 32 ;? maximum_depth $end
$var parameter 96 <? intended_device_family $end
$var parameter 312 =? lpm_hint $end
$var parameter 80 >? lpm_type $end
$var parameter 24 ?? implement_in_les $end
$var parameter 40 @? power_up_uninitialized $end
$var parameter 32 A? family_arria10 $end
$var tri0 1 ]> wren_a $end
$var tri0 1 B? wren_b $end
$var tri1 1 C? rden_a $end
$var tri1 1 D? rden_b $end
$var wire 1 U> data_a [7] $end
$var wire 1 V> data_a [6] $end
$var wire 1 W> data_a [5] $end
$var wire 1 X> data_a [4] $end
$var wire 1 Y> data_a [3] $end
$var wire 1 Z> data_a [2] $end
$var wire 1 [> data_a [1] $end
$var wire 1 \> data_a [0] $end
$var wire 1 E? data_b [0] $end
$var wire 1 I> address_a [11] $end
$var wire 1 J> address_a [10] $end
$var wire 1 K> address_a [9] $end
$var wire 1 L> address_a [8] $end
$var wire 1 M> address_a [7] $end
$var wire 1 N> address_a [6] $end
$var wire 1 O> address_a [5] $end
$var wire 1 P> address_a [4] $end
$var wire 1 Q> address_a [3] $end
$var wire 1 R> address_a [2] $end
$var wire 1 S> address_a [1] $end
$var wire 1 T> address_a [0] $end
$var wire 1 F? address_b [0] $end
$var tri1 1 4 clock0 $end
$var wire 1 G? clock1 $end
$var tri1 1 H? clocken0 $end
$var tri1 1 I? clocken1 $end
$var tri1 1 J? clocken2 $end
$var tri1 1 K? clocken3 $end
$var tri0 1 L? aclr0 $end
$var tri0 1 M? aclr1 $end
$var tri1 1 N? byteena_a [0] $end
$var tri1 1 O? byteena_b [0] $end
$var tri0 1 P? addressstall_a $end
$var tri0 1 Q? addressstall_b $end
$var wire 1 f> q_a [7] $end
$var wire 1 g> q_a [6] $end
$var wire 1 h> q_a [5] $end
$var wire 1 i> q_a [4] $end
$var wire 1 j> q_a [3] $end
$var wire 1 k> q_a [2] $end
$var wire 1 l> q_a [1] $end
$var wire 1 m> q_a [0] $end
$var wire 1 R? q_b [0] $end
$var wire 1 S? eccstatus [2] $end
$var wire 1 T? eccstatus [1] $end
$var wire 1 U? eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 V? width_a $end
$var parameter 32 W? widthad_a $end
$var parameter 32 X? numwords_a $end
$var parameter 96 Y? outdata_reg_a $end
$var parameter 32 Z? address_aclr_a $end
$var parameter 32 [? outdata_aclr_a $end
$var parameter 32 \? indata_aclr_a $end
$var parameter 32 ]? wrcontrol_aclr_a $end
$var parameter 32 ^? byteena_aclr_a $end
$var parameter 32 _? width_byteena_a $end
$var parameter 32 `? width_b $end
$var parameter 32 a? widthad_b $end
$var parameter 32 b? numwords_b $end
$var parameter 48 c? rdcontrol_reg_b $end
$var parameter 48 d? address_reg_b $end
$var parameter 96 e? outdata_reg_b $end
$var parameter 32 f? outdata_aclr_b $end
$var parameter 32 g? rdcontrol_aclr_b $end
$var parameter 48 h? indata_reg_b $end
$var parameter 48 i? wrcontrol_wraddress_reg_b $end
$var parameter 48 j? byteena_reg_b $end
$var parameter 32 k? indata_aclr_b $end
$var parameter 32 l? wrcontrol_aclr_b $end
$var parameter 32 m? address_aclr_b $end
$var parameter 32 n? byteena_aclr_b $end
$var parameter 32 o? width_byteena_b $end
$var parameter 48 p? clock_enable_input_a $end
$var parameter 48 q? clock_enable_output_a $end
$var parameter 48 r? clock_enable_input_b $end
$var parameter 48 s? clock_enable_output_b $end
$var parameter 120 t? clock_enable_core_a $end
$var parameter 120 u? clock_enable_core_b $end
$var parameter 160 v? read_during_write_mode_port_a $end
$var parameter 160 w? read_during_write_mode_port_b $end
$var parameter 40 x? enable_ecc $end
$var parameter 32 y? width_eccstatus $end
$var parameter 40 z? ecc_pipeline_stage_enabled $end
$var parameter 88 {? operation_mode $end
$var parameter 32 |? byte_size $end
$var parameter 72 }? read_during_write_mode_mixed_ports $end
$var parameter 32 ~? ram_block_type $end
$var parameter 232 !@ init_file $end
$var parameter 48 "@ init_file_layout $end
$var parameter 32 #@ maximum_depth $end
$var parameter 96 $@ intended_device_family $end
$var parameter 312 %@ lpm_hint $end
$var parameter 80 &@ lpm_type $end
$var parameter 24 '@ implement_in_les $end
$var parameter 40 (@ power_up_uninitialized $end
$var parameter 24 )@ sim_show_memory_data_in_port_b_layout $end
$var parameter 32 *@ is_lutram $end
$var parameter 32 +@ is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 ,@ is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 -@ check_simultaneous_read_write $end
$var parameter 32 .@ dual_port_addreg_b_clk0 $end
$var parameter 32 /@ dual_port_addreg_b_clk1 $end
$var parameter 32 0@ i_byte_size_tmp $end
$var parameter 32 1@ i_lutram_read $end
$var parameter 32 2@ enable_mem_data_b_reading $end
$var parameter 32 3@ family_arriav $end
$var parameter 32 4@ family_cyclonev $end
$var parameter 32 5@ family_base_arriav $end
$var parameter 32 6@ family_arria10 $end
$var parameter 32 7@ family_stratix10 $end
$var parameter 32 8@ family_arriavi $end
$var parameter 32 9@ family_nightfury $end
$var parameter 32 :@ family_arriavgz $end
$var parameter 32 ;@ family_stratixv $end
$var parameter 32 <@ family_hardcopyiv $end
$var parameter 32 =@ family_hardcopyiii $end
$var parameter 32 >@ family_hardcopyii $end
$var parameter 32 ?@ family_arriaiigz $end
$var parameter 32 @@ family_arriaiigx $end
$var parameter 32 A@ family_stratixiii $end
$var parameter 32 B@ family_zippleback $end
$var parameter 32 C@ family_cycloneiii $end
$var parameter 32 D@ family_cyclone $end
$var parameter 32 E@ family_base_cycloneii $end
$var parameter 32 F@ family_cycloneii $end
$var parameter 32 G@ family_base_stratix $end
$var parameter 32 H@ family_base_stratixii $end
$var parameter 32 I@ family_has_lutram $end
$var parameter 32 J@ family_has_stratixv_style_ram $end
$var parameter 32 K@ family_has_stratixiii_style_ram $end
$var parameter 32 L@ family_has_m512 $end
$var parameter 32 M@ family_has_megaram $end
$var parameter 32 N@ family_has_stratixi_style_ram $end
$var parameter 32 O@ is_write_on_positive_edge $end
$var parameter 32 P@ lutram_single_port_fast_read $end
$var parameter 32 Q@ lutram_dual_port_fast_read $end
$var parameter 32 R@ s3_address_aclr_a $end
$var parameter 32 S@ s3_address_aclr_b $end
$var parameter 32 T@ i_address_aclr_family_a $end
$var parameter 32 U@ i_address_aclr_family_b $end
$var tri0 1 ]> wren_a $end
$var tri0 1 B? wren_b $end
$var tri1 1 C? rden_a $end
$var tri1 1 D? rden_b $end
$var wire 1 U> data_a [7] $end
$var wire 1 V> data_a [6] $end
$var wire 1 W> data_a [5] $end
$var wire 1 X> data_a [4] $end
$var wire 1 Y> data_a [3] $end
$var wire 1 Z> data_a [2] $end
$var wire 1 [> data_a [1] $end
$var wire 1 \> data_a [0] $end
$var wire 1 E? data_b [0] $end
$var wire 1 I> address_a [11] $end
$var wire 1 J> address_a [10] $end
$var wire 1 K> address_a [9] $end
$var wire 1 L> address_a [8] $end
$var wire 1 M> address_a [7] $end
$var wire 1 N> address_a [6] $end
$var wire 1 O> address_a [5] $end
$var wire 1 P> address_a [4] $end
$var wire 1 Q> address_a [3] $end
$var wire 1 R> address_a [2] $end
$var wire 1 S> address_a [1] $end
$var wire 1 T> address_a [0] $end
$var wire 1 F? address_b [0] $end
$var tri1 1 4 clock0 $end
$var wire 1 G? clock1 $end
$var tri1 1 H? clocken0 $end
$var tri1 1 I? clocken1 $end
$var tri1 1 J? clocken2 $end
$var tri1 1 K? clocken3 $end
$var tri0 1 L? aclr0 $end
$var tri0 1 M? aclr1 $end
$var wire 1 N? byteena_a [0] $end
$var wire 1 O? byteena_b [0] $end
$var tri0 1 P? addressstall_a $end
$var tri0 1 Q? addressstall_b $end
$var wire 1 f> q_a [7] $end
$var wire 1 g> q_a [6] $end
$var wire 1 h> q_a [5] $end
$var wire 1 i> q_a [4] $end
$var wire 1 j> q_a [3] $end
$var wire 1 k> q_a [2] $end
$var wire 1 l> q_a [1] $end
$var wire 1 m> q_a [0] $end
$var wire 1 R? q_b [0] $end
$var wire 1 S? eccstatus [2] $end
$var wire 1 T? eccstatus [1] $end
$var wire 1 U? eccstatus [0] $end
$var reg 8 V@ i_data_reg_a [7:0] $end
$var reg 8 W@ temp_wa [7:0] $end
$var reg 8 X@ temp_wa2 [7:0] $end
$var reg 8 Y@ temp_wa2b [7:0] $end
$var reg 8 Z@ init_temp [7:0] $end
$var reg 1 [@ i_data_reg_b [0:0] $end
$var reg 1 \@ temp_wb [0:0] $end
$var reg 1 ]@ temp_wb2 [0:0] $end
$var reg 1 ^@ temp $end
$var reg 8 _@ i_q_reg_a [7:0] $end
$var reg 8 `@ i_q_tmp_a [7:0] $end
$var reg 8 a@ i_q_tmp2_a [7:0] $end
$var reg 1 b@ i_q_reg_b [0:0] $end
$var reg 1 c@ i_q_tmp_b [0:0] $end
$var reg 1 d@ i_q_tmp2_b [0:0] $end
$var reg 1 e@ i_q_output_latch [0:0] $end
$var reg 8 f@ i_byteena_mask_reg_a [7:0] $end
$var reg 1 g@ i_byteena_mask_reg_b [0:0] $end
$var reg 12 h@ i_address_reg_a [11:0] $end
$var reg 1 i@ i_address_reg_b [0:0] $end
$var reg 1 j@ i_q_ecc_reg_b [0:0] $end
$var reg 1 k@ i_q_ecc_tmp_b [0:0] $end
$var reg 12 l@ i_original_address_a [11:0] $end
$var reg 8 m@ i_byteena_mask_reg_a_tmp [7:0] $end
$var reg 1 n@ i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 8 o@ i_byteena_mask_reg_a_out [7:0] $end
$var reg 1 p@ i_byteena_mask_reg_b_out [0:0] $end
$var reg 8 q@ i_byteena_mask_reg_a_x [7:0] $end
$var reg 1 r@ i_byteena_mask_reg_b_x [0:0] $end
$var reg 8 s@ i_byteena_mask_reg_a_out_b [7:0] $end
$var reg 1 t@ i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 u@ ram_initf [2048:1] $end
$var reg 1 v@ i_wren_reg_a $end
$var reg 1 w@ i_wren_reg_b $end
$var reg 1 x@ i_rden_reg_a $end
$var reg 1 y@ i_rden_reg_b $end
$var reg 1 z@ i_read_flag_a $end
$var reg 1 {@ i_read_flag_b $end
$var reg 1 |@ i_write_flag_a $end
$var reg 1 }@ i_write_flag_b $end
$var reg 1 ~@ good_to_go_a $end
$var reg 1 !A good_to_go_b $end
$var reg 32 "A file_desc [31:0] $end
$var reg 1 #A init_file_b_port $end
$var reg 1 $A i_nmram_write_a $end
$var reg 1 %A i_nmram_write_b $end
$var reg 8 &A wa_mult_x [7:0] $end
$var reg 8 'A wa_mult_x_ii [7:0] $end
$var reg 8 (A wa_mult_x_iii [7:0] $end
$var reg 20 )A add_reg_a_mult_wa [19:0] $end
$var reg 2 *A add_reg_b_mult_wb [1:0] $end
$var reg 20 +A add_reg_a_mult_wa_pl_wa [19:0] $end
$var reg 2 ,A add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 -A same_clock_pulse0 $end
$var reg 1 .A same_clock_pulse1 $end
$var reg 1 /A i_original_data_b [0:0] $end
$var reg 8 0A i_original_data_a [7:0] $end
$var reg 1 1A i_address_aclr_a_flag $end
$var reg 1 2A i_address_aclr_a_prev $end
$var reg 1 3A i_address_aclr_b_flag $end
$var reg 1 4A i_address_aclr_b_prev $end
$var reg 1 5A i_outdata_aclr_a_prev $end
$var reg 1 6A i_outdata_aclr_b_prev $end
$var reg 1 7A i_force_reread_a $end
$var reg 1 8A i_force_reread_a1 $end
$var reg 1 9A i_force_reread_b $end
$var reg 1 :A i_force_reread_b1 $end
$var reg 1 ;A i_force_reread_a_signal $end
$var reg 1 <A i_force_reread_b_signal $end
$var reg 169 =A cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 >A i_ram_block_type [56:0] $end
$var integer 32 ?A i_byte_size $end
$var wire 1 @A i_good_to_write_a $end
$var wire 1 AA i_good_to_write_b $end
$var reg 1 BA i_good_to_write_a2 $end
$var reg 1 CA i_good_to_write_b2 $end
$var reg 1 DA i_core_clocken_a_reg $end
$var reg 1 EA i_core_clocken0_b_reg $end
$var reg 1 FA i_core_clocken1_b_reg $end
$var wire 1 GA i_indata_aclr_a $end
$var wire 1 HA i_address_aclr_a $end
$var wire 1 IA i_wrcontrol_aclr_a $end
$var wire 1 JA i_indata_aclr_b $end
$var wire 1 KA i_address_aclr_b $end
$var wire 1 LA i_wrcontrol_aclr_b $end
$var wire 1 MA i_outdata_aclr_a $end
$var wire 1 NA i_outdata_aclr_b $end
$var wire 1 OA i_rdcontrol_aclr_b $end
$var wire 1 PA i_byteena_aclr_a $end
$var wire 1 QA i_byteena_aclr_b $end
$var wire 1 RA i_outdata_clken_a $end
$var wire 1 SA i_outdata_clken_b $end
$var wire 1 TA i_outlatch_clken_a $end
$var wire 1 UA i_outlatch_clken_b $end
$var wire 1 VA i_clocken0 $end
$var wire 1 WA i_clocken1_b $end
$var wire 1 XA i_clocken0_b $end
$var wire 1 YA i_core_clocken_a $end
$var wire 1 ZA i_core_clocken_b $end
$var wire 1 [A i_core_clocken0_b $end
$var wire 1 \A i_core_clocken1_b $end
$var tri1 1 ]A i_byteena_a [0] $end
$var tri1 1 ^A i_byteena_b [0] $end
$var integer 32 _A i_numwords_a $end
$var integer 32 `A i_numwords_b $end
$var integer 32 aA i_aclr_flag_a $end
$var integer 32 bA i_aclr_flag_b $end
$var integer 32 cA i_q_tmp2_a_idx $end
$var integer 32 dA init_i $end
$var integer 32 eA i $end
$var integer 32 fA i2 $end
$var integer 32 gA i3 $end
$var integer 32 hA i4 $end
$var integer 32 iA i5 $end
$var integer 32 jA j $end
$var integer 32 kA j2 $end
$var integer 32 lA j3 $end
$var integer 32 mA k $end
$var integer 32 nA k2 $end
$var integer 32 oA k3 $end
$var integer 32 pA k4 $end
$var integer 32 qA i_div_wa $end
$var integer 32 rA i_div_wb $end
$var integer 32 sA j_plus_i2 $end
$var integer 32 tA j2_plus_i5 $end
$var integer 32 uA j3_plus_i5 $end
$var integer 32 vA j_plus_i2_div_a $end
$var integer 32 wA j2_plus_i5_div_a $end
$var integer 32 xA j3_plus_i5_div_a $end
$var integer 32 yA j3_plus_i5_div_b $end
$var integer 32 zA i_byteena_count $end
$var integer 32 {A port_a_bit_count_low $end
$var integer 32 |A port_a_bit_count_high $end
$var integer 32 }A port_b_bit_count_low $end
$var integer 32 ~A port_b_bit_count_high $end
$var time 64 !B i_data_write_time_a $end
$var time 64 "B i_data_write_time_b $end

$scope begin genblk4 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk1 $end
$upscope $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 #B IS_FAMILY_ARRIA10 $end
$var reg 160 $B device [160:1] $end
$var reg 1 %B is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 &B IS_FAMILY_ARRIAGX $end
$var reg 160 'B device [160:1] $end
$var reg 1 (B is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 )B IS_FAMILY_ARRIAIIGX $end
$var reg 160 *B device [160:1] $end
$var reg 1 +B is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 ,B IS_FAMILY_ARRIAIIGZ $end
$var reg 160 -B device [160:1] $end
$var reg 1 .B is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 /B IS_FAMILY_ARRIAVGZ $end
$var reg 160 0B device [160:1] $end
$var reg 1 1B is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 2B IS_FAMILY_ARRIAV $end
$var reg 160 3B device [160:1] $end
$var reg 1 4B is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 5B IS_FAMILY_CYCLONE10LP $end
$var reg 160 6B device [160:1] $end
$var reg 1 7B is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 8B IS_FAMILY_CYCLONEII $end
$var reg 160 9B device [160:1] $end
$var reg 1 :B is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 ;B IS_FAMILY_CYCLONEIIILS $end
$var reg 160 <B device [160:1] $end
$var reg 1 =B is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 >B IS_FAMILY_CYCLONEIII $end
$var reg 160 ?B device [160:1] $end
$var reg 1 @B is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 AB IS_FAMILY_CYCLONEIVE $end
$var reg 160 BB device [160:1] $end
$var reg 1 CB is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 DB IS_FAMILY_CYCLONEIVGX $end
$var reg 160 EB device [160:1] $end
$var reg 1 FB is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 GB IS_FAMILY_CYCLONEV $end
$var reg 160 HB device [160:1] $end
$var reg 1 IB is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 JB IS_FAMILY_CYCLONE $end
$var reg 160 KB device [160:1] $end
$var reg 1 LB is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 MB IS_FAMILY_HARDCOPYII $end
$var reg 160 NB device [160:1] $end
$var reg 1 OB is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 PB IS_FAMILY_HARDCOPYIII $end
$var reg 160 QB device [160:1] $end
$var reg 1 RB is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 SB IS_FAMILY_HARDCOPYIV $end
$var reg 160 TB device [160:1] $end
$var reg 1 UB is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 VB IS_FAMILY_MAX10 $end
$var reg 160 WB device [160:1] $end
$var reg 1 XB is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 YB IS_FAMILY_MAXII $end
$var reg 160 ZB device [160:1] $end
$var reg 1 [B is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 \B IS_FAMILY_MAXV $end
$var reg 160 ]B device [160:1] $end
$var reg 1 ^B is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 _B IS_FAMILY_STRATIX10 $end
$var reg 160 `B device [160:1] $end
$var reg 1 aB is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 bB IS_FAMILY_STRATIXGX $end
$var reg 160 cB device [160:1] $end
$var reg 1 dB is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 eB IS_FAMILY_STRATIXIIGX $end
$var reg 160 fB device [160:1] $end
$var reg 1 gB is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 hB IS_FAMILY_STRATIXII $end
$var reg 160 iB device [160:1] $end
$var reg 1 jB is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 kB IS_FAMILY_STRATIXIII $end
$var reg 160 lB device [160:1] $end
$var reg 1 mB is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 nB IS_FAMILY_STRATIXIV $end
$var reg 160 oB device [160:1] $end
$var reg 1 pB is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 qB IS_FAMILY_STRATIXV $end
$var reg 160 rB device [160:1] $end
$var reg 1 sB is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 tB IS_FAMILY_STRATIX $end
$var reg 160 uB device [160:1] $end
$var reg 1 vB is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 wB FEATURE_FAMILY_STRATIXGX $end
$var reg 160 xB device [160:1] $end
$var reg 1 yB var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 zB FEATURE_FAMILY_CYCLONE $end
$var reg 160 {B device [160:1] $end
$var reg 1 |B var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 }B FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 ~B device [160:1] $end
$var reg 1 !C var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 "C FEATURE_FAMILY_STRATIXIII $end
$var reg 160 #C device [160:1] $end
$var reg 1 $C var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 %C FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 &C device [160:1] $end
$var reg 1 'C var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 (C FEATURE_FAMILY_STRATIXV $end
$var reg 160 )C device [160:1] $end
$var reg 1 *C var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 +C FEATURE_FAMILY_ARRIA10 $end
$var reg 160 ,C device [160:1] $end
$var reg 1 -C var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 .C FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 /C device [160:1] $end
$var reg 1 0C var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 1C FEATURE_FAMILY_STRATIXII $end
$var reg 160 2C device [160:1] $end
$var reg 1 3C var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 4C FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 5C device [160:1] $end
$var reg 1 6C var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 7C FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 8C device [160:1] $end
$var reg 1 9C var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 :C FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 ;C device [160:1] $end
$var reg 1 <C var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 =C FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 >C device [160:1] $end
$var reg 1 ?C var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 @C FEATURE_FAMILY_STRATIX $end
$var reg 160 AC device [160:1] $end
$var reg 1 BC var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 CC FEATURE_FAMILY_MAXII $end
$var reg 160 DC device [160:1] $end
$var reg 1 EC var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 FC FEATURE_FAMILY_MAXV $end
$var reg 160 GC device [160:1] $end
$var reg 1 HC var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 IC FEATURE_FAMILY_CYCLONEII $end
$var reg 160 JC device [160:1] $end
$var reg 1 KC var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 LC FEATURE_FAMILY_STRATIXIV $end
$var reg 160 MC device [160:1] $end
$var reg 1 NC var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 OC FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 PC device [160:1] $end
$var reg 1 QC var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 RC FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 SC device [160:1] $end
$var reg 1 TC var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 UC FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 VC device [160:1] $end
$var reg 1 WC var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 XC FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 YC device [160:1] $end
$var reg 1 ZC var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 [C FEATURE_FAMILY_CYCLONEV $end
$var reg 160 \C device [160:1] $end
$var reg 1 ]C var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 ^C FEATURE_FAMILY_ARRIAV $end
$var reg 160 _C device [160:1] $end
$var reg 1 `C var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 aC FEATURE_FAMILY_MAX10 $end
$var reg 160 bC device [160:1] $end
$var reg 1 cC var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 dC FEATURE_FAMILY_STRATIX10 $end
$var reg 160 eC device [160:1] $end
$var reg 1 fC var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 gC FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 hC device [160:1] $end
$var reg 1 iC var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 jC FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 kC device [160:1] $end
$var reg 1 lC var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 mC FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 nC device [160:1] $end
$var reg 1 oC var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 pC FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 qC device [160:1] $end
$var reg 1 rC var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 sC FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 tC device [160:1] $end
$var reg 1 uC var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 vC FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 wC device [160:1] $end
$var reg 1 xC var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 yC FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 zC device [160:1] $end
$var reg 1 {C var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 |C FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 }C device [160:1] $end
$var reg 1 ~C var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 !D FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 "D device [160:1] $end
$var reg 1 #D var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 $D FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 %D device [160:1] $end
$var reg 1 &D var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 'D FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 (D device [160:1] $end
$var reg 1 )D var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 *D IS_VALID_FAMILY $end
$var reg 160 +D device [160:1] $end
$var reg 1 ,D is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 -D tolower [8:1] $end
$var reg 8 .D given_character [8:1] $end
$var reg 8 /D conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 0D ecc_parity [7:0] $end
$var reg 8 1D i_eccencparity [7:0] $end
$var integer 32 2D pointer $end
$var integer 32 3D pointer_max $end
$var integer 32 4D pointer_min $end
$var integer 32 5D flag_err $end
$var integer 32 6D flag $end
$var integer 32 7D flag_double $end
$var integer 32 8D flag_triple $end
$var integer 32 9D flag_single $end
$var integer 32 :D flag_no_err $end
$var integer 32 ;D flag_uncorr $end
$var integer 32 <D n $end
$var integer 32 =D err $end
$var integer 32 >D found $end
$var integer 32 ?D found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 @D in_file [2048:1] $end
$var integer 32 AD width $end
$var reg 2048 BD out_file [2048:1] $end
$var reg 2048 CD buffer [2048:1] $end
$var reg 1025 DD memory_data1 [1024:0] $end
$var reg 1025 ED memory_data2 [1024:0] $end
$var reg 8 FD c [8:1] $end
$var reg 4 GD hex [3:0] $end
$var reg 4 HD tmp_char [3:0] $end
$var reg 24 ID address_radix [24:1] $end
$var reg 24 JD data_radix [24:1] $end
$var reg 1 KD get_width $end
$var reg 1 LD get_depth $end
$var reg 1 MD get_data_radix $end
$var reg 1 ND get_address_radix $end
$var reg 1 OD width_found $end
$var reg 1 PD depth_found $end
$var reg 1 QD data_radix_found $end
$var reg 1 RD address_radix_found $end
$var reg 1 SD get_address_data_pairs $end
$var reg 1 TD get_address $end
$var reg 1 UD get_data $end
$var reg 1 VD display_address $end
$var reg 1 WD invalid_address $end
$var reg 1 XD get_start_address $end
$var reg 1 YD get_end_address $end
$var reg 1 ZD done $end
$var reg 1 [D error_status $end
$var reg 1 \D first_rec $end
$var reg 1 ]D last_rec $end
$var integer 32 ^D memory_width $end
$var integer 32 _D memory_depth $end
$var integer 32 `D value $end
$var integer 32 aD ifp $end
$var integer 32 bD ofp $end
$var integer 32 cD r $end
$var integer 32 dD r2 $end
$var integer 32 eD i $end
$var integer 32 fD j $end
$var integer 32 gD k $end
$var integer 32 hD m $end
$var integer 32 iD n $end
$var integer 32 jD negative $end
$var integer 32 kD off_addr $end
$var integer 32 lD nn $end
$var integer 32 mD address $end
$var integer 32 nD tt $end
$var integer 32 oD cc $end
$var integer 32 pD aah $end
$var integer 32 qD aal $end
$var integer 32 rD dd $end
$var integer 32 sD sum $end
$var integer 32 tD start_address $end
$var integer 32 uD end_address $end
$var integer 32 vD line_no $end
$var integer 32 wD character_count $end
$var integer 32 xD comment_with_percent_found $end
$var integer 32 yD comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 zD in_file [2048:1] $end
$var integer 32 {D width $end
$var reg 2048 |D out_file [2048:1] $end
$var reg 8 }D c [8:1] $end
$var reg 4 ~D hex [3:0] $end
$var reg 4 !E tmp_char [3:0] $end
$var reg 1 "E done $end
$var reg 1 #E error_status $end
$var reg 1 $E first_rec $end
$var reg 1 %E last_rec $end
$var reg 1 &E first_normal_record $end
$var reg 1 'E is_word_address_format $end
$var integer 32 (E ifp $end
$var integer 32 )E ofp $end
$var integer 32 *E r $end
$var integer 32 +E r2 $end
$var integer 32 ,E i $end
$var integer 32 -E j $end
$var integer 32 .E k $end
$var integer 32 /E m $end
$var integer 32 0E n $end
$var integer 32 1E off_addr $end
$var integer 32 2E nn $end
$var integer 32 3E aaaa $end
$var integer 32 4E aaaa_pre $end
$var integer 32 5E tt $end
$var integer 32 6E cc $end
$var integer 32 7E aah $end
$var integer 32 8E aal $end
$var integer 32 9E dd $end
$var integer 32 :E sum $end
$var integer 32 ;E line_no $end
$var integer 32 <E divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 =E in_file [2048:1] $end
$var integer 32 >E width $end
$var reg 2048 ?E out_file [2048:1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module arb $end
$var parameter 32 @E bus_priority $end
$var wire 1 4 clk $end
$var wire 1 5 rstn $end
$var wire 1 AE m1_mode $end
$var reg 1 BE m1_rd_bus $end
$var wire 1 CE m1_wr_bus $end
$var reg 1 DE m1_ack $end
$var wire 1 EE m1_master_valid $end
$var reg 1 FE m1_slave_ready $end
$var wire 1 GE m1_master_ready $end
$var reg 1 HE m1_slave_valid $end
$var wire 1 IE m1_breq $end
$var reg 1 JE m1_bgrant $end
$var wire 1 KE m2_mode $end
$var reg 1 LE m2_rd_bus $end
$var wire 1 ME m2_wr_bus $end
$var reg 1 NE m2_ack $end
$var wire 1 OE m2_master_valid $end
$var reg 1 PE m2_slave_ready $end
$var wire 1 QE m2_master_ready $end
$var reg 1 RE m2_slave_valid $end
$var wire 1 SE m2_breq $end
$var reg 1 TE m2_bgrant $end
$var reg 1 UE s1_mode $end
$var reg 1 VE s1_wr_bus $end
$var reg 1 WE s1_master_valid $end
$var reg 1 XE s1_master_ready $end
$var wire 1 YE s1_rd_bus $end
$var wire 1 ZE s1_slave_ready $end
$var wire 1 [E s1_slave_valid $end
$var reg 1 \E s2_mode $end
$var reg 1 ]E s2_wr_bus $end
$var reg 1 ^E s2_master_valid $end
$var reg 1 _E s2_master_ready $end
$var wire 1 `E s2_rd_bus $end
$var wire 1 aE s2_slave_ready $end
$var wire 1 bE s2_slave_valid $end
$var reg 1 cE s3_mode $end
$var reg 1 dE s3_wr_bus $end
$var reg 1 eE s3_master_valid $end
$var reg 1 fE s3_master_ready $end
$var wire 1 gE s3_rd_bus $end
$var wire 1 hE s3_slave_ready $end
$var wire 1 iE s3_slave_valid $end
$var reg 1 jE bb_mode $end
$var reg 1 kE bb_wr_bus $end
$var reg 1 lE bb_master_valid $end
$var reg 1 mE bb_master_ready $end
$var wire 1 nE bb_rd_bus $end
$var wire 1 oE bb_slave_ready $end
$var wire 1 pE bb_slave_valid $end
$var wire 1 qE slave_split $end
$var reg 1 rE m1_split $end
$var reg 1 sE m2_split $end
$var reg 3 tE state [2:0] $end
$var reg 3 uE next_state [2:0] $end
$var reg 2 vE slave [1:0] $end
$var reg 2 wE split_owner [1:0] $end
$var reg 5 xE t_addr [4:0] $end
$var reg 5 yE t_count [4:0] $end
$var reg 1 zE t_slave_ready $end
$var reg 1 {E bus_owner $end
$var reg 1 |E mode $end
$var reg 1 }E rd_bus $end
$var reg 1 ~E wr_bus $end
$var reg 1 !F ack $end
$var reg 1 "F master_valid $end
$var reg 1 #F slave_ready $end
$var reg 1 $F master_ready $end
$var reg 1 %F slave_valid $end
$var reg 1 &F breq $end

$scope begin NEXT_STATE_LOGIC $end
$upscope $end

$scope begin STATE_SEQUENCER $end
$upscope $end

$scope begin OUTPUT_LOGIC $end
$upscope $end

$scope begin REG_LOGIC $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx n9
b11111111 o9
b1 p9
b0 q9
b0 r9
bx s9
bx t9
b0 u9
bx v9
bx w9
b11111111 x9
b1 y9
b0 z9
b0 {9
bx |9
bx }9
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001000101110011101100110010101110010 ~9
0!:
0":
0#:
0$:
0%:
0&:
0':
0(:
0):
0*:
bx +:
0,:
0-:
0.:
b0 /:
bx 0:
bx 1:
bx 2:
bx 3:
bx 4:
bx 5:
06:
07:
b0 8:
b0 9:
x::
0;:
0<:
0=:
0>:
0?:
0@:
0A:
0B:
0C:
0D:
0E:
b100111101001100010001000101111101000100010000010101010001000001 F:
b1000001010101010101010001001111 G:
1K:
1L:
0M:
0N:
1O:
x,;
bx -;
x.;
x/;
bx 0;
x1;
x2;
bx 3;
x4;
x5;
bx 6;
x7;
x8;
bx 9;
x:;
x;;
bx <;
x=;
x>;
bx ?;
x@;
xA;
bx B;
xC;
xD;
bx E;
xF;
xG;
bx H;
xI;
xJ;
bx K;
xL;
xM;
bx N;
xO;
xP;
bx Q;
xR;
xS;
bx T;
xU;
xV;
bx W;
xX;
xY;
bx Z;
x[;
x\;
bx ];
x^;
x_;
bx `;
xa;
xb;
bx c;
xd;
xe;
bx f;
xg;
xh;
bx i;
xj;
xk;
bx l;
xm;
xn;
bx o;
xp;
xq;
bx r;
xs;
xt;
bx u;
xv;
xw;
bx x;
xy;
xz;
bx {;
x|;
x};
bx ~;
x!<
x"<
bx #<
x$<
x%<
bx &<
x'<
x(<
bx )<
x*<
x+<
bx ,<
x-<
x.<
bx /<
x0<
x1<
bx 2<
x3<
x4<
bx 5<
x6<
x7<
bx 8<
x9<
x:<
bx ;<
x<<
x=<
bx ><
x?<
x@<
bx A<
xB<
xC<
bx D<
xE<
xF<
bx G<
xH<
xI<
bx J<
xK<
xL<
bx M<
xN<
xO<
bx P<
xQ<
xR<
bx S<
xT<
xU<
bx V<
xW<
xX<
bx Y<
xZ<
x[<
bx \<
x]<
x^<
bx _<
x`<
xa<
bx b<
xc<
xd<
bx e<
xf<
xg<
bx h<
xi<
xj<
bx k<
xl<
xm<
bx n<
xo<
xp<
bx q<
xr<
xs<
bx t<
xu<
xv<
bx w<
xx<
xy<
bx z<
x{<
x|<
bx }<
x~<
x!=
bx "=
x#=
x$=
bx %=
x&=
x'=
bx (=
x)=
x*=
bx +=
x,=
x-=
bx .=
x/=
x0=
bx 1=
x2=
x3=
bx 4=
x5=
bx 6=
bx 7=
bx 8=
bx 9=
bx :=
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001000101110011011010110100101100110 I=
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001000101110011101100110010101110010 K=
b0 L=
b0 M=
b0 N=
b0 O=
b0 P=
bx Q=
b11010000110010101111000 R=
b11010000110010101111000 S=
0T=
0U=
0V=
0W=
0X=
0Y=
0Z=
0[=
0\=
x]=
x^=
0_=
0`=
0a=
0b=
1c=
0d=
0e=
0f=
bx %>
bx '>
bx (>
bx )>
bx *>
x+>
x,>
x->
x.>
x/>
x0>
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001000101110011011010110100101100110 F>
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001000101110011101100110010101110010 H>
b0 V@
bx W@
bx X@
bx Y@
bx Z@
b0 [@
bx \@
bx ]@
x^@
b0 _@
b0 `@
b0 a@
b0 b@
b0 c@
b0 d@
bx e@
b11111111 f@
b1 g@
b0 h@
b0 i@
bx j@
bx k@
b0 l@
bx m@
bx n@
b11111111 o@
b1 p@
b0 q@
b0 r@
bx s@
bx t@
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001100101110011101100110010101110010 u@
0v@
0w@
0x@
0y@
0z@
0{@
0|@
0}@
0~@
0!A
bx "A
0#A
0$A
0%A
b0 &A
bx 'A
bx (A
bx )A
bx *A
bx +A
bx ,A
0-A
0.A
b0 /A
b0 0A
x1A
02A
03A
04A
05A
06A
07A
08A
09A
0:A
0;A
0<A
b100111101001100010001000101111101000100010000010101010001000001 =A
b1000001010101010101010001001111 >A
1BA
1CA
0DA
0EA
1FA
x#B
bx $B
x%B
x&B
bx 'B
x(B
x)B
bx *B
x+B
x,B
bx -B
x.B
x/B
bx 0B
x1B
x2B
bx 3B
x4B
x5B
bx 6B
x7B
x8B
bx 9B
x:B
x;B
bx <B
x=B
x>B
bx ?B
x@B
xAB
bx BB
xCB
xDB
bx EB
xFB
xGB
bx HB
xIB
xJB
bx KB
xLB
xMB
bx NB
xOB
xPB
bx QB
xRB
xSB
bx TB
xUB
xVB
bx WB
xXB
xYB
bx ZB
x[B
x\B
bx ]B
x^B
x_B
bx `B
xaB
xbB
bx cB
xdB
xeB
bx fB
xgB
xhB
bx iB
xjB
xkB
bx lB
xmB
xnB
bx oB
xpB
xqB
bx rB
xsB
xtB
bx uB
xvB
xwB
bx xB
xyB
xzB
bx {B
x|B
x}B
bx ~B
x!C
x"C
bx #C
x$C
x%C
bx &C
x'C
x(C
bx )C
x*C
x+C
bx ,C
x-C
x.C
bx /C
x0C
x1C
bx 2C
x3C
x4C
bx 5C
x6C
x7C
bx 8C
x9C
x:C
bx ;C
x<C
x=C
bx >C
x?C
x@C
bx AC
xBC
xCC
bx DC
xEC
xFC
bx GC
xHC
xIC
bx JC
xKC
xLC
bx MC
xNC
xOC
bx PC
xQC
xRC
bx SC
xTC
xUC
bx VC
xWC
xXC
bx YC
xZC
x[C
bx \C
x]C
x^C
bx _C
x`C
xaC
bx bC
xcC
xdC
bx eC
xfC
xgC
bx hC
xiC
xjC
bx kC
xlC
xmC
bx nC
xoC
xpC
bx qC
xrC
xsC
bx tC
xuC
xvC
bx wC
xxC
xyC
bx zC
x{C
x|C
bx }C
x~C
x!D
bx "D
x#D
x$D
bx %D
x&D
x'D
bx (D
x)D
x*D
bx +D
x,D
bx -D
bx .D
bx /D
bx 0D
bx 1D
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001100101110011011010110100101100110 @D
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001100101110011101100110010101110010 BD
b0 CD
b0 DD
b0 ED
b0 FD
b0 GD
bx HD
b11010000110010101111000 ID
b11010000110010101111000 JD
0KD
0LD
0MD
0ND
0OD
0PD
0QD
0RD
0SD
xTD
xUD
0VD
0WD
0XD
0YD
1ZD
0[D
0\D
0]D
bx zD
bx |D
bx }D
bx ~D
bx !E
x"E
x#E
x$E
x%E
x&E
x'E
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001100101110011011010110100101100110 =E
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001100101110011101100110010101110010 ?E
xBE
0DE
0FE
xHE
xJE
0LE
0NE
0PE
0RE
xTE
xUE
xVE
0WE
0XE
0\E
0]E
0^E
0_E
0cE
0dE
0eE
0fE
0jE
0kE
0lE
0mE
xrE
xsE
b0 tE
b0 uE
b0 vE
bx wE
bx xE
bx yE
xzE
x{E
x|E
x}E
x~E
0!F
0"F
0#F
0$F
x%F
0&F
0!
0"
x#
x$
x%
x&
bx '
0(
0)
0*
x+
0,
0-
0.
x/
x0
01
x2
x3
0J
0K
0L
xM
0N
0O
0P
xQ
xR
0S
xT
xU
xV
xW
xX
0Y
0Z
0[
0\
x]
0^
x_
x`
b0 a
bx b
0c
xd
0e
xf
0g
0h
0i
0j
0k
0l
xm
xn
b0 o
bx p
0q
xr
xs
0t
0u
xv
xw
xx
b0 y
bx z
bx {
x|
0}
0~
0!!
0"!
x#!
x$!
x%!
x&!
b0 '!
bx (!
bx )!
x*!
0+!
0,!
0-!
0.!
x/!
x0!
x1!
b0 2!
bx 3!
bx 4!
x5!
06!
07!
08!
09!
x:!
x;!
x<!
x>!
x@!
0B!
0D!
0F!
bx Q!
0R!
b0 T!
b0x U!
bx V!
bx W!
bx X!
bx Y!
bx Z!
x[!
x]!
x_!
0a!
0c!
0e!
bx p!
0q!
b0 s!
b0x t!
bx u!
bx v!
bx w!
bx x!
bx y!
xz!
x)"
x*"
x+"
x,"
bx 5"
bx 6"
x7"
bx 8"
bx 9"
bx :"
x;"
x<"
bx ="
bx >"
b0 ?"
xL"
xM"
xN"
xO"
bx X"
bx Y"
xZ"
bx ["
bx \"
bx ]"
x^"
x_"
bx `"
bx a"
b0 b"
xo"
xp"
xq"
xr"
bx {"
bx |"
x}"
bx ~"
bx !#
bx "#
x##
x$#
bx %#
bx &#
b0 '#
b0 )%
bx *%
bx +%
bx ,%
bx -%
b0 .%
bx /%
bx 0%
x1%
b0 2%
b0 3%
b0 4%
b0 5%
b0 6%
b0 7%
bx 8%
b11111111 9%
b1 :%
b0 ;%
b0 <%
bx =%
bx >%
b0 ?%
bx @%
bx A%
b11111111 B%
b1 C%
b0 D%
b0 E%
bx F%
bx G%
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011000100101110011101100110010101110010 H%
0I%
0J%
0K%
0L%
0M%
0N%
0O%
0P%
0Q%
0R%
bx S%
0T%
0U%
0V%
b0 W%
bx X%
bx Y%
bx Z%
bx [%
bx \%
bx ]%
0^%
0_%
b0 `%
b0 a%
xb%
0c%
0d%
0e%
0f%
0g%
0h%
0i%
0j%
0k%
0l%
0m%
b100111101001100010001000101111101000100010000010101010001000001 n%
b1000001010101010101010001001111 o%
1s%
1t%
0u%
0v%
1w%
xT&
bx U&
xV&
xW&
bx X&
xY&
xZ&
bx [&
x\&
x]&
bx ^&
x_&
x`&
bx a&
xb&
xc&
bx d&
xe&
xf&
bx g&
xh&
xi&
bx j&
xk&
xl&
bx m&
xn&
xo&
bx p&
xq&
xr&
bx s&
xt&
xu&
bx v&
xw&
xx&
bx y&
xz&
x{&
bx |&
x}&
x~&
bx !'
x"'
x#'
bx $'
x%'
x&'
bx ''
x('
x)'
bx *'
x+'
x,'
bx -'
x.'
x/'
bx 0'
x1'
x2'
bx 3'
x4'
x5'
bx 6'
x7'
x8'
bx 9'
x:'
x;'
bx <'
x='
x>'
bx ?'
x@'
xA'
bx B'
xC'
xD'
bx E'
xF'
xG'
bx H'
xI'
xJ'
bx K'
xL'
xM'
bx N'
xO'
xP'
bx Q'
xR'
xS'
bx T'
xU'
xV'
bx W'
xX'
xY'
bx Z'
x['
x\'
bx ]'
x^'
x_'
bx `'
xa'
xb'
bx c'
xd'
xe'
bx f'
xg'
xh'
bx i'
xj'
xk'
bx l'
xm'
xn'
bx o'
xp'
xq'
bx r'
xs'
xt'
bx u'
xv'
xw'
bx x'
xy'
xz'
bx {'
x|'
x}'
bx ~'
x!(
x"(
bx #(
x$(
x%(
bx &(
x'(
x((
bx )(
x*(
x+(
bx ,(
x-(
x.(
bx /(
x0(
x1(
bx 2(
x3(
x4(
bx 5(
x6(
x7(
bx 8(
x9(
x:(
bx ;(
x<(
x=(
bx >(
x?(
x@(
bx A(
xB(
xC(
bx D(
xE(
xF(
bx G(
xH(
xI(
bx J(
xK(
xL(
bx M(
xN(
xO(
bx P(
xQ(
xR(
bx S(
xT(
xU(
bx V(
xW(
xX(
bx Y(
xZ(
x[(
bx \(
x](
bx ^(
bx _(
bx `(
bx a(
bx b(
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011000100101110011011010110100101100110 q(
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011000100101110011101100110010101110010 s(
b0 t(
b0 u(
b0 v(
b0 w(
b0 x(
bx y(
b11010000110010101111000 z(
b11010000110010101111000 {(
0|(
0}(
0~(
0!)
0")
0#)
0$)
0%)
0&)
x')
x()
0))
0*)
0+)
0,)
1-)
0.)
0/)
00)
bx M)
bx O)
bx P)
bx Q)
bx R)
xS)
xT)
xU)
xV)
xW)
xX)
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011000100101110011011010110100101100110 n)
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011000100101110011101100110010101110010 p)
b0 r+
bx s+
bx t+
bx u+
bx v+
b0 w+
bx x+
bx y+
xz+
b0 {+
b0 |+
b0 }+
b0 ~+
b0 !,
b0 ",
bx #,
b11111111 $,
b1 %,
b0 &,
b0 ',
bx (,
bx ),
b0 *,
bx +,
bx ,,
b11111111 -,
b1 .,
b0 /,
b0 0,
bx 1,
bx 2,
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011001000101110011101100110010101110010 3,
04,
05,
06,
07,
08,
09,
0:,
0;,
0<,
0=,
bx >,
0?,
0@,
0A,
b0 B,
bx C,
bx D,
bx E,
bx F,
bx G,
bx H,
0I,
0J,
b0 K,
b0 L,
xM,
0N,
0O,
0P,
0Q,
0R,
0S,
0T,
0U,
0V,
0W,
0X,
b100111101001100010001000101111101000100010000010101010001000001 Y,
b1000001010101010101010001001111 Z,
1^,
1_,
0`,
0a,
1b,
x?-
bx @-
xA-
xB-
bx C-
xD-
xE-
bx F-
xG-
xH-
bx I-
xJ-
xK-
bx L-
xM-
xN-
bx O-
xP-
xQ-
bx R-
xS-
xT-
bx U-
xV-
xW-
bx X-
xY-
xZ-
bx [-
x\-
x]-
bx ^-
x_-
x`-
bx a-
xb-
xc-
bx d-
xe-
xf-
bx g-
xh-
xi-
bx j-
xk-
xl-
bx m-
xn-
xo-
bx p-
xq-
xr-
bx s-
xt-
xu-
bx v-
xw-
xx-
bx y-
xz-
x{-
bx |-
x}-
x~-
bx !.
x".
x#.
bx $.
x%.
x&.
bx '.
x(.
x).
bx *.
x+.
x,.
bx -.
x..
x/.
bx 0.
x1.
x2.
bx 3.
x4.
x5.
bx 6.
x7.
x8.
bx 9.
x:.
x;.
bx <.
x=.
x>.
bx ?.
x@.
xA.
bx B.
xC.
xD.
bx E.
xF.
xG.
bx H.
xI.
xJ.
bx K.
xL.
xM.
bx N.
xO.
xP.
bx Q.
xR.
xS.
bx T.
xU.
xV.
bx W.
xX.
xY.
bx Z.
x[.
x\.
bx ].
x^.
x_.
bx `.
xa.
xb.
bx c.
xd.
xe.
bx f.
xg.
xh.
bx i.
xj.
xk.
bx l.
xm.
xn.
bx o.
xp.
xq.
bx r.
xs.
xt.
bx u.
xv.
xw.
bx x.
xy.
xz.
bx {.
x|.
x}.
bx ~.
x!/
x"/
bx #/
x$/
x%/
bx &/
x'/
x(/
bx )/
x*/
x+/
bx ,/
x-/
x./
bx //
x0/
x1/
bx 2/
x3/
x4/
bx 5/
x6/
x7/
bx 8/
x9/
x:/
bx ;/
x</
x=/
bx >/
x?/
x@/
bx A/
xB/
xC/
bx D/
xE/
xF/
bx G/
xH/
bx I/
bx J/
bx K/
bx L/
bx M/
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011001000101110011011010110100101100110 \/
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011001000101110011101100110010101110010 ^/
b0 _/
b0 `/
b0 a/
b0 b/
b0 c/
bx d/
b11010000110010101111000 e/
b11010000110010101111000 f/
0g/
0h/
0i/
0j/
0k/
0l/
0m/
0n/
0o/
xp/
xq/
0r/
0s/
0t/
0u/
1v/
0w/
0x/
0y/
bx 80
bx :0
bx ;0
bx <0
bx =0
x>0
x?0
x@0
xA0
xB0
xC0
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011001000101110011011010110100101100110 Y0
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011001000101110011101100110010101110010 [0
b0 h2
bx i2
bx j2
bx k2
bx l2
b0 m2
bx n2
bx o2
xp2
b0 q2
b0 r2
b0 s2
b0 t2
b0 u2
b0 v2
bx w2
b11111111 x2
b1 y2
b0 z2
b0 {2
bx |2
bx }2
b0 ~2
bx !3
bx "3
b11111111 #3
b1 $3
b0 %3
b0 &3
bx '3
bx (3
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011000100101110011101100110010101110010 )3
0*3
0+3
0,3
0-3
0.3
0/3
003
013
023
033
bx 43
053
063
073
b0 83
bx 93
bx :3
bx ;3
bx <3
bx =3
bx >3
0?3
0@3
b0 A3
b0 B3
xC3
0D3
0E3
0F3
0G3
0H3
0I3
0J3
0K3
0L3
0M3
0N3
b100111101001100010001000101111101000100010000010101010001000001 O3
b1000001010101010101010001001111 P3
1T3
1U3
0V3
0W3
1X3
x54
bx 64
x74
x84
bx 94
x:4
x;4
bx <4
x=4
x>4
bx ?4
x@4
xA4
bx B4
xC4
xD4
bx E4
xF4
xG4
bx H4
xI4
xJ4
bx K4
xL4
xM4
bx N4
xO4
xP4
bx Q4
xR4
xS4
bx T4
xU4
xV4
bx W4
xX4
xY4
bx Z4
x[4
x\4
bx ]4
x^4
x_4
bx `4
xa4
xb4
bx c4
xd4
xe4
bx f4
xg4
xh4
bx i4
xj4
xk4
bx l4
xm4
xn4
bx o4
xp4
xq4
bx r4
xs4
xt4
bx u4
xv4
xw4
bx x4
xy4
xz4
bx {4
x|4
x}4
bx ~4
x!5
x"5
bx #5
x$5
x%5
bx &5
x'5
x(5
bx )5
x*5
x+5
bx ,5
x-5
x.5
bx /5
x05
x15
bx 25
x35
x45
bx 55
x65
x75
bx 85
x95
x:5
bx ;5
x<5
x=5
bx >5
x?5
x@5
bx A5
xB5
xC5
bx D5
xE5
xF5
bx G5
xH5
xI5
bx J5
xK5
xL5
bx M5
xN5
xO5
bx P5
xQ5
xR5
bx S5
xT5
xU5
bx V5
xW5
xX5
bx Y5
xZ5
x[5
bx \5
x]5
x^5
bx _5
x`5
xa5
bx b5
xc5
xd5
bx e5
xf5
xg5
bx h5
xi5
xj5
bx k5
xl5
xm5
bx n5
xo5
xp5
bx q5
xr5
xs5
bx t5
xu5
xv5
bx w5
xx5
xy5
bx z5
x{5
x|5
bx }5
x~5
x!6
bx "6
x#6
x$6
bx %6
x&6
x'6
bx (6
x)6
x*6
bx +6
x,6
x-6
bx .6
x/6
x06
bx 16
x26
x36
bx 46
x56
x66
bx 76
x86
x96
bx :6
x;6
x<6
bx =6
x>6
bx ?6
bx @6
bx A6
bx B6
bx C6
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011000100101110011011010110100101100110 R6
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011000100101110011101100110010101110010 T6
b0 U6
b0 V6
b0 W6
b0 X6
b0 Y6
bx Z6
b11010000110010101111000 [6
b11010000110010101111000 \6
0]6
0^6
0_6
0`6
0a6
0b6
0c6
0d6
0e6
xf6
xg6
0h6
0i6
0j6
0k6
1l6
0m6
0n6
0o6
bx .7
bx 07
bx 17
bx 27
bx 37
x47
x57
x67
x77
x87
x97
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011000100101110011011010110100101100110 O7
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011000100101110011101100110010101110010 Q7
b0 _9
bx `9
bx a9
bx b9
bx c9
b0 d9
bx e9
bx f9
xg9
b0 h9
b0 i9
b0 j9
b0 k9
b0 l9
b0 m9
b1000000 =!
b1000000 \!
b1011 {!
b1000 |!
b100 }!
b0 ~!
b101 !"
b111 ""
b11 #"
b10 $"
b1100 @"
b1000 A"
b100 B"
b1 C"
b101 D"
b111 E"
b11 F"
b10 G"
b1100 c"
b1000 d"
b100 e"
b0 f"
b101 g"
b111 h"
b11 i"
b10 j"
b1000 A#
b101 B#
b100000 C#
b1 J#
b1 K#
b1 L#
b0 M#
b1 Z#
b11 d#
b0 g#
b0 l#
b0 r#
b1000 )$
b101 *$
b100000 +$
b1 2$
b1 3$
b1 4$
b0 5$
b1 B$
b11 L$
b0 O$
b0 T$
b0 [$
b0 \$
b0 ]$
b0 ^$
b0 _$
b0 `$
b1000 a$
b0 b$
b0 c$
b0 d$
b0 e$
b0 f$
b0 g$
b0 h$
b0 i$
b0 j$
b0 k$
b0 l$
b0 m$
b0 n$
b0 o$
b0 p$
b0 q$
b0 r$
b0 s$
b1 t$
b0 u$
b0 v$
b1 w$
b0 x$
b0 y$
b0 z$
b0 {$
b1 |$
b0 }$
b0 ~$
b0 !%
b1 "%
b0 #%
b0 $%
b0 %%
b0 &%
b1 '%
b1 (%
b1000 ,*
b101 -*
b100000 .*
b1 5*
b1 6*
b1 7*
b0 8*
b1 E*
b11 O*
b0 R*
b0 W*
b0 ]*
b1000 r*
b101 s*
b100000 t*
b1 {*
b1 |*
b1 }*
b0 ~*
b1 -+
b11 7+
b0 :+
b0 ?+
b0 F+
b0 G+
b0 H+
b0 I+
b0 J+
b0 K+
b1000 L+
b0 M+
b0 N+
b0 O+
b0 P+
b0 Q+
b0 R+
b0 S+
b0 T+
b0 U+
b0 V+
b0 W+
b0 X+
b0 Y+
b0 Z+
b0 [+
b0 \+
b0 ]+
b0 ^+
b1 _+
b0 `+
b0 a+
b1 b+
b0 c+
b0 d+
b0 e+
b0 f+
b1 g+
b0 h+
b0 i+
b0 j+
b1 k+
b0 l+
b0 m+
b0 n+
b0 o+
b1 p+
b1 q+
b1000 "1
b1011 #1
b100000000000 $1
b1 +1
b1 ,1
b1 -1
b0 .1
b1 ;1
b11 E1
b0 H1
b0 M1
b0 S1
b1000 h1
b1011 i1
b100000000000 j1
b1 q1
b1 r1
b1 s1
b0 t1
b1 #2
b11 -2
b0 02
b0 52
b0 <2
b0 =2
b0 >2
b0 ?2
b0 @2
b0 A2
b1000 B2
b0 C2
b0 D2
b0 E2
b0 F2
b0 G2
b0 H2
b0 I2
b0 J2
b0 K2
b0 L2
b0 M2
b0 N2
b0 O2
b0 P2
b0 Q2
b0 R2
b0 S2
b0 T2
b1 U2
b0 V2
b0 W2
b1 X2
b0 Y2
b0 Z2
b0 [2
b0 \2
b1 ]2
b0 ^2
b0 _2
b0 `2
b1 a2
b0 b2
b0 c2
b0 d2
b0 e2
b1 f2
b1 g2
b1000 w7
b1100 x7
b1000000000000 y7
b1 "8
b1 #8
b1 $8
b0 %8
b1 28
b11 <8
b0 ?8
b0 D8
b0 J8
b1000 _8
b1100 `8
b1000000000000 a8
b1 h8
b1 i8
b1 j8
b0 k8
b1 x8
b11 $9
b0 '9
b0 ,9
b0 39
b0 49
b0 59
b0 69
b0 79
b0 89
b1000 99
b0 :9
b0 ;9
b0 <9
b0 =9
b0 >9
b0 ?9
b0 @9
b0 A9
b0 B9
b0 C9
b0 D9
b0 E9
b0 F9
b0 G9
b0 H9
b0 I9
b0 J9
b0 K9
b1 L9
b0 M9
b0 N9
b1 O9
b0 P9
b0 Q9
b0 R9
b0 S9
b1 T9
b0 U9
b0 V9
b0 W9
b1 X9
b0 Y9
b0 Z9
b0 [9
b0 \9
b1 ]9
b1 ^9
b1000 n>
b1100 o>
b1000000000000 p>
b1 w>
b1 x>
b1 y>
b0 z>
b1 )?
b11 3?
b0 6?
b0 ;?
b0 A?
b1000 V?
b1100 W?
b1000000000000 X?
b1 _?
b1 `?
b1 a?
b0 b?
b1 o?
b11 y?
b0 |?
b0 #@
b0 *@
b0 +@
b0 ,@
b0 -@
b0 .@
b0 /@
b1000 0@
b0 1@
b0 2@
b0 3@
b0 4@
b0 5@
b0 6@
b0 7@
b0 8@
b0 9@
b0 :@
b0 ;@
b0 <@
b0 =@
b0 >@
b0 ?@
b0 @@
b0 A@
b0 B@
b1 C@
b0 D@
b0 E@
b1 F@
b0 G@
b0 H@
b0 I@
b0 J@
b1 K@
b0 L@
b0 M@
b0 N@
b1 O@
b0 P@
b0 Q@
b0 R@
b0 S@
b1 T@
b1 U@
b0 @E
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 D#
b1001110010011110100111001000101 E#
b1001110010011110100111001000101 F#
b1001110010011110100111001000101 G#
b1001110010011110100111001000101 H#
b1001110010011110100111001000101 I#
b10000110100110001001111010000110100101100110001 N#
b10000110100110001001111010000110100101100110001 O#
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 P#
b1001110010011110100111001000101 Q#
b1001110010011110100111001000101 R#
b10000110100110001001111010000110100101100110001 S#
b10000110100110001001111010000110100101100110001 T#
b10000110100110001001111010000110100101100110001 U#
b1001110010011110100111001000101 V#
b1001110010011110100111001000101 W#
b1001110010011110100111001000101 X#
b1001110010011110100111001000101 Y#
b10000100101100101010000010000010101001101010011 [#
b10000100101100101010000010000010101001101010011 \#
b10011100100111101010010010011010100000101001100 ]#
b10011100100111101010010010011010100000101001100 ^#
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 _#
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 `#
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 a#
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 b#
b100011001000001010011000101001101000101 c#
b100011001000001010011000101001101000101 e#
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 f#
b10001000100111101001110010101000101111101000011010000010101001001000101 h#
b1000001010101010101010001001111 i#
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011000100101110011011010110100101100110 j#
b10101010100111001010101010100110100010101000100 k#
b10000110111100101100011011011000110111101101110011001010010000001001001010101100010000001000101 m#
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010101100101000101010100110010110001001001010011100101001101010100010000010100111001000011010001010101111101001110010000010100110101000101001111010100110100110001 n#
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 o#
b10011110100011001000110 p#
b100011001000001010011000101001101000101 q#
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 ,$
b1001110010011110100111001000101 -$
b1001110010011110100111001000101 .$
b1001110010011110100111001000101 /$
b1001110010011110100111001000101 0$
b1001110010011110100111001000101 1$
b10000110100110001001111010000110100101100110001 6$
b10000110100110001001111010000110100101100110001 7$
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 8$
b1001110010011110100111001000101 9$
b1001110010011110100111001000101 :$
b10000110100110001001111010000110100101100110001 ;$
b10000110100110001001111010000110100101100110001 <$
b10000110100110001001111010000110100101100110001 =$
b1001110010011110100111001000101 >$
b1001110010011110100111001000101 ?$
b1001110010011110100111001000101 @$
b1001110010011110100111001000101 A$
b10000100101100101010000010000010101001101010011 C$
b10000100101100101010000010000010101001101010011 D$
b10011100100111101010010010011010100000101001100 E$
b10011100100111101010010010011010100000101001100 F$
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 G$
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 H$
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 I$
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 J$
b100011001000001010011000101001101000101 K$
b100011001000001010011000101001101000101 M$
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 N$
b10001000100111101001110010101000101111101000011010000010101001001000101 P$
b1000001010101010101010001001111 Q$
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011000100101110011011010110100101100110 R$
b10101010100111001010101010100110100010101000100 S$
b10000110111100101100011011011000110111101101110011001010010000001001001010101100010000001000101 U$
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010101100101000101010100110010110001001001010011100101001101010100010000010100111001000011010001010101111101001110010000010100110101000101001111010100110100110001 V$
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 W$
b10011110100011001000110 X$
b100011001000001010011000101001101000101 Y$
b10011110100011001000110 Z$
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 /*
b1001110010011110100111001000101 0*
b1001110010011110100111001000101 1*
b1001110010011110100111001000101 2*
b1001110010011110100111001000101 3*
b1001110010011110100111001000101 4*
b10000110100110001001111010000110100101100110001 9*
b10000110100110001001111010000110100101100110001 :*
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 ;*
b1001110010011110100111001000101 <*
b1001110010011110100111001000101 =*
b10000110100110001001111010000110100101100110001 >*
b10000110100110001001111010000110100101100110001 ?*
b10000110100110001001111010000110100101100110001 @*
b1001110010011110100111001000101 A*
b1001110010011110100111001000101 B*
b1001110010011110100111001000101 C*
b1001110010011110100111001000101 D*
b10000100101100101010000010000010101001101010011 F*
b10000100101100101010000010000010101001101010011 G*
b10011100100111101010010010011010100000101001100 H*
b10011100100111101010010010011010100000101001100 I*
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 J*
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 K*
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 L*
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 M*
b100011001000001010011000101001101000101 N*
b100011001000001010011000101001101000101 P*
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 Q*
b10001000100111101001110010101000101111101000011010000010101001001000101 S*
b1000001010101010101010001001111 T*
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011001000101110011011010110100101100110 U*
b10101010100111001010101010100110100010101000100 V*
b10000110111100101100011011011000110111101101110011001010010000001001001010101100010000001000101 X*
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010101100101000101010100110010110001001001010011100101001101010100010000010100111001000011010001010101111101001110010000010100110101000101001111010100110100110010 Y*
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 Z*
b10011110100011001000110 [*
b100011001000001010011000101001101000101 \*
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 u*
b1001110010011110100111001000101 v*
b1001110010011110100111001000101 w*
b1001110010011110100111001000101 x*
b1001110010011110100111001000101 y*
b1001110010011110100111001000101 z*
b10000110100110001001111010000110100101100110001 !+
b10000110100110001001111010000110100101100110001 "+
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 #+
b1001110010011110100111001000101 $+
b1001110010011110100111001000101 %+
b10000110100110001001111010000110100101100110001 &+
b10000110100110001001111010000110100101100110001 '+
b10000110100110001001111010000110100101100110001 (+
b1001110010011110100111001000101 )+
b1001110010011110100111001000101 *+
b1001110010011110100111001000101 ++
b1001110010011110100111001000101 ,+
b10000100101100101010000010000010101001101010011 .+
b10000100101100101010000010000010101001101010011 /+
b10011100100111101010010010011010100000101001100 0+
b10011100100111101010010010011010100000101001100 1+
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 2+
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 3+
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 4+
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 5+
b100011001000001010011000101001101000101 6+
b100011001000001010011000101001101000101 8+
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 9+
b10001000100111101001110010101000101111101000011010000010101001001000101 ;+
b1000001010101010101010001001111 <+
b101110001011100010111101110001011101010110000101110010011101000111010101110011010111110111000001110010011011110110101001100101011000110111010000101111011011010110010101101101010111110110100101101110011010010111010001011111011001100110100101101100011001010111001100101111011011010110000101110011011101000110010101110010010111110011001000101110011011010110100101100110 =+
b10101010100111001010101010100110100010101000100 >+
b10000110111100101100011011011000110111101101110011001010010000001001001010101100010000001000101 @+
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010101100101000101010100110010110001001001010011100101001101010100010000010100111001000011010001010101111101001110010000010100110101000101001111010100110100110010 A+
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 B+
b10011110100011001000110 C+
b100011001000001010011000101001101000101 D+
b10011110100011001000110 E+
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 %1
b1001110010011110100111001000101 &1
b1001110010011110100111001000101 '1
b1001110010011110100111001000101 (1
b1001110010011110100111001000101 )1
b1001110010011110100111001000101 *1
b10000110100110001001111010000110100101100110001 /1
b10000110100110001001111010000110100101100110001 01
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 11
b1001110010011110100111001000101 21
b1001110010011110100111001000101 31
b10000110100110001001111010000110100101100110001 41
b10000110100110001001111010000110100101100110001 51
b10000110100110001001111010000110100101100110001 61
b1001110010011110100111001000101 71
b1001110010011110100111001000101 81
b1001110010011110100111001000101 91
b1001110010011110100111001000101 :1
b10000100101100101010000010000010101001101010011 <1
b10000100101100101010000010000010101001101010011 =1
b10011100100111101010010010011010100000101001100 >1
b10011100100111101010010010011010100000101001100 ?1
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 @1
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 A1
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 B1
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 C1
b100011001000001010011000101001101000101 D1
b100011001000001010011000101001101000101 F1
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 G1
b10001000100111101001110010101000101111101000011010000010101001001000101 I1
b1000001010101010101010001001111 J1
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011000100101110011011010110100101100110 K1
b10101010100111001010101010100110100010101000100 L1
b10000110111100101100011011011000110111101101110011001010010000001001001010101100010000001000101 N1
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010101100101000101010100110010110001001001010011100101001101010100010000010100111001000011010001010101111101001110010000010100110101000101001111010101001100110001 O1
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 P1
b10011110100011001000110 Q1
b100011001000001010011000101001101000101 R1
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 k1
b1001110010011110100111001000101 l1
b1001110010011110100111001000101 m1
b1001110010011110100111001000101 n1
b1001110010011110100111001000101 o1
b1001110010011110100111001000101 p1
b10000110100110001001111010000110100101100110001 u1
b10000110100110001001111010000110100101100110001 v1
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 w1
b1001110010011110100111001000101 x1
b1001110010011110100111001000101 y1
b10000110100110001001111010000110100101100110001 z1
b10000110100110001001111010000110100101100110001 {1
b10000110100110001001111010000110100101100110001 |1
b1001110010011110100111001000101 }1
b1001110010011110100111001000101 ~1
b1001110010011110100111001000101 !2
b1001110010011110100111001000101 "2
b10000100101100101010000010000010101001101010011 $2
b10000100101100101010000010000010101001101010011 %2
b10011100100111101010010010011010100000101001100 &2
b10011100100111101010010010011010100000101001100 '2
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 (2
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 )2
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 *2
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 +2
b100011001000001010011000101001101000101 ,2
b100011001000001010011000101001101000101 .2
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 /2
b10001000100111101001110010101000101111101000011010000010101001001000101 12
b1000001010101010101010001001111 22
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011000100101110011011010110100101100110 32
b10101010100111001010101010100110100010101000100 42
b10000110111100101100011011011000110111101101110011001010010000001001001010101100010000001000101 62
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010101100101000101010100110010110001001001010011100101001101010100010000010100111001000011010001010101111101001110010000010100110101000101001111010101001100110001 72
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 82
b10011110100011001000110 92
b100011001000001010011000101001101000101 :2
b10011110100011001000110 ;2
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 z7
b1001110010011110100111001000101 {7
b1001110010011110100111001000101 |7
b1001110010011110100111001000101 }7
b1001110010011110100111001000101 ~7
b1001110010011110100111001000101 !8
b10000110100110001001111010000110100101100110001 &8
b10000110100110001001111010000110100101100110001 '8
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 (8
b1001110010011110100111001000101 )8
b1001110010011110100111001000101 *8
b10000110100110001001111010000110100101100110001 +8
b10000110100110001001111010000110100101100110001 ,8
b10000110100110001001111010000110100101100110001 -8
b1001110010011110100111001000101 .8
b1001110010011110100111001000101 /8
b1001110010011110100111001000101 08
b1001110010011110100111001000101 18
b10000100101100101010000010000010101001101010011 38
b10000100101100101010000010000010101001101010011 48
b10011100100111101010010010011010100000101001100 58
b10011100100111101010010010011010100000101001100 68
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 78
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 88
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 98
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 :8
b100011001000001010011000101001101000101 ;8
b100011001000001010011000101001101000101 =8
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 >8
b10001000100111101001110010101000101111101000011010000010101001001000101 @8
b1000001010101010101010001001111 A8
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001000101110011011010110100101100110 B8
b10101010100111001010101010100110100010101000100 C8
b10000110111100101100011011011000110111101101110011001010010000001001001010101100010000001000101 E8
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010101100101000101010100110010110001001001010011100101001101010100010000010100111001000011010001010101111101001110010000010100110101000101001111010101001100110010 F8
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 G8
b10011110100011001000110 H8
b100011001000001010011000101001101000101 I8
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 b8
b1001110010011110100111001000101 c8
b1001110010011110100111001000101 d8
b1001110010011110100111001000101 e8
b1001110010011110100111001000101 f8
b1001110010011110100111001000101 g8
b10000110100110001001111010000110100101100110001 l8
b10000110100110001001111010000110100101100110001 m8
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 n8
b1001110010011110100111001000101 o8
b1001110010011110100111001000101 p8
b10000110100110001001111010000110100101100110001 q8
b10000110100110001001111010000110100101100110001 r8
b10000110100110001001111010000110100101100110001 s8
b1001110010011110100111001000101 t8
b1001110010011110100111001000101 u8
b1001110010011110100111001000101 v8
b1001110010011110100111001000101 w8
b10000100101100101010000010000010101001101010011 y8
b10000100101100101010000010000010101001101010011 z8
b10011100100111101010010010011010100000101001100 {8
b10011100100111101010010010011010100000101001100 |8
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 }8
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 ~8
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 !9
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 "9
b100011001000001010011000101001101000101 #9
b100011001000001010011000101001101000101 %9
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 &9
b10001000100111101001110010101000101111101000011010000010101001001000101 (9
b1000001010101010101010001001111 )9
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001000101110011011010110100101100110 *9
b10101010100111001010101010100110100010101000100 +9
b10000110111100101100011011011000110111101101110011001010010000001001001010101100010000001000101 -9
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010101100101000101010100110010110001001001010011100101001101010100010000010100111001000011010001010101111101001110010000010100110101000101001111010101001100110010 .9
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 /9
b10011110100011001000110 09
b100011001000001010011000101001101000101 19
b10011110100011001000110 29
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 q>
b1001110010011110100111001000101 r>
b1001110010011110100111001000101 s>
b1001110010011110100111001000101 t>
b1001110010011110100111001000101 u>
b1001110010011110100111001000101 v>
b10000110100110001001111010000110100101100110001 {>
b10000110100110001001111010000110100101100110001 |>
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 }>
b1001110010011110100111001000101 ~>
b1001110010011110100111001000101 !?
b10000110100110001001111010000110100101100110001 "?
b10000110100110001001111010000110100101100110001 #?
b10000110100110001001111010000110100101100110001 $?
b1001110010011110100111001000101 %?
b1001110010011110100111001000101 &?
b1001110010011110100111001000101 '?
b1001110010011110100111001000101 (?
b10000100101100101010000010000010101001101010011 *?
b10000100101100101010000010000010101001101010011 +?
b10011100100111101010010010011010100000101001100 ,?
b10011100100111101010010010011010100000101001100 -?
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 .?
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 /?
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 0?
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 1?
b100011001000001010011000101001101000101 2?
b100011001000001010011000101001101000101 4?
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 5?
b10001000100111101001110010101000101111101000011010000010101001001000101 7?
b1000001010101010101010001001111 8?
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001100101110011011010110100101100110 9?
b10101010100111001010101010100110100010101000100 :?
b10000110111100101100011011011000110111101101110011001010010000001001001010101100010000001000101 <?
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010101100101000101010100110010110001001001010011100101001101010100010000010100111001000011010001010101111101001110010000010100110101000101001111010101001100110011 =?
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 >?
b10011110100011001000110 ??
b100011001000001010011000101001101000101 @?
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 Y?
b1001110010011110100111001000101 Z?
b1001110010011110100111001000101 [?
b1001110010011110100111001000101 \?
b1001110010011110100111001000101 ]?
b1001110010011110100111001000101 ^?
b10000110100110001001111010000110100101100110001 c?
b10000110100110001001111010000110100101100110001 d?
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 e?
b1001110010011110100111001000101 f?
b1001110010011110100111001000101 g?
b10000110100110001001111010000110100101100110001 h?
b10000110100110001001111010000110100101100110001 i?
b10000110100110001001111010000110100101100110001 j?
b1001110010011110100111001000101 k?
b1001110010011110100111001000101 l?
b1001110010011110100111001000101 m?
b1001110010011110100111001000101 n?
b10000100101100101010000010000010101001101010011 p?
b10000100101100101010000010000010101001101010011 q?
b10011100100111101010010010011010100000101001100 r?
b10011100100111101010010010011010100000101001100 s?
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 t?
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 u?
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 v?
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 w?
b100011001000001010011000101001101000101 x?
b100011001000001010011000101001101000101 z?
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 {?
b10001000100111101001110010101000101111101000011010000010101001001000101 }?
b1000001010101010101010001001111 ~?
b10111000101110001011110110110101100101011011010101111101101001011011100110100101110100010111110110011001101001011011000110010101110011001011110111001101101100011000010111011001100101010111110011001100101110011011010110100101100110 !@
b10101010100111001010101010100110100010101000100 "@
b10000110111100101100011011011000110111101101110011001010010000001001001010101100010000001000101 $@
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010101100101000101010100110010110001001001010011100101001101010100010000010100111001000011010001010101111101001110010000010100110101000101001111010101001100110011 %@
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 &@
b10011110100011001000110 '@
b100011001000001010011000101001101000101 (@
b10011110100011001000110 )@
b1000 H:
b1000000000000 h:
b10 i:
b0 j:
b0 k:
bx l:
bx m:
b10 n:
bx o:
bx p:
bx q:
bx r:
bx s:
bx t:
bx u:
bx v:
bx w:
bx x:
bx y:
bx z:
bx {:
bx |:
bx }:
bx ~:
bx !;
bx ";
bx #;
bx $;
b0 %;
bx &;
bx ';
bx (;
bx );
bx ;=
bx <=
bx ==
bx >=
bx ?=
bx @=
bx A=
bx B=
bx C=
bx D=
bx E=
bx F=
bx G=
bx H=
b1000 J=
b0 g=
b0 h=
b0 i=
b0 j=
bx k=
bx l=
bx m=
bx n=
bx o=
bx p=
bx q=
bx r=
bx s=
b0 t=
b0 u=
b0 v=
b0 w=
b0 x=
b0 y=
b0 z=
b0 {=
b0 |=
b0 }=
b0 ~=
b1 !>
b0 ">
b0 #>
b0 $>
bx &>
bx 1>
bx 2>
bx 3>
bx 4>
bx 5>
bx 6>
bx 7>
bx 8>
bx 9>
bx :>
bx ;>
bx <>
bx =>
bx >>
bx ?>
bx @>
bx A>
bx B>
bx C>
bx D>
bx E>
b1000 G>
b1000 ?A
b1000000000000 _A
b10 `A
b0 aA
b0 bA
bx cA
bx dA
b10 eA
bx fA
bx gA
bx hA
bx iA
bx jA
bx kA
bx lA
bx mA
bx nA
bx oA
bx pA
bx qA
bx rA
bx sA
bx tA
bx uA
bx vA
bx wA
bx xA
bx yA
b0 zA
bx {A
bx |A
bx }A
bx ~A
bx 2D
bx 3D
bx 4D
bx 5D
bx 6D
bx 7D
bx 8D
bx 9D
bx :D
bx ;D
bx <D
bx =D
bx >D
bx ?D
b1000 AD
b0 ^D
b0 _D
b0 `D
b0 aD
bx bD
bx cD
bx dD
bx eD
bx fD
bx gD
bx hD
bx iD
bx jD
b0 kD
b0 lD
b0 mD
b0 nD
b0 oD
b0 pD
b0 qD
b0 rD
b0 sD
b0 tD
b0 uD
b1 vD
b0 wD
b0 xD
b0 yD
bx {D
bx (E
bx )E
bx *E
bx +E
bx ,E
bx -E
bx .E
bx /E
bx 0E
bx 1E
bx 2E
bx 3E
bx 4E
bx 5E
bx 6E
bx 7E
bx 8E
bx 9E
bx :E
bx ;E
bx <E
b1000 >E
b1000 p%
b100000 2&
b10 3&
b0 4&
b0 5&
bx 6&
bx 7&
b10 8&
bx 9&
bx :&
bx ;&
bx <&
bx =&
bx >&
bx ?&
bx @&
bx A&
bx B&
bx C&
bx D&
bx E&
bx F&
bx G&
bx H&
bx I&
bx J&
bx K&
bx L&
b0 M&
bx N&
bx O&
bx P&
bx Q&
bx c(
bx d(
bx e(
bx f(
bx g(
bx h(
bx i(
bx j(
bx k(
bx l(
bx m(
bx n(
bx o(
bx p(
b1000 r(
b0 1)
b0 2)
b0 3)
b0 4)
bx 5)
bx 6)
bx 7)
bx 8)
bx 9)
bx :)
bx ;)
bx <)
bx =)
b0 >)
b0 ?)
b0 @)
b0 A)
b0 B)
b0 C)
b0 D)
b0 E)
b0 F)
b0 G)
b0 H)
b1 I)
b0 J)
b0 K)
b0 L)
bx N)
bx Y)
bx Z)
bx [)
bx \)
bx ])
bx ^)
bx _)
bx `)
bx a)
bx b)
bx c)
bx d)
bx e)
bx f)
bx g)
bx h)
bx i)
bx j)
bx k)
bx l)
bx m)
b1000 o)
b1000 [,
b100000 {,
b10 |,
b0 },
b0 ~,
bx !-
bx "-
b10 #-
bx $-
bx %-
bx &-
bx '-
bx (-
bx )-
bx *-
bx +-
bx ,-
bx --
bx .-
bx /-
bx 0-
bx 1-
bx 2-
bx 3-
bx 4-
bx 5-
bx 6-
bx 7-
b0 8-
bx 9-
bx :-
bx ;-
bx <-
bx N/
bx O/
bx P/
bx Q/
bx R/
bx S/
bx T/
bx U/
bx V/
bx W/
bx X/
bx Y/
bx Z/
bx [/
b1000 ]/
b0 z/
b0 {/
b0 |/
b0 }/
bx ~/
bx !0
bx "0
bx #0
bx $0
bx %0
bx &0
bx '0
bx (0
b0 )0
b0 *0
b0 +0
b0 ,0
b0 -0
b0 .0
b0 /0
b0 00
b0 10
b0 20
b0 30
b1 40
b0 50
b0 60
b0 70
bx 90
bx D0
bx E0
bx F0
bx G0
bx H0
bx I0
bx J0
bx K0
bx L0
bx M0
bx N0
bx O0
bx P0
bx Q0
bx R0
bx S0
bx T0
bx U0
bx V0
bx W0
bx X0
b1000 Z0
b1000 Q3
b100000000000 q3
b10 r3
b0 s3
b0 t3
bx u3
bx v3
b10 w3
bx x3
bx y3
bx z3
bx {3
bx |3
bx }3
bx ~3
bx !4
bx "4
bx #4
bx $4
bx %4
bx &4
bx '4
bx (4
bx )4
bx *4
bx +4
bx ,4
bx -4
b0 .4
bx /4
bx 04
bx 14
bx 24
bx D6
bx E6
bx F6
bx G6
bx H6
bx I6
bx J6
bx K6
bx L6
bx M6
bx N6
bx O6
bx P6
bx Q6
b1000 S6
b0 p6
b0 q6
b0 r6
b0 s6
bx t6
bx u6
bx v6
bx w6
bx x6
bx y6
bx z6
bx {6
bx |6
b0 }6
b0 ~6
b0 !7
b0 "7
b0 #7
b0 $7
b0 %7
b0 &7
b0 '7
b0 (7
b0 )7
b1 *7
b0 +7
b0 ,7
b0 -7
bx /7
bx :7
bx ;7
bx <7
bx =7
bx >7
bx ?7
bx @7
bx A7
bx B7
bx C7
bx D7
bx E7
bx F7
bx G7
bx H7
bx I7
bx J7
bx K7
bx L7
bx M7
bx N7
b1000 P7
b0 *;
b0 +;
b0 !B
b0 "B
b0 R&
b0 S&
b0 =-
b0 >-
b0 34
b0 44
0m>
0l>
0k>
0j>
0i>
0h>
0g>
0f>
1@A
1AA
0GA
0HA
0IA
0JA
0KA
0LA
0MA
0NA
0OA
0PA
0QA
1RA
1SA
1TA
1UA
1VA
1WA
1XA
1YA
1ZA
1[A
1\A
1]A
1^A
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
05
04
xqE
xpE
xoE
xnE
xiE
xhE
xgE
xbE
xaE
x`E
x[E
xZE
xYE
0SE
0QE
0OE
xME
xKE
0IE
0GE
0EE
xCE
xAE
x]>
x\>
x[>
xZ>
xY>
xX>
xW>
xV>
xU>
xT>
xS>
xR>
xQ>
xP>
xO>
xN>
xM>
xL>
xK>
xJ>
xI>
xf7
xe7
xd7
xc7
xb7
xa7
x`7
x_7
x^7
x]7
x\7
x[7
xZ7
xY7
xX7
xW7
xV7
xU7
xT7
xS7
xR7
xo0
xn0
xm0
xl0
xk0
xj0
xi0
xh0
xg0
xf0
xe0
xd0
xc0
xb0
xa0
x`0
x_0
x^0
x]0
x\0
0y)
xx)
xw)
xv)
xu)
xt)
xs)
xr)
xq)
00#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0n"
0m"
0l"
0k"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0K"
0J"
0I"
0H"
04"
03"
02"
01"
00"
0/"
0."
0-"
0("
0'"
x&"
x%"
xr!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
xg!
xf!
0d!
0b!
0`!
0^!
xS!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
xH!
xG!
xE!
0C!
0A!
x?!
08#
07#
06#
05#
04#
03#
02#
01#
0$$
0#$
1"$
1!$
0~#
0}#
1|#
1{#
1z#
1y#
1x#
1w#
1v#
1u#
1t#
0s#
0%$
0($
0'$
0&$
0#*
0"*
0!*
0~)
0})
0|)
0{)
0z)
0m*
0l*
1k*
1j*
0i*
0h*
1g*
1f*
1e*
1d*
1c*
1b*
1a*
1`*
1_*
0^*
0n*
0q*
0p*
0o*
0w0
0v0
0u0
0t0
0s0
0r0
0q0
0p0
0c1
0b1
1a1
1`1
0_1
0^1
1]1
1\1
1[1
1Z1
1Y1
1X1
1W1
1V1
1U1
0T1
0d1
0g1
0f1
0e1
0n7
0m7
0l7
0k7
0j7
0i7
0h7
0g7
0Z8
0Y8
1X8
1W8
0V8
0U8
1T8
1S8
1R8
1Q8
1P8
1O8
1N8
1M8
1L8
0K8
0[8
0^8
0]8
0\8
0e>
0d>
0c>
0b>
0a>
0`>
0_>
0^>
0Q?
0P?
1O?
1N?
0M?
0L?
1K?
1J?
1I?
1H?
1G?
1F?
1E?
1D?
1C?
0B?
0R?
0U?
0T?
0S?
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
1q%
1r%
0x%
0y%
0z%
0{%
0|%
0}%
0~%
0!&
0"&
0#&
0$&
1%&
1&&
1'&
1(&
1)&
1*&
1+&
1,&
1-&
1.&
1/&
10&
11&
0+*
0**
0)*
0(*
0'*
0&*
0%*
0$*
1\,
1],
0c,
0d,
0e,
0f,
0g,
0h,
0i,
0j,
0k,
0l,
0m,
1n,
1o,
1p,
1q,
1r,
1s,
1t,
1u,
1v,
1w,
1x,
1y,
1z,
0!1
0~0
0}0
0|0
0{0
0z0
0y0
0x0
1R3
1S3
0Y3
0Z3
0[3
0\3
0]3
0^3
0_3
0`3
0a3
0b3
0c3
1d3
1e3
1f3
1g3
1h3
1i3
1j3
1k3
1l3
1m3
1n3
1o3
1p3
0v7
0u7
0t7
0s7
0r7
0q7
0p7
0o7
1I:
1J:
0P:
0Q:
0R:
0S:
0T:
0U:
0V:
0W:
0X:
0Y:
0Z:
1[:
1\:
1]:
1^:
1_:
1`:
1a:
1b:
1c:
1d:
1e:
1f:
1g:
$end
#5
1!
14
b0 V!
b0 X!
b0 Y!
b0 Z!
0[!
b0 W!
b0 u!
b0 w!
b0 x!
b0 y!
0z!
b0 v!
b0 >"
b0 a"
b0 &#
1^%
1u%
1v%
1M%
bx )%
bx ;%
b0 B%
1Q%
1K%
1I,
1`,
1a,
18,
bx r+
bx &,
b0 -,
1<,
16,
1?3
1V3
1W3
1.3
bx h2
bx z2
b0 #3
123
1,3
x*3
16:
1M:
1N:
1%:
bx _9
bx q9
b0 x9
1):
1#:
x!:
1-A
1DA
1EA
1z@
bx V@
bx h@
b0 o@
1~@
1x@
xv@
b0 yE
b0 xE
0{E
b0 wE
0rE
0sE
1JE
0TE
0}"
0##
0$#
0r"
0Z"
0^"
0_"
0O"
07"
0;"
0<"
0,"
0+"
0*"
0|
0&!
0N"
0M"
0*!
0q"
0p"
05!
0m
1_
0n
0`
00!
01!
0$!
0%!
0w
0x
0o0
0f7
0]>
0Q
0R
00
0/
0qE
0f!
1G!
0g!
0H!
0hE
0iE
0aE
0bE
0ZE
0[E
0zE
0%F
bx a@
bx j9
bx s2
bx }+
bx 4%
0_!
0]!
b0 p!
0@!
0>!
b0 Q!
b0 b
0V
0X
b0 p
0d
0f
0x)
0w)
0v)
0u)
0t)
0s)
0r)
0q)
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0AE
0CE
0KE
0ME
0|E
0~E
0HE
0]
0M
0+
0E!
0UE
0VE
0s
0r
0&"
0%"
bx 3%
bx |+
bx r2
bx i9
bx `@
xm>
xl>
xk>
xj>
xi>
xh>
xg>
xf>
xv7
xu7
xt7
xs7
xr7
xq7
xp7
xo7
x!1
x~0
x}0
x|0
x{0
xz0
xy0
xx0
x+*
x**
x)*
x(*
x'*
x&*
x%*
x$*
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x#*
x"*
x!*
x~)
x})
x|)
x{)
xz)
xw0
xv0
xu0
xt0
xs0
xr0
xq0
xp0
xn7
xm7
xl7
xk7
xj7
xi7
xh7
xg7
xe>
xd>
xc>
xb>
xa>
x`>
x_>
x^>
bx 2!
bx '!
bx y
bx o
bx a
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
#10
0!
04
0-A
06:
0?3
0I,
0^%
#15
1!
14
1-A
0z@
0v@
16:
0%:
0!:
1?3
0.3
0*3
1I,
08,
b0 r+
1^%
0M%
b0 )%
b0 ~"
b0 !#
b0 "#
b0 %#
b0 ["
b0 \"
b0 ]"
b0 `"
b0 8"
b0 9"
b0 :"
b0 ="
b0 5"
b0 6"
b0 X"
b0 Y"
b0 {"
b0 |"
b0 4!
b0 3!
b0 )!
b0 (!
b0 {
b0 z
0n0
0m0
0l0
0k0
0j0
0i0
0h0
0g0
0f0
0e0
0d0
0c0
0b0
0a0
0`0
0_0
0^0
0]0
0\0
0e7
0d7
0c7
0b7
0a7
0`7
0_7
0^7
0]7
0\7
0[7
0Z7
0Y7
0X7
0W7
0V7
0U7
0T7
0S7
0R7
0\>
0[>
0Z>
0Y>
0X>
0W>
0V>
0U>
0T>
0S>
0R>
0Q>
0P>
0O>
0N>
0M>
0L>
0K>
0J>
0I>
#20
1"
0!
15
04
1J
1(
0^%
0I,
0?3
06:
0-A
#25
1!
14
b0x T!
b0x s!
1^%
1M%
1I,
18,
1?3
1.3
b0 h2
b0 z2
16:
1%:
b0 _9
b0 q9
1-A
1z@
b0 V@
b0 h@
b0 a@
b0 j9
b0 s2
b0 t!
xe!
b0 U!
xF!
x^
xl
xIE
xSE
bx uE
x&F
b0 r2
b0 i9
b0 `@
0m>
0l>
0k>
0j>
0i>
0h>
0g>
0f>
0v7
0u7
0t7
0s7
0r7
0q7
0p7
0o7
0!1
0~0
0}0
0|0
0{0
0z0
0y0
0x0
0w0
0v0
0u0
0t0
0s0
0r0
0q0
0p0
0n7
0m7
0l7
0k7
0j7
0i7
0h7
0g7
0e>
0d>
0c>
0b>
0a>
0`>
0_>
0^>
b0 2!
b0 '!
b0 y
04"
03"
02"
01"
00"
0/"
0."
0-"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0o"
0L"
0)"
0v
0#!
0/!
0YE
0`E
0gE
0}E
0BE
0W
0?!
#30
0!
04
0-A
06:
0?3
0I,
0^%
#35
1!
14
bx tE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b0 s!
b0 T!
x#F
xFE
b0x U!
0F!
b0x t!
0e!
b0 uE
0l
0^
x[
xN
x,
0SE
0IE
xC!
0&F
#40
b1000010101000 '
0#
0$
0%
1&
0!
0I
0H
0G
1F
0E
1D
0C
1B
0A
0@
0?
0>
1=
0<
0;
0:
06
07
08
19
0U
0T
02
03
04
1S!
0r!
b0 t!
b1 U!
0^%
0I,
0?3
06:
0-A
#45
1!
14
b1 T!
1^%
1M%
b1000 ;%
1I,
18,
b1000 &,
1?3
1.3
16:
1%:
1-A
1z@
b0 tE
0#F
0FE
b0 }+
b0 4%
b10 U!
1F!
1^
0[
0N
0,
1IE
0C!
b100 uE
1&F
b0 3%
b0 |+
0+*
0**
0)*
0(*
0'*
0&*
0%*
0$*
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
0#*
0"*
0!*
0~)
0})
0|)
0{)
0z)
b0 o
b0 a
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
#50
0!
04
0-A
06:
0?3
0I,
0^%
#55
1!
14
b100 tE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10 T!
b11 U!
#60
0!
04
0^%
0I,
0?3
06:
0-A
#65
1!
14
b11 T!
b1000010101000 Z!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
1B!
1Z
1O
1-
1EE
b1 uE
1"F
#70
0!
04
0-A
06:
0?3
0I,
0^%
#75
1!
14
b1 tE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b1 W!
1#F
1FE
1[
1N
1,
1C!
#80
0!
04
0^%
0I,
0?3
06:
0-A
#85
1!
14
b10 W!
b10000101010000 Z!
b1 V!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b1 yE
#90
0!
04
0-A
06:
0?3
0I,
0^%
#95
1!
14
b10 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b11 W!
b100001010100000 Z!
b10 V!
#100
0!
04
0^%
0I,
0?3
06:
0-A
#105
1!
14
b100 W!
b1000010101000000 Z!
b11 V!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b11 yE
1@!
1X
1CE
1~E
1VE
1s
1&"
#110
0!
04
0-A
06:
0?3
0I,
0^%
#115
1!
14
b100 yE
b10 xE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b101 W!
b101010000000 Z!
b100 V!
0@!
b1 vE
1!F
0VE
1]E
1^E
1!!
1~
0s
0#F
0X
1I"
0&"
1J"
0CE
b1 b"
0~E
1DE
0FE
0[
1Y
1K
0N
0,
1)
0C!
1A!
0]E
0~
0I"
#120
0!
04
0^%
0I,
0?3
06:
0-A
#125
1!
14
b1 a"
b110 W!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b101 yE
1^"
1M"
1$!
1aE
1zE
b10 uE
1#F
1FE
1[
1N
1,
1C!
#130
0!
04
0-A
06:
0?3
0I,
0^%
#135
1!
14
b10 tE
b110 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b111 W!
b1010100000000 Z!
b101 V!
b1 ["
b100 U!
#140
0!
04
0^%
0I,
0?3
06:
0-A
#145
1!
14
b100 T!
b10 ["
b1000 W!
b10101000000000 Z!
b110 V!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b111 yE
#150
0!
04
0-A
06:
0?3
0I,
0^%
#155
1!
14
b1000 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b11 ["
b101010000000000 Z!
b111 V!
#160
0!
04
0^%
0I,
0?3
06:
0-A
#165
1!
14
b1010100000000000 Z!
b1000 V!
b100 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b1001 yE
1@!
1X
1CE
1~E
1]E
1~
1I"
#170
0!
04
0-A
06:
0?3
0I,
0^%
#175
1!
14
b1010 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10000000 \"
b101 ["
b101000000000000 Z!
b1001 V!
b10000000 Y"
b10000000 )!
1V7
0@!
0X
0CE
0~E
0]E
0~
0I"
#180
0!
04
0^%
0I,
0?3
06:
0-A
#185
1!
14
b1010000000000000 Z!
b1010 V!
b110 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
b10000000 q9
1-A
1z@
b1011 yE
1@!
1X
1CE
1~E
1]E
1~
1I"
#190
0!
04
0-A
06:
0?3
0I,
0^%
#195
1!
14
b1100 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10100000 \"
b111 ["
b100000000000000 Z!
b1011 V!
b10100000 Y"
b10100000 )!
1X7
0@!
0X
0CE
0~E
0]E
0~
0I"
#200
0!
04
0^%
0I,
0?3
06:
0-A
#205
1!
14
b1000000000000000 Z!
b1100 V!
b1000 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
b10100000 q9
1-A
1z@
b1101 yE
xL"
x#!
x`E
x}E
1@!
1X
1CE
xBE
1~E
xW
x?!
1]E
1~
1I"
#210
0!
04
0-A
06:
0?3
0I,
0^%
#215
1!
14
b1110 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10101000 \"
b1001 ["
b0 Z!
b1101 V!
b10101000 Y"
b10101000 )!
1Z7
0@!
0X
0CE
0~E
0]E
0~
0I"
#220
0!
04
0^%
0I,
0?3
06:
0-A
#225
1!
14
b1110 V!
b1010 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
b10101000 q9
1-A
1z@
b1111 yE
#230
0!
04
0-A
06:
0?3
0I,
0^%
#235
1!
14
b10000 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b1011 ["
b1111 V!
b110 U!
b100 b"
#240
0!
04
0^%
0I,
0?3
06:
0-A
#245
1!
14
b100 a"
b110 T!
b0 V!
b1100 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10001 yE
0^"
0M"
0$!
0aE
0zE
0B!
1D!
b110 b"
1\
0Z
0#F
0O
1L
1*
0-
1GE
0EE
0"F
0FE
1$F
0[
0N
0,
0C!
0^E
1_E
1"!
0!!
1K"
0J"
#250
0!
04
0-A
06:
0?3
0I,
0^%
#255
1!
14
b10010 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b110 a"
b0 ["
b1 `"
0L"
1O"
1&!
0#!
1qE
0`E
0}E
b111 uE
0BE
0W
0?!
#260
0!
04
0^%
0I,
0?3
06:
0-A
#265
1!
14
b111 tE
b10 `"
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10011 yE
b0 uE
#270
0!
04
0-A
06:
0?3
0I,
0^%
#275
1!
14
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b11 `"
b0 tE
b1 wE
1rE
1`
1H!
b1000 U!
#280
0!
04
0^%
0I,
0?3
06:
0-A
#285
1!
14
b1000 T!
b100 `"
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
0D!
0\
0L
0*
0GE
0$F
0_E
0"!
0K"
#290
0!
04
0-A
06:
0?3
0I,
0^%
#295
1!
14
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b101 `"
b101 b"
#300
0!
04
0^%
0I,
0?3
06:
0-A
#305
1!
14
b101 a"
b110 `"
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
1_"
0O"
0&!
1N"
1%!
0qE
1bE
0rE
0`
0H!
b110 U!
1%F
b10 uE
1HE
1]
1M
1+
1E!
#310
0!
04
0-A
06:
0?3
0I,
0^%
#315
1!
14
b10 tE
b110 T!
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
1D!
1\
1L
1*
1GE
1$F
1_E
1"!
1K"
#320
0!
04
0^%
0I,
0?3
06:
0-A
#325
1!
14
b1 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10100 yE
b1 V!
#330
0!
04
0-A
06:
0?3
0I,
0^%
#335
1!
14
b10 V!
b10101 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10 ["
#340
0!
04
0^%
0I,
0?3
06:
0-A
#345
1!
14
b11 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10110 yE
b11 V!
#350
0!
04
0-A
06:
0?3
0I,
0^%
#355
1!
14
b100 V!
b10111 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b100 ["
#360
0!
04
0^%
0I,
0?3
06:
0-A
#365
1!
14
b101 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b11000 yE
b101 V!
#370
0!
04
0-A
06:
0?3
0I,
0^%
#375
1!
14
b110 V!
b11001 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b110 ["
#380
0!
04
0^%
0I,
0?3
06:
0-A
#385
1!
14
b111 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b11010 yE
b111 V!
b111 U!
#390
0!
04
0-A
06:
0?3
0I,
0^%
#395
1!
14
b111 T!
b1000 V!
b11011 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b1000 ["
xL"
x#!
x`E
b0 b"
x}E
b0 U!
0D!
1R!
1c
0\
0L
10#
0*
0GE
xBE
0$F
xW
x?!
0_E
0"!
0K"
#400
0!
04
0^%
0I,
0?3
06:
0-A
#405
1!
14
b0 a"
1^%
1M%
1O%
1I%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b11100 yE
b0 T!
b0 V!
b0 W!
0_"
0N"
0%!
0bE
b1 U!
0R!
0F!
0%F
b1000 ?%
b110010101 R&
b0 *%
b1000000 N&
b0 P&
b1 Q&
b0 <&
b1000001 N&
b1 <&
b1000010 N&
b10 <&
b1000011 N&
b11 <&
b1000100 N&
b100 <&
b1000101 N&
b101 <&
b1000110 N&
b110 <&
b1000111 N&
b111 <&
b1001000 N&
b1000 <&
0^
0c
00#
0IE
0HE
0&F
0]
0M
0+
0E!
b11 uE
#410
0!
04
0-A
06:
0?3
0I,
0^%
#415
1!
14
b11 tE
b1 T!
b11101 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
0O%
0I%
b0 ["
b0 \"
b0 `"
b0 Y"
0L"
0#!
b0 )!
0Z7
0X7
0V7
0`E
0}E
b10 U!
1F!
b0 uE
1^
1IE
0BE
1&F
0W
0?!
#420
0!
04
0^%
0I,
0?3
06:
0-A
#425
1!
14
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
b0 q9
1-A
1z@
b10 T!
b0 tE
b0 yE
b0 xE
b0 wE
b0 vE
0!F
b100 uE
b11 U!
0DE
0Y
0K
0)
0A!
#430
0!
04
0-A
06:
0?3
0I,
0^%
#435
1!
14
b100 tE
b11 T!
b1000010101000 Z!
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
1B!
1Z
1O
1-
1EE
b1 uE
1"F
#440
0!
04
0^%
0I,
0?3
06:
0-A
#445
1!
14
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b1 W!
b1 tE
1#F
1FE
1[
1N
1,
1C!
#450
0!
04
0-A
06:
0?3
0I,
0^%
#455
1!
14
b1 yE
b10 W!
b10000101010000 Z!
b1 V!
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
#460
0!
04
0^%
0I,
0?3
06:
0-A
#465
1!
14
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b11 W!
b100001010100000 Z!
b10 V!
b10 yE
#470
0!
04
0-A
06:
0?3
0I,
0^%
#475
1!
14
b11 yE
b100 W!
b1000010101000000 Z!
b11 V!
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
1@!
1X
1CE
1~E
1VE
1s
1&"
#480
0!
04
0^%
0I,
0?3
06:
0-A
#485
1!
14
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b101 W!
b101010000000 Z!
b100 V!
b100 yE
b10 xE
b1 vE
1!F
0VE
1]E
1^E
0@!
0X
1!!
1~
0s
0#F
1I"
0&"
0CE
1J"
b1 b"
0~E
1DE
0FE
0[
1Y
1K
0N
0,
1)
0C!
1A!
0]E
0~
0I"
#490
0!
04
0-A
06:
0?3
0I,
0^%
#495
1!
14
b1 a"
b101 yE
b110 W!
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
1^"
1M"
1$!
1aE
1zE
b10 uE
1#F
1FE
1[
1N
1,
1C!
#500
0!
04
0^%
0I,
0?3
06:
0-A
#505
1!
14
b10 tE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b111 W!
b1010100000000 Z!
b101 V!
b110 yE
b1 ["
b100 U!
#510
0!
04
0-A
06:
0?3
0I,
0^%
#515
1!
14
b100 T!
b10 ["
b1000 W!
b10101000000000 Z!
b110 V!
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b111 yE
#520
0!
04
0^%
0I,
0?3
06:
0-A
#525
1!
14
b1000 yE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b11 ["
b101010000000000 Z!
b111 V!
#530
0!
04
0-A
06:
0?3
0I,
0^%
#535
1!
14
b1010100000000000 Z!
b1000 V!
b100 ["
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b1001 yE
1@!
1X
1CE
1~E
1]E
1~
1I"
#540
0!
04
0^%
0I,
0?3
06:
0-A
#545
1!
14
b1010 yE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10000000 \"
b101 ["
b101000000000000 Z!
b1001 V!
b10000000 Y"
b10000000 )!
1V7
0@!
0X
0CE
0~E
0]E
0~
0I"
#550
0!
04
0-A
06:
0?3
0I,
0^%
#555
1!
14
b1010000000000000 Z!
b1010 V!
b110 ["
1-A
0z@
16:
0%:
b10000000 q9
1?3
0.3
1I,
08,
1^%
0M%
b1011 yE
1@!
1X
1CE
1~E
1]E
1~
1I"
#560
0!
04
0^%
0I,
0?3
06:
0-A
#565
1!
14
b1100 yE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10100000 \"
b111 ["
b100000000000000 Z!
b1011 V!
b10100000 Y"
b10100000 )!
1X7
0@!
0X
0CE
0~E
0]E
0~
0I"
#570
0!
04
0-A
06:
0?3
0I,
0^%
#575
1!
14
b1000000000000000 Z!
b1100 V!
b1000 ["
1-A
0z@
16:
0%:
b10100000 q9
1?3
0.3
1I,
08,
1^%
0M%
b1101 yE
xL"
x#!
x`E
x}E
1@!
1X
1CE
xBE
1~E
xW
x?!
1]E
1~
1I"
#580
0!
04
0^%
0I,
0?3
06:
0-A
#585
1!
14
b1110 yE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10101000 \"
b1001 ["
b0 Z!
b1101 V!
b10101000 Y"
b10101000 )!
1Z7
0@!
0X
0CE
0~E
0]E
0~
0I"
#590
0!
04
0-A
06:
0?3
0I,
0^%
#595
1!
14
b1110 V!
b1010 ["
1-A
0z@
16:
0%:
b10101000 q9
1?3
0.3
1I,
08,
1^%
0M%
b1111 yE
#600
0!
04
0^%
0I,
0?3
06:
0-A
#605
1!
14
b10000 yE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b1011 ["
b1111 V!
b110 U!
b100 b"
#610
0!
04
0-A
06:
0?3
0I,
0^%
#615
1!
14
b100 a"
b110 T!
b0 V!
b1100 ["
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10001 yE
0^"
0M"
0$!
0aE
0zE
0B!
1D!
b110 b"
1\
0Z
0#F
0O
1L
1*
0-
1GE
0EE
0"F
0FE
1$F
0[
0N
0,
0C!
0^E
1_E
1"!
0!!
1K"
0J"
#620
0!
04
0^%
0I,
0?3
06:
0-A
#625
1!
14
b10010 yE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b110 a"
b0 ["
b1 `"
0L"
1O"
1&!
0#!
1qE
0`E
0}E
b111 uE
0BE
0W
0?!
#630
0!
04
0-A
06:
0?3
0I,
0^%
#635
1!
14
b111 tE
b10 `"
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10011 yE
b0 uE
#640
0!
04
0^%
0I,
0?3
06:
0-A
#645
1!
14
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b11 `"
b0 tE
b1 wE
1rE
1`
1H!
b1000 U!
#650
0!
04
0-A
06:
0?3
0I,
0^%
#655
1!
14
b1000 T!
b100 `"
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
0D!
0\
0L
0*
0GE
0$F
0_E
0"!
0K"
#660
0!
04
0^%
0I,
0?3
06:
0-A
#665
1!
14
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b101 `"
b101 b"
#670
0!
04
0-A
06:
0?3
0I,
0^%
#675
1!
14
b101 a"
b110 `"
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
1_"
0O"
0&!
1N"
1%!
0qE
1bE
0rE
0`
0H!
b110 U!
1%F
b10 uE
1HE
1]
1M
1+
1E!
#680
0!
04
0^%
0I,
0?3
06:
0-A
#685
1!
14
b10 tE
b110 T!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
1D!
1\
1L
1*
1GE
1$F
1_E
1"!
1K"
#690
0!
04
0-A
06:
0?3
0I,
0^%
#695
1!
14
b1 ["
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10100 yE
b1 V!
#700
0!
04
0^%
0I,
0?3
06:
0-A
#705
1!
14
b10 V!
b10101 yE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10 ["
#710
0!
04
0-A
06:
0?3
0I,
0^%
#715
1!
14
b11 ["
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10110 yE
b11 V!
#720
0!
04
0^%
0I,
0?3
06:
0-A
#725
1!
14
b100 V!
b10111 yE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b100 ["
#730
0!
04
0-A
06:
0?3
0I,
0^%
#735
1!
14
b101 ["
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b11000 yE
b101 V!
#740
0!
04
0^%
0I,
0?3
06:
0-A
#745
1!
14
b110 V!
b11001 yE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b110 ["
#750
0!
04
0-A
06:
0?3
0I,
0^%
#755
1!
14
b111 ["
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b11010 yE
b111 V!
b111 U!
#760
0!
04
0^%
0I,
0?3
06:
0-A
#765
1!
14
b111 T!
b1000 V!
b11011 yE
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b1000 ["
xL"
x#!
x`E
b0 b"
x}E
b0 U!
0D!
1R!
1c
0\
0L
10#
0*
0GE
xBE
0$F
xW
x?!
0_E
0"!
0K"
#770
0!
04
0-A
06:
0?3
0I,
0^%
#775
1!
14
b0 a"
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
1O%
1I%
b11100 yE
b0 T!
b0 V!
b0 W!
0_"
0N"
0%!
0bE
b1 U!
0R!
0F!
0%F
b1100000111 R&
b1000000 N&
b0 <&
b1000001 N&
b1 <&
b1000010 N&
b10 <&
b1000011 N&
b11 <&
b1000100 N&
b100 <&
b1000101 N&
b101 <&
b1000110 N&
b110 <&
b1000111 N&
b111 <&
b1001000 N&
b1000 <&
0^
0c
00#
0IE
0HE
0&F
0]
0M
0+
0E!
b11 uE
#780
0!
04
0^%
0I,
0?3
06:
0-A
#785
1!
14
b11 tE
b1 T!
b11101 yE
1^%
1M%
0O%
0I%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b0 ["
b0 \"
b0 `"
b0 Y"
0L"
0#!
b0 )!
0Z7
0X7
0V7
0`E
0}E
b10 U!
1F!
b0 uE
1^
1IE
0BE
1&F
0W
0?!
#790
0!
04
0-A
06:
0?3
0I,
0^%
#795
1!
14
1-A
0z@
16:
0%:
b0 q9
1?3
0.3
1I,
08,
1^%
0M%
b10 T!
b0 tE
b0 yE
b0 xE
b0 wE
b0 vE
0!F
b100 uE
b11 U!
0DE
0Y
0K
0)
0A!
#800
0!
04
0^%
0I,
0?3
06:
0-A
#805
1!
14
b100 tE
b11 T!
b1000010101000 Z!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
1B!
1Z
1O
1-
1EE
b1 uE
1"F
#810
0!
04
0-A
06:
0?3
0I,
0^%
#815
1!
14
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b1 W!
b1 tE
1#F
1FE
1[
1N
1,
1C!
#820
0!
04
0^%
0I,
0?3
06:
0-A
#825
1!
14
b1 yE
b10 W!
b10000101010000 Z!
b1 V!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
#830
0!
04
0-A
06:
0?3
0I,
0^%
#835
1!
14
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b11 W!
b100001010100000 Z!
b10 V!
b10 yE
#840
0!
04
0^%
0I,
0?3
06:
0-A
#845
1!
14
b11 yE
b100 W!
b1000010101000000 Z!
b11 V!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
1@!
1X
1CE
1~E
1VE
1s
1&"
#850
0!
04
0-A
06:
0?3
0I,
0^%
#855
1!
14
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b101 W!
b101010000000 Z!
b100 V!
b100 yE
b10 xE
b1 vE
1!F
0VE
1]E
1^E
0@!
0X
1!!
1~
0s
0#F
1I"
0&"
0CE
1J"
b1 b"
0~E
1DE
0FE
0[
1Y
1K
0N
0,
1)
0C!
1A!
0]E
0~
0I"
#860
0!
04
0^%
0I,
0?3
06:
0-A
#865
1!
14
b1 a"
b101 yE
b110 W!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
1^"
1M"
1$!
1aE
1zE
b10 uE
1#F
1FE
1[
1N
1,
1C!
#870
0!
04
0-A
06:
0?3
0I,
0^%
#875
1!
14
b10 tE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b111 W!
b1010100000000 Z!
b101 V!
b110 yE
b1 ["
b100 U!
#880
0!
04
0^%
0I,
0?3
06:
0-A
#885
1!
14
b100 T!
b10 ["
b1000 W!
b10101000000000 Z!
b110 V!
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b111 yE
#890
0!
04
0-A
06:
0?3
0I,
0^%
#895
1!
14
b1000 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b11 ["
b101010000000000 Z!
b111 V!
#900
0!
04
0^%
0I,
0?3
06:
0-A
#905
1!
14
b1010100000000000 Z!
b1000 V!
b100 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b1001 yE
1@!
1X
1CE
1~E
1]E
1~
1I"
#910
0!
04
0-A
06:
0?3
0I,
0^%
#915
1!
14
b1010 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10000000 \"
b101 ["
b101000000000000 Z!
b1001 V!
b10000000 Y"
b10000000 )!
1V7
0@!
0X
0CE
0~E
0]E
0~
0I"
#920
0!
04
0^%
0I,
0?3
06:
0-A
#925
1!
14
b1010000000000000 Z!
b1010 V!
b110 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
b10000000 q9
1-A
1z@
b1011 yE
1@!
1X
1CE
1~E
1]E
1~
1I"
#930
0!
04
0-A
06:
0?3
0I,
0^%
#935
1!
14
b1100 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10100000 \"
b111 ["
b100000000000000 Z!
b1011 V!
b10100000 Y"
b10100000 )!
1X7
0@!
0X
0CE
0~E
0]E
0~
0I"
#940
0!
04
0^%
0I,
0?3
06:
0-A
#945
1!
14
b1000000000000000 Z!
b1100 V!
b1000 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
b10100000 q9
1-A
1z@
b1101 yE
xL"
x#!
x`E
x}E
1@!
1X
1CE
xBE
1~E
xW
x?!
1]E
1~
1I"
#950
0!
04
0-A
06:
0?3
0I,
0^%
#955
1!
14
b1110 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10101000 \"
b1001 ["
b0 Z!
b1101 V!
b10101000 Y"
b10101000 )!
1Z7
0@!
0X
0CE
0~E
0]E
0~
0I"
#960
0!
04
0^%
0I,
0?3
06:
0-A
#965
1!
14
b1110 V!
b1010 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
b10101000 q9
1-A
1z@
b1111 yE
#970
0!
04
0-A
06:
0?3
0I,
0^%
#975
1!
14
b10000 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b1011 ["
b1111 V!
b110 U!
b100 b"
#980
0!
04
0^%
0I,
0?3
06:
0-A
#985
1!
14
b100 a"
b110 T!
b0 V!
b1100 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10001 yE
0^"
0M"
0$!
0aE
0zE
0B!
1D!
b110 b"
1\
0Z
0#F
0O
1L
1*
0-
1GE
0EE
0"F
0FE
1$F
0[
0N
0,
0C!
0^E
1_E
1"!
0!!
1K"
0J"
#990
0!
04
0-A
06:
0?3
0I,
0^%
#995
1!
14
b10010 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b110 a"
b0 ["
b1 `"
0L"
1O"
1&!
0#!
1qE
0`E
0}E
b111 uE
0BE
0W
0?!
#1000
0!
04
0^%
0I,
0?3
06:
0-A
#1005
1!
14
b111 tE
b10 `"
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10011 yE
b0 uE
#1010
0!
04
0-A
06:
0?3
0I,
0^%
#1015
1!
14
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b11 `"
b0 tE
b1 wE
1rE
1`
1H!
b1000 U!
#1020
0!
04
0^%
0I,
0?3
06:
0-A
#1025
1!
14
b1000 T!
b100 `"
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
0D!
0\
0L
0*
0GE
0$F
0_E
0"!
0K"
#1030
0!
04
0-A
06:
0?3
0I,
0^%
#1035
1!
14
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b101 `"
b101 b"
#1040
0!
04
0^%
0I,
0?3
06:
0-A
#1045
1!
14
b101 a"
b110 `"
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
1_"
0O"
0&!
1N"
1%!
0qE
1bE
0rE
0`
0H!
b110 U!
1%F
b10 uE
1HE
1]
1M
1+
1E!
#1050
0!
04
0-A
06:
0?3
0I,
0^%
#1055
1!
14
b10 tE
b110 T!
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
1D!
1\
1L
1*
1GE
1$F
1_E
1"!
1K"
#1060
0!
04
0^%
0I,
0?3
06:
0-A
#1065
1!
14
b1 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10100 yE
b1 V!
#1070
0!
04
0-A
06:
0?3
0I,
0^%
#1075
1!
14
b10 V!
b10101 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b10 ["
#1080
0!
04
0^%
0I,
0?3
06:
0-A
#1085
1!
14
b11 ["
1^%
1M%
1I,
18,
1?3
1.3
16:
1%:
1-A
1z@
b10110 yE
b11 V!
#1090
0!
04
0-A
06:
0?3
0I,
0^%
#1095
1!
14
b100 V!
b10111 yE
1-A
0z@
16:
0%:
1?3
0.3
1I,
08,
1^%
0M%
b100 ["
#1100
0!
04
0^%
0I,
0?3
06:
0-A
